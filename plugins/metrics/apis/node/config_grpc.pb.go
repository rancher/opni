// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/plugins/metrics/apis/node/config.proto

package node

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NodeConfiguration_GetDefaultConfiguration_FullMethodName   = "/node.metrics.config.NodeConfiguration/GetDefaultConfiguration"
	NodeConfiguration_SetDefaultConfiguration_FullMethodName   = "/node.metrics.config.NodeConfiguration/SetDefaultConfiguration"
	NodeConfiguration_ResetDefaultConfiguration_FullMethodName = "/node.metrics.config.NodeConfiguration/ResetDefaultConfiguration"
	NodeConfiguration_GetConfiguration_FullMethodName          = "/node.metrics.config.NodeConfiguration/GetConfiguration"
	NodeConfiguration_SetConfiguration_FullMethodName          = "/node.metrics.config.NodeConfiguration/SetConfiguration"
	NodeConfiguration_ResetConfiguration_FullMethodName        = "/node.metrics.config.NodeConfiguration/ResetConfiguration"
	NodeConfiguration_DryRun_FullMethodName                    = "/node.metrics.config.NodeConfiguration/DryRun"
	NodeConfiguration_ConfigurationHistory_FullMethodName      = "/node.metrics.config.NodeConfiguration/ConfigurationHistory"
)

// NodeConfigurationClient is the client API for NodeConfiguration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeConfigurationClient interface {
	// Returns the default implementation-specific configuration, or one previously set.
	//
	// If a default configuration was previously set using SetDefaultConfiguration, it
	// returns that configuration. Otherwise, returns implementation-specific defaults.
	//
	// An optional revision argument can be provided to get a specific historical
	// version of the configuration instead of the current configuration.
	GetDefaultConfiguration(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*MetricsCapabilityConfig, error)
	// Sets the default configuration that will be used as the base for future configuration changes.
	// If no custom default configuration is set using this method, implementation-specific
	// defaults may be chosen.
	//
	// Unlike with SetConfiguration, the input is not merged with the existing configuration,
	// instead replacing it directly.
	//
	// If the revision field is set, the server will reject the request if the current
	// revision does not match the provided revision.
	//
	// This API is different from the SetConfiguration API, and should not be necessary
	// for most use cases. It can be used in situations where an additional persistence
	// layer that is not driver-specific is desired.
	SetDefaultConfiguration(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Resets the default configuration to the implementation-specific defaults.
	//
	// If a custom default configuration was previously set using SetDefaultConfiguration,
	// it will be replaced with the implementation-specific defaults. Otherwise,
	// this will have no effect.
	ResetDefaultConfiguration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Gets the current configuration, or the default configuration if not set.
	//
	// This configuration is maintained and versioned separately from the default
	// configuration, and has different semantics regarding merging and persistence.
	//
	// The active configuration can be set using SetConfiguration. Then, future
	// calls to GetConfiguration will return that configuration instead of falling
	// back to the default.
	//
	// An optional revision argument can be provided to get a specific historical
	// version of the configuration instead of the current configuration.
	// This revision value can be obtained from the revision field of a previous
	// call to GetConfiguration, or from the revision field of one of the history
	// entries returned by GetConfigurationHistory.
	GetConfiguration(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*MetricsCapabilityConfig, error)
	// Updates the active configuration by merging the input with the current active configuration.
	// If there is no active configuration, the input will be merged with the default configuration.
	//
	// The merge is performed by replacing all *present* fields in the input with the
	// corresponding fields in the target. Slices and maps are overwritten and not combined.
	// Any *non-present* fields in the input are ignored, and the corresponding fields
	// in the target are left unchanged.
	//
	// Field presence is defined by the protobuf spec. The following kinds of fields
	// have presence semantics:
	// - Messages
	// - Repeated fields (scalars or messages)
	// - Maps
	// - Optional scalars
	// Non-optional scalars do *not* have presence semantics, and are always treated
	// as present for the purposes of merging. For this reason, it is not recommended
	// to use non-optional scalars in messages intended to be used with this API.
	//
	// Subsequent calls to this API will merge inputs with the previous active configuration,
	// not the default configuration.
	//
	// When updating an existing configuration, the revision number in the input configuration
	// must match the revision number of the existing configuration, otherwise a conflict
	// error will be returned. The timestamp field of the revision is ignored for this purpose.
	//
	// Some fields in the configuration may be marked as secrets. These fields are
	// write-only from this API, and the placeholder value "***" will be returned in
	// place of the actual value when getting the configuration.
	// When setting the configuration, the same placeholder value can be used to indicate
	// the existing value should be preserved.
	SetConfiguration(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Resets the active configuration to the current default configuration.
	//
	// The request may optionally contain a field mask to specify which fields should
	// be preserved. Furthermore, if a mask is set, the request may also contain a patch
	// object used to apply additional changes to the masked fields. These changes are
	// applied atomically at the time of reset. Fields present in the patch object, but
	// not in the mask, are ignored.
	//
	// For example, with the following message:
	//
	//	message Example {
	//	 optional int32 a = 1;
	//	 optional int32 b = 2;
	//	 optional int32 c = 3;
	//	}
	//
	// and current state:
	//
	//	active:  { a: 1, b: 2, c: 3 }
	//	default: { a: 4, b: 5, c: 6 }
	//
	// and reset request parameters:
	//
	//	{
	//	  mask:  { paths: [ "a", "b" ] }
	//	  patch: { a: 100 }
	//	}
	//
	// The resulting active configuration will be:
	//
	//	active: {
	//	  a: 100, // masked, set to 100 via patch
	//	  b: 2,   // masked, but not set in patch, so left unchanged
	//	  c: 6,   // not masked, reset to default
	//	}
	ResetConfiguration(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Show what changes would be made to a configuration without saving them.
	// The request expects an action, target, and spec to be provided. These
	// correspond roughly to the other APIs in this service.
	//
	// Configuring DryRunRequest:
	//   - Use the Active target for the SetConfiguration API, and the Default target
	//     for the SetDefaultConfiguration API. Install and Uninstall actions do not
	//     require a target (if they are available in this service).
	//   - The Set action requires the spec field to be set.
	//   - The Reset action ignores the spec field, and will use the optional patch
	//     and mask fields if provided.
	//
	// Notes:
	//   - When DryRun is used on Install or Uninstall requests, the response will
	//     contain modifications to the 'enabled' field only. This field is read-only
	//     in the Set* APIs.
	//   - To validate the current configuration but keep it unchanged, use the
	//     Set action with an empty spec.
	//   - Configurations returned by DryRun will always have an empty revision field.
	DryRun(ctx context.Context, in *DryRunRequest, opts ...grpc.CallOption) (*DryRunResponse, error)
	// Get a list of all past revisions of the configuration.
	//
	// Will return the history for either the active or default configuration
	// depending on the specified target.
	//
	// The entries are ordered from oldest to newest, where the last entry is
	// the current configuration.
	ConfigurationHistory(ctx context.Context, in *ConfigurationHistoryRequest, opts ...grpc.CallOption) (*ConfigurationHistoryResponse, error)
}

type nodeConfigurationClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeConfigurationClient(cc grpc.ClientConnInterface) NodeConfigurationClient {
	return &nodeConfigurationClient{cc}
}

func (c *nodeConfigurationClient) GetDefaultConfiguration(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*MetricsCapabilityConfig, error) {
	out := new(MetricsCapabilityConfig)
	err := c.cc.Invoke(ctx, NodeConfiguration_GetDefaultConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeConfigurationClient) SetDefaultConfiguration(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NodeConfiguration_SetDefaultConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeConfigurationClient) ResetDefaultConfiguration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NodeConfiguration_ResetDefaultConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeConfigurationClient) GetConfiguration(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*MetricsCapabilityConfig, error) {
	out := new(MetricsCapabilityConfig)
	err := c.cc.Invoke(ctx, NodeConfiguration_GetConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeConfigurationClient) SetConfiguration(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NodeConfiguration_SetConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeConfigurationClient) ResetConfiguration(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NodeConfiguration_ResetConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeConfigurationClient) DryRun(ctx context.Context, in *DryRunRequest, opts ...grpc.CallOption) (*DryRunResponse, error) {
	out := new(DryRunResponse)
	err := c.cc.Invoke(ctx, NodeConfiguration_DryRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeConfigurationClient) ConfigurationHistory(ctx context.Context, in *ConfigurationHistoryRequest, opts ...grpc.CallOption) (*ConfigurationHistoryResponse, error) {
	out := new(ConfigurationHistoryResponse)
	err := c.cc.Invoke(ctx, NodeConfiguration_ConfigurationHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeConfigurationServer is the server API for NodeConfiguration service.
// All implementations should embed UnimplementedNodeConfigurationServer
// for forward compatibility
type NodeConfigurationServer interface {
	// Returns the default implementation-specific configuration, or one previously set.
	//
	// If a default configuration was previously set using SetDefaultConfiguration, it
	// returns that configuration. Otherwise, returns implementation-specific defaults.
	//
	// An optional revision argument can be provided to get a specific historical
	// version of the configuration instead of the current configuration.
	GetDefaultConfiguration(context.Context, *GetRequest) (*MetricsCapabilityConfig, error)
	// Sets the default configuration that will be used as the base for future configuration changes.
	// If no custom default configuration is set using this method, implementation-specific
	// defaults may be chosen.
	//
	// Unlike with SetConfiguration, the input is not merged with the existing configuration,
	// instead replacing it directly.
	//
	// If the revision field is set, the server will reject the request if the current
	// revision does not match the provided revision.
	//
	// This API is different from the SetConfiguration API, and should not be necessary
	// for most use cases. It can be used in situations where an additional persistence
	// layer that is not driver-specific is desired.
	SetDefaultConfiguration(context.Context, *SetRequest) (*emptypb.Empty, error)
	// Resets the default configuration to the implementation-specific defaults.
	//
	// If a custom default configuration was previously set using SetDefaultConfiguration,
	// it will be replaced with the implementation-specific defaults. Otherwise,
	// this will have no effect.
	ResetDefaultConfiguration(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Gets the current configuration, or the default configuration if not set.
	//
	// This configuration is maintained and versioned separately from the default
	// configuration, and has different semantics regarding merging and persistence.
	//
	// The active configuration can be set using SetConfiguration. Then, future
	// calls to GetConfiguration will return that configuration instead of falling
	// back to the default.
	//
	// An optional revision argument can be provided to get a specific historical
	// version of the configuration instead of the current configuration.
	// This revision value can be obtained from the revision field of a previous
	// call to GetConfiguration, or from the revision field of one of the history
	// entries returned by GetConfigurationHistory.
	GetConfiguration(context.Context, *GetRequest) (*MetricsCapabilityConfig, error)
	// Updates the active configuration by merging the input with the current active configuration.
	// If there is no active configuration, the input will be merged with the default configuration.
	//
	// The merge is performed by replacing all *present* fields in the input with the
	// corresponding fields in the target. Slices and maps are overwritten and not combined.
	// Any *non-present* fields in the input are ignored, and the corresponding fields
	// in the target are left unchanged.
	//
	// Field presence is defined by the protobuf spec. The following kinds of fields
	// have presence semantics:
	// - Messages
	// - Repeated fields (scalars or messages)
	// - Maps
	// - Optional scalars
	// Non-optional scalars do *not* have presence semantics, and are always treated
	// as present for the purposes of merging. For this reason, it is not recommended
	// to use non-optional scalars in messages intended to be used with this API.
	//
	// Subsequent calls to this API will merge inputs with the previous active configuration,
	// not the default configuration.
	//
	// When updating an existing configuration, the revision number in the input configuration
	// must match the revision number of the existing configuration, otherwise a conflict
	// error will be returned. The timestamp field of the revision is ignored for this purpose.
	//
	// Some fields in the configuration may be marked as secrets. These fields are
	// write-only from this API, and the placeholder value "***" will be returned in
	// place of the actual value when getting the configuration.
	// When setting the configuration, the same placeholder value can be used to indicate
	// the existing value should be preserved.
	SetConfiguration(context.Context, *SetRequest) (*emptypb.Empty, error)
	// Resets the active configuration to the current default configuration.
	//
	// The request may optionally contain a field mask to specify which fields should
	// be preserved. Furthermore, if a mask is set, the request may also contain a patch
	// object used to apply additional changes to the masked fields. These changes are
	// applied atomically at the time of reset. Fields present in the patch object, but
	// not in the mask, are ignored.
	//
	// For example, with the following message:
	//
	//	message Example {
	//	 optional int32 a = 1;
	//	 optional int32 b = 2;
	//	 optional int32 c = 3;
	//	}
	//
	// and current state:
	//
	//	active:  { a: 1, b: 2, c: 3 }
	//	default: { a: 4, b: 5, c: 6 }
	//
	// and reset request parameters:
	//
	//	{
	//	  mask:  { paths: [ "a", "b" ] }
	//	  patch: { a: 100 }
	//	}
	//
	// The resulting active configuration will be:
	//
	//	active: {
	//	  a: 100, // masked, set to 100 via patch
	//	  b: 2,   // masked, but not set in patch, so left unchanged
	//	  c: 6,   // not masked, reset to default
	//	}
	ResetConfiguration(context.Context, *ResetRequest) (*emptypb.Empty, error)
	// Show what changes would be made to a configuration without saving them.
	// The request expects an action, target, and spec to be provided. These
	// correspond roughly to the other APIs in this service.
	//
	// Configuring DryRunRequest:
	//   - Use the Active target for the SetConfiguration API, and the Default target
	//     for the SetDefaultConfiguration API. Install and Uninstall actions do not
	//     require a target (if they are available in this service).
	//   - The Set action requires the spec field to be set.
	//   - The Reset action ignores the spec field, and will use the optional patch
	//     and mask fields if provided.
	//
	// Notes:
	//   - When DryRun is used on Install or Uninstall requests, the response will
	//     contain modifications to the 'enabled' field only. This field is read-only
	//     in the Set* APIs.
	//   - To validate the current configuration but keep it unchanged, use the
	//     Set action with an empty spec.
	//   - Configurations returned by DryRun will always have an empty revision field.
	DryRun(context.Context, *DryRunRequest) (*DryRunResponse, error)
	// Get a list of all past revisions of the configuration.
	//
	// Will return the history for either the active or default configuration
	// depending on the specified target.
	//
	// The entries are ordered from oldest to newest, where the last entry is
	// the current configuration.
	ConfigurationHistory(context.Context, *ConfigurationHistoryRequest) (*ConfigurationHistoryResponse, error)
}

// UnimplementedNodeConfigurationServer should be embedded to have forward compatible implementations.
type UnimplementedNodeConfigurationServer struct {
}

func (UnimplementedNodeConfigurationServer) GetDefaultConfiguration(context.Context, *GetRequest) (*MetricsCapabilityConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultConfiguration not implemented")
}
func (UnimplementedNodeConfigurationServer) SetDefaultConfiguration(context.Context, *SetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultConfiguration not implemented")
}
func (UnimplementedNodeConfigurationServer) ResetDefaultConfiguration(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetDefaultConfiguration not implemented")
}
func (UnimplementedNodeConfigurationServer) GetConfiguration(context.Context, *GetRequest) (*MetricsCapabilityConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfiguration not implemented")
}
func (UnimplementedNodeConfigurationServer) SetConfiguration(context.Context, *SetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfiguration not implemented")
}
func (UnimplementedNodeConfigurationServer) ResetConfiguration(context.Context, *ResetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetConfiguration not implemented")
}
func (UnimplementedNodeConfigurationServer) DryRun(context.Context, *DryRunRequest) (*DryRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DryRun not implemented")
}
func (UnimplementedNodeConfigurationServer) ConfigurationHistory(context.Context, *ConfigurationHistoryRequest) (*ConfigurationHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigurationHistory not implemented")
}

// UnsafeNodeConfigurationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeConfigurationServer will
// result in compilation errors.
type UnsafeNodeConfigurationServer interface {
	mustEmbedUnimplementedNodeConfigurationServer()
}

func RegisterNodeConfigurationServer(s grpc.ServiceRegistrar, srv NodeConfigurationServer) {
	s.RegisterService(&NodeConfiguration_ServiceDesc, srv)
}

func _NodeConfiguration_GetDefaultConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeConfigurationServer).GetDefaultConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeConfiguration_GetDefaultConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeConfigurationServer).GetDefaultConfiguration(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeConfiguration_SetDefaultConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeConfigurationServer).SetDefaultConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeConfiguration_SetDefaultConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeConfigurationServer).SetDefaultConfiguration(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeConfiguration_ResetDefaultConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeConfigurationServer).ResetDefaultConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeConfiguration_ResetDefaultConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeConfigurationServer).ResetDefaultConfiguration(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeConfiguration_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeConfigurationServer).GetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeConfiguration_GetConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeConfigurationServer).GetConfiguration(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeConfiguration_SetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeConfigurationServer).SetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeConfiguration_SetConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeConfigurationServer).SetConfiguration(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeConfiguration_ResetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeConfigurationServer).ResetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeConfiguration_ResetConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeConfigurationServer).ResetConfiguration(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeConfiguration_DryRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DryRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeConfigurationServer).DryRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeConfiguration_DryRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeConfigurationServer).DryRun(ctx, req.(*DryRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeConfiguration_ConfigurationHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeConfigurationServer).ConfigurationHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeConfiguration_ConfigurationHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeConfigurationServer).ConfigurationHistory(ctx, req.(*ConfigurationHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeConfiguration_ServiceDesc is the grpc.ServiceDesc for NodeConfiguration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeConfiguration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "node.metrics.config.NodeConfiguration",
	HandlerType: (*NodeConfigurationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDefaultConfiguration",
			Handler:    _NodeConfiguration_GetDefaultConfiguration_Handler,
		},
		{
			MethodName: "SetDefaultConfiguration",
			Handler:    _NodeConfiguration_SetDefaultConfiguration_Handler,
		},
		{
			MethodName: "ResetDefaultConfiguration",
			Handler:    _NodeConfiguration_ResetDefaultConfiguration_Handler,
		},
		{
			MethodName: "GetConfiguration",
			Handler:    _NodeConfiguration_GetConfiguration_Handler,
		},
		{
			MethodName: "SetConfiguration",
			Handler:    _NodeConfiguration_SetConfiguration_Handler,
		},
		{
			MethodName: "ResetConfiguration",
			Handler:    _NodeConfiguration_ResetConfiguration_Handler,
		},
		{
			MethodName: "DryRun",
			Handler:    _NodeConfiguration_DryRun_Handler,
		},
		{
			MethodName: "ConfigurationHistory",
			Handler:    _NodeConfiguration_ConfigurationHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/plugins/metrics/apis/node/config.proto",
}
