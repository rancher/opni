// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v1.0.0
// source: github.com/rancher/opni/plugins/metrics/pkg/apis/cortexadmin/status.proto

package cortexadmin

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClusterStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Distributor   *DistributorStatus   `protobuf:"bytes,1,opt,name=distributor,proto3" json:"distributor,omitempty"`
	Ingester      *IngesterStatus      `protobuf:"bytes,2,opt,name=ingester,proto3" json:"ingester,omitempty"`
	Ruler         *RulerStatus         `protobuf:"bytes,3,opt,name=ruler,proto3" json:"ruler,omitempty"`
	Purger        *PurgerStatus        `protobuf:"bytes,4,opt,name=purger,proto3" json:"purger,omitempty"`
	Compactor     *CompactorStatus     `protobuf:"bytes,5,opt,name=compactor,proto3" json:"compactor,omitempty"`
	StoreGateway  *StoreGatewayStatus  `protobuf:"bytes,6,opt,name=storeGateway,proto3" json:"storeGateway,omitempty"`
	QueryFrontend *QueryFrontendStatus `protobuf:"bytes,7,opt,name=queryFrontend,proto3" json:"queryFrontend,omitempty"`
	Querier       *QuerierStatus       `protobuf:"bytes,8,opt,name=querier,proto3" json:"querier,omitempty"`
}

func (x *ClusterStatus) Reset() {
	*x = ClusterStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStatus) ProtoMessage() {}

func (x *ClusterStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStatus.ProtoReflect.Descriptor instead.
func (*ClusterStatus) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescGZIP(), []int{0}
}

func (x *ClusterStatus) GetDistributor() *DistributorStatus {
	if x != nil {
		return x.Distributor
	}
	return nil
}

func (x *ClusterStatus) GetIngester() *IngesterStatus {
	if x != nil {
		return x.Ingester
	}
	return nil
}

func (x *ClusterStatus) GetRuler() *RulerStatus {
	if x != nil {
		return x.Ruler
	}
	return nil
}

func (x *ClusterStatus) GetPurger() *PurgerStatus {
	if x != nil {
		return x.Purger
	}
	return nil
}

func (x *ClusterStatus) GetCompactor() *CompactorStatus {
	if x != nil {
		return x.Compactor
	}
	return nil
}

func (x *ClusterStatus) GetStoreGateway() *StoreGatewayStatus {
	if x != nil {
		return x.StoreGateway
	}
	return nil
}

func (x *ClusterStatus) GetQueryFrontend() *QueryFrontendStatus {
	if x != nil {
		return x.QueryFrontend
	}
	return nil
}

func (x *ClusterStatus) GetQuerier() *QuerierStatus {
	if x != nil {
		return x.Querier
	}
	return nil
}

// Status of an individual cortex service (module)
type ServiceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ServiceStatus) Reset() {
	*x = ServiceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStatus) ProtoMessage() {}

func (x *ServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStatus.ProtoReflect.Descriptor instead.
func (*ServiceStatus) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescGZIP(), []int{1}
}

func (x *ServiceStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ServiceStatusList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services []*ServiceStatus `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"` // field name matches cortex
}

func (x *ServiceStatusList) Reset() {
	*x = ServiceStatusList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStatusList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStatusList) ProtoMessage() {}

func (x *ServiceStatusList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStatusList.ProtoReflect.Descriptor instead.
func (*ServiceStatusList) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescGZIP(), []int{2}
}

func (x *ServiceStatusList) GetServices() []*ServiceStatus {
	if x != nil {
		return x.Services
	}
	return nil
}

// Status of a single shard in a ring
type ShardStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State               string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Address             string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Timestamp           string `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	RegisteredTimestamp string `protobuf:"bytes,5,opt,name=registeredTimestamp,proto3" json:"registeredTimestamp,omitempty"`
	Zone                string `protobuf:"bytes,6,opt,name=zone,proto3" json:"zone,omitempty"`
}

func (x *ShardStatus) Reset() {
	*x = ShardStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardStatus) ProtoMessage() {}

func (x *ShardStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardStatus.ProtoReflect.Descriptor instead.
func (*ShardStatus) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescGZIP(), []int{3}
}

func (x *ShardStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ShardStatus) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ShardStatus) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ShardStatus) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *ShardStatus) GetRegisteredTimestamp() string {
	if x != nil {
		return x.RegisteredTimestamp
	}
	return ""
}

func (x *ShardStatus) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

type ShardStatusList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shards []*ShardStatus `protobuf:"bytes,1,rep,name=shards,proto3" json:"shards,omitempty"` // field name matches cortex
}

func (x *ShardStatusList) Reset() {
	*x = ShardStatusList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardStatusList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardStatusList) ProtoMessage() {}

func (x *ShardStatusList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardStatusList.ProtoReflect.Descriptor instead.
func (*ShardStatusList) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescGZIP(), []int{4}
}

func (x *ShardStatusList) GetShards() []*ShardStatus {
	if x != nil {
		return x.Shards
	}
	return nil
}

// Status of a single member of a memberlist
type MemberStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port    uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	State   int32  `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *MemberStatus) Reset() {
	*x = MemberStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberStatus) ProtoMessage() {}

func (x *MemberStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberStatus.ProtoReflect.Descriptor instead.
func (*MemberStatus) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescGZIP(), []int{5}
}

func (x *MemberStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MemberStatus) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *MemberStatus) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MemberStatus) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

type MemberStatusList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*MemberStatus `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *MemberStatusList) Reset() {
	*x = MemberStatusList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberStatusList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberStatusList) ProtoMessage() {}

func (x *MemberStatusList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberStatusList.ProtoReflect.Descriptor instead.
func (*MemberStatusList) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescGZIP(), []int{6}
}

func (x *MemberStatusList) GetItems() []*MemberStatus {
	if x != nil {
		return x.Items
	}
	return nil
}

type MemberlistStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the service is currently using a memberlist
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The status of each member in the memberlist
	Members *MemberStatusList `protobuf:"bytes,2,opt,name=members,proto3" json:"members,omitempty"`
	// A list of keys in the key-value store used by the memberlist
	Keys []string `protobuf:"bytes,3,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *MemberlistStatus) Reset() {
	*x = MemberlistStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberlistStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberlistStatus) ProtoMessage() {}

func (x *MemberlistStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberlistStatus.ProtoReflect.Descriptor instead.
func (*MemberlistStatus) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescGZIP(), []int{7}
}

func (x *MemberlistStatus) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *MemberlistStatus) GetMembers() *MemberStatusList {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *MemberlistStatus) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type RingStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool             `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Shards  *ShardStatusList `protobuf:"bytes,2,opt,name=shards,proto3" json:"shards,omitempty"`
}

func (x *RingStatus) Reset() {
	*x = RingStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RingStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RingStatus) ProtoMessage() {}

func (x *RingStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RingStatus.ProtoReflect.Descriptor instead.
func (*RingStatus) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescGZIP(), []int{8}
}

func (x *RingStatus) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *RingStatus) GetShards() *ShardStatusList {
	if x != nil {
		return x.Shards
	}
	return nil
}

type DistributorStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services     *ServiceStatusList `protobuf:"bytes,1,opt,name=services,proto3" json:"services,omitempty"`
	IngesterRing *RingStatus        `protobuf:"bytes,2,opt,name=ingesterRing,proto3" json:"ingesterRing,omitempty"`
}

func (x *DistributorStatus) Reset() {
	*x = DistributorStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributorStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributorStatus) ProtoMessage() {}

func (x *DistributorStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributorStatus.ProtoReflect.Descriptor instead.
func (*DistributorStatus) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescGZIP(), []int{9}
}

func (x *DistributorStatus) GetServices() *ServiceStatusList {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *DistributorStatus) GetIngesterRing() *RingStatus {
	if x != nil {
		return x.IngesterRing
	}
	return nil
}

type IngesterStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services   *ServiceStatusList `protobuf:"bytes,1,opt,name=services,proto3" json:"services,omitempty"`
	Memberlist *MemberlistStatus  `protobuf:"bytes,2,opt,name=memberlist,proto3" json:"memberlist,omitempty"`
	Ring       *RingStatus        `protobuf:"bytes,3,opt,name=ring,proto3" json:"ring,omitempty"`
}

func (x *IngesterStatus) Reset() {
	*x = IngesterStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngesterStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngesterStatus) ProtoMessage() {}

func (x *IngesterStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngesterStatus.ProtoReflect.Descriptor instead.
func (*IngesterStatus) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescGZIP(), []int{10}
}

func (x *IngesterStatus) GetServices() *ServiceStatusList {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *IngesterStatus) GetMemberlist() *MemberlistStatus {
	if x != nil {
		return x.Memberlist
	}
	return nil
}

func (x *IngesterStatus) GetRing() *RingStatus {
	if x != nil {
		return x.Ring
	}
	return nil
}

type RulerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services   *ServiceStatusList `protobuf:"bytes,1,opt,name=services,proto3" json:"services,omitempty"`
	Memberlist *MemberlistStatus  `protobuf:"bytes,2,opt,name=memberlist,proto3" json:"memberlist,omitempty"`
	Ring       *RingStatus        `protobuf:"bytes,3,opt,name=ring,proto3" json:"ring,omitempty"`
}

func (x *RulerStatus) Reset() {
	*x = RulerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RulerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RulerStatus) ProtoMessage() {}

func (x *RulerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RulerStatus.ProtoReflect.Descriptor instead.
func (*RulerStatus) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescGZIP(), []int{11}
}

func (x *RulerStatus) GetServices() *ServiceStatusList {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *RulerStatus) GetMemberlist() *MemberlistStatus {
	if x != nil {
		return x.Memberlist
	}
	return nil
}

func (x *RulerStatus) GetRing() *RingStatus {
	if x != nil {
		return x.Ring
	}
	return nil
}

type PurgerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services *ServiceStatusList `protobuf:"bytes,1,opt,name=services,proto3" json:"services,omitempty"`
}

func (x *PurgerStatus) Reset() {
	*x = PurgerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgerStatus) ProtoMessage() {}

func (x *PurgerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgerStatus.ProtoReflect.Descriptor instead.
func (*PurgerStatus) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescGZIP(), []int{12}
}

func (x *PurgerStatus) GetServices() *ServiceStatusList {
	if x != nil {
		return x.Services
	}
	return nil
}

type CompactorStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services   *ServiceStatusList `protobuf:"bytes,1,opt,name=services,proto3" json:"services,omitempty"`
	Memberlist *MemberlistStatus  `protobuf:"bytes,2,opt,name=memberlist,proto3" json:"memberlist,omitempty"`
	Ring       *RingStatus        `protobuf:"bytes,3,opt,name=ring,proto3" json:"ring,omitempty"`
}

func (x *CompactorStatus) Reset() {
	*x = CompactorStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactorStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactorStatus) ProtoMessage() {}

func (x *CompactorStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactorStatus.ProtoReflect.Descriptor instead.
func (*CompactorStatus) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescGZIP(), []int{13}
}

func (x *CompactorStatus) GetServices() *ServiceStatusList {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *CompactorStatus) GetMemberlist() *MemberlistStatus {
	if x != nil {
		return x.Memberlist
	}
	return nil
}

func (x *CompactorStatus) GetRing() *RingStatus {
	if x != nil {
		return x.Ring
	}
	return nil
}

type StoreGatewayStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services   *ServiceStatusList `protobuf:"bytes,1,opt,name=services,proto3" json:"services,omitempty"`
	Memberlist *MemberlistStatus  `protobuf:"bytes,2,opt,name=memberlist,proto3" json:"memberlist,omitempty"`
	Ring       *RingStatus        `protobuf:"bytes,3,opt,name=ring,proto3" json:"ring,omitempty"`
}

func (x *StoreGatewayStatus) Reset() {
	*x = StoreGatewayStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreGatewayStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreGatewayStatus) ProtoMessage() {}

func (x *StoreGatewayStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreGatewayStatus.ProtoReflect.Descriptor instead.
func (*StoreGatewayStatus) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescGZIP(), []int{14}
}

func (x *StoreGatewayStatus) GetServices() *ServiceStatusList {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *StoreGatewayStatus) GetMemberlist() *MemberlistStatus {
	if x != nil {
		return x.Memberlist
	}
	return nil
}

func (x *StoreGatewayStatus) GetRing() *RingStatus {
	if x != nil {
		return x.Ring
	}
	return nil
}

type QueryFrontendStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services *ServiceStatusList `protobuf:"bytes,1,opt,name=services,proto3" json:"services,omitempty"`
}

func (x *QueryFrontendStatus) Reset() {
	*x = QueryFrontendStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFrontendStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFrontendStatus) ProtoMessage() {}

func (x *QueryFrontendStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFrontendStatus.ProtoReflect.Descriptor instead.
func (*QueryFrontendStatus) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescGZIP(), []int{15}
}

func (x *QueryFrontendStatus) GetServices() *ServiceStatusList {
	if x != nil {
		return x.Services
	}
	return nil
}

type QuerierStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services   *ServiceStatusList `protobuf:"bytes,1,opt,name=services,proto3" json:"services,omitempty"`
	Memberlist *MemberlistStatus  `protobuf:"bytes,2,opt,name=memberlist,proto3" json:"memberlist,omitempty"`
}

func (x *QuerierStatus) Reset() {
	*x = QuerierStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerierStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerierStatus) ProtoMessage() {}

func (x *QuerierStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerierStatus.ProtoReflect.Descriptor instead.
func (*QuerierStatus) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescGZIP(), []int{16}
}

func (x *QuerierStatus) GetServices() *ServiceStatusList {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *QuerierStatus) GetMemberlist() *MemberlistStatus {
	if x != nil {
		return x.Memberlist
	}
	return nil
}

var File_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto protoreflect.FileDescriptor

var file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDesc = []byte{
	0x0a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x63, 0x6f, 0x72,
	0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0xec, 0x03, 0x0a, 0x0d, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x08,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05,
	0x72, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x75, 0x72, 0x67, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x70, 0x75, 0x72, 0x67, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f,
	0x72, 0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x72,
	0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x46, 0x0a, 0x0d, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x12, 0x34, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x22, 0x3b, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x4b, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x72, 0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x22, 0xb1, 0x01, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x30, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x43, 0x0a, 0x0f, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65,
	0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x22, 0x66, 0x0a, 0x0c, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x43, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x79, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x22, 0x5c, 0x0a, 0x0a, 0x52, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72,
	0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73,
	0x22, 0x8c, 0x01, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65,
	0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x52, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65,
	0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0c, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x52, 0x69, 0x6e, 0x67, 0x22,
	0xb8, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3d,
	0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x04, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x72, 0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xb5, 0x01, 0x0a, 0x0b, 0x52,
	0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x72, 0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x72,
	0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x6c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x72, 0x69,
	0x6e, 0x67, 0x22, 0x4a, 0x0a, 0x0c, 0x50, 0x75, 0x72, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xb9,
	0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3d,
	0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x04, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x72, 0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xbc, 0x01, 0x0a, 0x12, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72,
	0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x04, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x51, 0x0a, 0x13, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x8a, 0x01, 0x0a,
	0x0d, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f,
	0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f,
	0x72, 0x74, 0x65, 0x78, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescOnce sync.Once
	file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescData = file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDesc
)

func file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescGZIP() []byte {
	file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescOnce.Do(func() {
		file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescData)
	})
	return file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDescData
}

var file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_goTypes = []interface{}{
	(*ClusterStatus)(nil),       // 0: cortexadmin.ClusterStatus
	(*ServiceStatus)(nil),       // 1: cortexadmin.ServiceStatus
	(*ServiceStatusList)(nil),   // 2: cortexadmin.ServiceStatusList
	(*ShardStatus)(nil),         // 3: cortexadmin.ShardStatus
	(*ShardStatusList)(nil),     // 4: cortexadmin.ShardStatusList
	(*MemberStatus)(nil),        // 5: cortexadmin.MemberStatus
	(*MemberStatusList)(nil),    // 6: cortexadmin.MemberStatusList
	(*MemberlistStatus)(nil),    // 7: cortexadmin.MemberlistStatus
	(*RingStatus)(nil),          // 8: cortexadmin.RingStatus
	(*DistributorStatus)(nil),   // 9: cortexadmin.DistributorStatus
	(*IngesterStatus)(nil),      // 10: cortexadmin.IngesterStatus
	(*RulerStatus)(nil),         // 11: cortexadmin.RulerStatus
	(*PurgerStatus)(nil),        // 12: cortexadmin.PurgerStatus
	(*CompactorStatus)(nil),     // 13: cortexadmin.CompactorStatus
	(*StoreGatewayStatus)(nil),  // 14: cortexadmin.StoreGatewayStatus
	(*QueryFrontendStatus)(nil), // 15: cortexadmin.QueryFrontendStatus
	(*QuerierStatus)(nil),       // 16: cortexadmin.QuerierStatus
}
var file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_depIdxs = []int32{
	9,  // 0: cortexadmin.ClusterStatus.distributor:type_name -> cortexadmin.DistributorStatus
	10, // 1: cortexadmin.ClusterStatus.ingester:type_name -> cortexadmin.IngesterStatus
	11, // 2: cortexadmin.ClusterStatus.ruler:type_name -> cortexadmin.RulerStatus
	12, // 3: cortexadmin.ClusterStatus.purger:type_name -> cortexadmin.PurgerStatus
	13, // 4: cortexadmin.ClusterStatus.compactor:type_name -> cortexadmin.CompactorStatus
	14, // 5: cortexadmin.ClusterStatus.storeGateway:type_name -> cortexadmin.StoreGatewayStatus
	15, // 6: cortexadmin.ClusterStatus.queryFrontend:type_name -> cortexadmin.QueryFrontendStatus
	16, // 7: cortexadmin.ClusterStatus.querier:type_name -> cortexadmin.QuerierStatus
	1,  // 8: cortexadmin.ServiceStatusList.services:type_name -> cortexadmin.ServiceStatus
	3,  // 9: cortexadmin.ShardStatusList.shards:type_name -> cortexadmin.ShardStatus
	5,  // 10: cortexadmin.MemberStatusList.items:type_name -> cortexadmin.MemberStatus
	6,  // 11: cortexadmin.MemberlistStatus.members:type_name -> cortexadmin.MemberStatusList
	4,  // 12: cortexadmin.RingStatus.shards:type_name -> cortexadmin.ShardStatusList
	2,  // 13: cortexadmin.DistributorStatus.services:type_name -> cortexadmin.ServiceStatusList
	8,  // 14: cortexadmin.DistributorStatus.ingesterRing:type_name -> cortexadmin.RingStatus
	2,  // 15: cortexadmin.IngesterStatus.services:type_name -> cortexadmin.ServiceStatusList
	7,  // 16: cortexadmin.IngesterStatus.memberlist:type_name -> cortexadmin.MemberlistStatus
	8,  // 17: cortexadmin.IngesterStatus.ring:type_name -> cortexadmin.RingStatus
	2,  // 18: cortexadmin.RulerStatus.services:type_name -> cortexadmin.ServiceStatusList
	7,  // 19: cortexadmin.RulerStatus.memberlist:type_name -> cortexadmin.MemberlistStatus
	8,  // 20: cortexadmin.RulerStatus.ring:type_name -> cortexadmin.RingStatus
	2,  // 21: cortexadmin.PurgerStatus.services:type_name -> cortexadmin.ServiceStatusList
	2,  // 22: cortexadmin.CompactorStatus.services:type_name -> cortexadmin.ServiceStatusList
	7,  // 23: cortexadmin.CompactorStatus.memberlist:type_name -> cortexadmin.MemberlistStatus
	8,  // 24: cortexadmin.CompactorStatus.ring:type_name -> cortexadmin.RingStatus
	2,  // 25: cortexadmin.StoreGatewayStatus.services:type_name -> cortexadmin.ServiceStatusList
	7,  // 26: cortexadmin.StoreGatewayStatus.memberlist:type_name -> cortexadmin.MemberlistStatus
	8,  // 27: cortexadmin.StoreGatewayStatus.ring:type_name -> cortexadmin.RingStatus
	2,  // 28: cortexadmin.QueryFrontendStatus.services:type_name -> cortexadmin.ServiceStatusList
	2,  // 29: cortexadmin.QuerierStatus.services:type_name -> cortexadmin.ServiceStatusList
	7,  // 30: cortexadmin.QuerierStatus.memberlist:type_name -> cortexadmin.MemberlistStatus
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_init() }
func file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_init() {
	if File_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStatusList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardStatusList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberStatusList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberlistStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RingStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistributorStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngesterStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RulerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactorStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreGatewayStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFrontendStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerierStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_goTypes,
		DependencyIndexes: file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_depIdxs,
		MessageInfos:      file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_msgTypes,
	}.Build()
	File_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto = out.File
	file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_rawDesc = nil
	file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_goTypes = nil
	file_github_com_rancher_opni_plugins_metrics_pkg_apis_cortexadmin_status_proto_depIdxs = nil
}
