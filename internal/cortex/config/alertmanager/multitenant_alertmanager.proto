// Code generated by internal/codegen. DO NOT EDIT.
syntax = "proto3";
package alertmanager;
import "github.com/rancher/opni/internal/cli/cli.proto";
import "google/protobuf/duration.proto";
option go_package = "github.com/rancher/opni/internal/cortex/config/alertmanager";
option (cli.generator) = { generate: true };
message ClientConfig {
  google.protobuf.Duration remote_timeout = 1;
  bool tls_enabled = 2;
  TlsClientConfig TLS = 3;
  string grpc_compression = 4;
}
message ClusterConfig {
  // Time to wait between peers to send notifications.
  google.protobuf.Duration peer_timeout = 1 [(cli.flag) = { default: "15s" }];
  // The interval between sending gossip messages. By lowering this value (more frequent) gossip messages are propagated across cluster more quickly at the expense of increased bandwidth usage.
  google.protobuf.Duration gossip_interval = 2 [(cli.flag) = { default: "200ms" }];
  // The interval between gossip state syncs. Setting this interval lower (more frequent) will increase convergence speeds across larger clusters at the expense of increased bandwidth usage.
  google.protobuf.Duration push_pull_interval = 3 [(cli.flag) = { default: "1m0s" }];
}
message MultitenantAlertmanagerConfig {
  // How long to keep data for.
  google.protobuf.Duration retention = 1 [(cli.flag) = { default: "120h0m0s" }];
  // The URL under which Alertmanager is externally reachable (for example, if Alertmanager is served via a reverse proxy). Used for generating relative and absolute links back to Alertmanager itself. If the URL has a path portion, it will be used to prefix all HTTP endpoints served by Alertmanager. If omitted, relevant URL components will be derived automatically.
  string external_url = 2;
  // How frequently to poll Cortex configs
  google.protobuf.Duration poll_interval = 3 [(cli.flag) = { default: "15s" }];
  // Maximum size (bytes) of an accepted HTTP request body.
  int64 max_recv_msg_size = 4 [(cli.flag) = { default: "16777216" }];
  // Root of URL to generate if config is http://internal.monitor
  string auto_webhook_root = 5;
  // Listen address and port for the cluster. Not specifying this flag disables high-availability mode.
  ClusterConfig cluster = 6 [(cli.flag) = { default: "0.0.0.0:9094" }];
  // Timeout for downstream alertmanagers.
  ClientConfig alertmanager_client = 7 [(cli.flag) = { default: "2s" }];
  // The interval between persisting the current alertmanager state (notification log and silences) to object storage. This is only used when sharding is enabled. This state is read when all replicas for a shard can not be contacted. In this scenario, having persisted the state more frequently will result in potentially fewer lost silences, and fewer duplicate notifications.
  PersisterConfig Persister = 8 [(cli.flag) = { default: "15m0s" }];
  // Comma separated list of tenants whose alerts this alertmanager can process. If specified, only these tenants will be handled by alertmanager, otherwise this alertmanager can process alerts from all tenants.
  repeated string enabled_tenants = 9;
  // Comma separated list of tenants whose alerts this alertmanager cannot process. If specified, a alertmanager that would normally pick the specified tenant(s) for processing will ignore them instead.
  repeated string disabled_tenants = 10;
}
message PersisterConfig {
  google.protobuf.Duration persist_interval = 1;
}
message TlsClientConfig {
  string tls_cert_path = 1;
  string tls_key_path = 2;
  string tls_ca_path = 3;
  string tls_server_name = 4;
  bool tls_insecure_skip_verify = 5;
}
