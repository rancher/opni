// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v1.0.0
// source: github.com/rancher/opni/plugins/metrics/apis/cortexops/cortexops.proto

package cortexops

import (
	_ "github.com/rancher/opni/internal/codegen/cli"
	compactor "github.com/rancher/opni/internal/cortex/config/compactor"
	querier "github.com/rancher/opni/internal/cortex/config/querier"
	runtimeconfig "github.com/rancher/opni/internal/cortex/config/runtimeconfig"
	storage "github.com/rancher/opni/internal/cortex/config/storage"
	validation "github.com/rancher/opni/internal/cortex/config/validation"
	v1 "github.com/rancher/opni/pkg/apis/core/v1"
	_ "github.com/rancher/opni/pkg/apis/storage/v1"
	driverutil "github.com/rancher/opni/pkg/plugins/driverutil"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InstallState int32

const (
	InstallState_Unknown      InstallState = 0
	InstallState_NotInstalled InstallState = 1
	InstallState_Updating     InstallState = 2
	InstallState_Installed    InstallState = 3
	InstallState_Uninstalling InstallState = 4
)

// Enum value maps for InstallState.
var (
	InstallState_name = map[int32]string{
		0: "Unknown",
		1: "NotInstalled",
		2: "Updating",
		3: "Installed",
		4: "Uninstalling",
	}
	InstallState_value = map[string]int32{
		"Unknown":      0,
		"NotInstalled": 1,
		"Updating":     2,
		"Installed":    3,
		"Uninstalling": 4,
	}
)

func (x InstallState) Enum() *InstallState {
	p := new(InstallState)
	*p = x
	return p
}

func (x InstallState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstallState) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_enumTypes[0].Descriptor()
}

func (InstallState) Type() protoreflect.EnumType {
	return &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_enumTypes[0]
}

func (x InstallState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstallState.Descriptor instead.
func (InstallState) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{0}
}

type ValidationError_Severity int32

const (
	ValidationError_Unknown ValidationError_Severity = 0
	ValidationError_Warning ValidationError_Severity = 1
	ValidationError_Error   ValidationError_Severity = 2
)

// Enum value maps for ValidationError_Severity.
var (
	ValidationError_Severity_name = map[int32]string{
		0: "Unknown",
		1: "Warning",
		2: "Error",
	}
	ValidationError_Severity_value = map[string]int32{
		"Unknown": 0,
		"Warning": 1,
		"Error":   2,
	}
)

func (x ValidationError_Severity) Enum() *ValidationError_Severity {
	p := new(ValidationError_Severity)
	*p = x
	return p
}

func (x ValidationError_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidationError_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_enumTypes[1].Descriptor()
}

func (ValidationError_Severity) Type() protoreflect.EnumType {
	return &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_enumTypes[1]
}

func (x ValidationError_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidationError_Severity.Descriptor instead.
func (ValidationError_Severity) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{10, 0}
}

type InstallStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    InstallState      `protobuf:"varint,1,opt,name=state,proto3,enum=cortexops.InstallState" json:"state,omitempty"`
	Version  string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InstallStatus) Reset() {
	*x = InstallStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallStatus) ProtoMessage() {}

func (x *InstallStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallStatus.ProtoReflect.Descriptor instead.
func (*InstallStatus) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{0}
}

func (x *InstallStatus) GetState() InstallState {
	if x != nil {
		return x.State
	}
	return InstallState_Unknown
}

func (x *InstallStatus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InstallStatus) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CapabilityBackendConfigSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled         *bool                    `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Revision        *v1.Revision             `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	CortexWorkloads *CortexWorkloadsConfig   `protobuf:"bytes,4,opt,name=cortexWorkloads,proto3" json:"cortexWorkloads,omitempty"`
	CortexConfig    *CortexApplicationConfig `protobuf:"bytes,5,opt,name=cortexConfig,proto3" json:"cortexConfig,omitempty"`
	Grafana         *GrafanaConfig           `protobuf:"bytes,9,opt,name=grafana,proto3" json:"grafana,omitempty"`
}

func (x *CapabilityBackendConfigSpec) Reset() {
	*x = CapabilityBackendConfigSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilityBackendConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityBackendConfigSpec) ProtoMessage() {}

func (x *CapabilityBackendConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityBackendConfigSpec.ProtoReflect.Descriptor instead.
func (*CapabilityBackendConfigSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{1}
}

func (x *CapabilityBackendConfigSpec) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *CapabilityBackendConfigSpec) GetRevision() *v1.Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *CapabilityBackendConfigSpec) GetCortexWorkloads() *CortexWorkloadsConfig {
	if x != nil {
		return x.CortexWorkloads
	}
	return nil
}

func (x *CapabilityBackendConfigSpec) GetCortexConfig() *CortexApplicationConfig {
	if x != nil {
		return x.CortexConfig
	}
	return nil
}

func (x *CapabilityBackendConfigSpec) GetGrafana() *GrafanaConfig {
	if x != nil {
		return x.Grafana
	}
	return nil
}

type CortexWorkloadsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targets map[string]*CortexWorkloadSpec `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CortexWorkloadsConfig) Reset() {
	*x = CortexWorkloadsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CortexWorkloadsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CortexWorkloadsConfig) ProtoMessage() {}

func (x *CortexWorkloadsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CortexWorkloadsConfig.ProtoReflect.Descriptor instead.
func (*CortexWorkloadsConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{2}
}

func (x *CortexWorkloadsConfig) GetTargets() map[string]*CortexWorkloadSpec {
	if x != nil {
		return x.Targets
	}
	return nil
}

type CortexWorkloadSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replicas  *int32   `protobuf:"varint,1,opt,name=replicas,proto3,oneof" json:"replicas,omitempty"`
	ExtraArgs []string `protobuf:"bytes,2,rep,name=extraArgs,proto3" json:"extraArgs,omitempty"`
}

func (x *CortexWorkloadSpec) Reset() {
	*x = CortexWorkloadSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CortexWorkloadSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CortexWorkloadSpec) ProtoMessage() {}

func (x *CortexWorkloadSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CortexWorkloadSpec.ProtoReflect.Descriptor instead.
func (*CortexWorkloadSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{3}
}

func (x *CortexWorkloadSpec) GetReplicas() int32 {
	if x != nil && x.Replicas != nil {
		return *x.Replicas
	}
	return 0
}

func (x *CortexWorkloadSpec) GetExtraArgs() []string {
	if x != nil {
		return x.ExtraArgs
	}
	return nil
}

type CortexApplicationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limits        *validation.Limits                 `protobuf:"bytes,1,opt,name=limits,proto3" json:"limits,omitempty"`
	RuntimeConfig *runtimeconfig.RuntimeConfigValues `protobuf:"bytes,2,opt,name=runtime_config,json=runtimeConfig,proto3" json:"runtime_config,omitempty"`
	Compactor     *compactor.Config                  `protobuf:"bytes,3,opt,name=compactor,proto3" json:"compactor,omitempty"`
	Querier       *querier.Config                    `protobuf:"bytes,4,opt,name=querier,proto3" json:"querier,omitempty"`
	Storage       *storage.Config                    `protobuf:"bytes,5,opt,name=storage,proto3" json:"storage,omitempty"`
	LogLevel      *string                            `protobuf:"bytes,6,opt,name=log_level,json=logLevel,proto3,oneof" json:"log_level,omitempty"`
}

func (x *CortexApplicationConfig) Reset() {
	*x = CortexApplicationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CortexApplicationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CortexApplicationConfig) ProtoMessage() {}

func (x *CortexApplicationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CortexApplicationConfig.ProtoReflect.Descriptor instead.
func (*CortexApplicationConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{4}
}

func (x *CortexApplicationConfig) GetLimits() *validation.Limits {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *CortexApplicationConfig) GetRuntimeConfig() *runtimeconfig.RuntimeConfigValues {
	if x != nil {
		return x.RuntimeConfig
	}
	return nil
}

func (x *CortexApplicationConfig) GetCompactor() *compactor.Config {
	if x != nil {
		return x.Compactor
	}
	return nil
}

func (x *CortexApplicationConfig) GetQuerier() *querier.Config {
	if x != nil {
		return x.Querier
	}
	return nil
}

func (x *CortexApplicationConfig) GetStorage() *storage.Config {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *CortexApplicationConfig) GetLogLevel() string {
	if x != nil && x.LogLevel != nil {
		return *x.LogLevel
	}
	return ""
}

type GrafanaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to deploy a managed Grafana instance.
	Enabled *bool `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	// The version of Grafana to deploy.
	Version  *string `protobuf:"bytes,2,opt,name=version,proto3,oneof" json:"version,omitempty"`
	Hostname *string `protobuf:"bytes,3,opt,name=hostname,proto3,oneof" json:"hostname,omitempty"`
}

func (x *GrafanaConfig) Reset() {
	*x = GrafanaConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrafanaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrafanaConfig) ProtoMessage() {}

func (x *GrafanaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrafanaConfig.ProtoReflect.Descriptor instead.
func (*GrafanaConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{5}
}

func (x *GrafanaConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *GrafanaConfig) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *GrafanaConfig) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

type PresetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Preset `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *PresetList) Reset() {
	*x = PresetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresetList) ProtoMessage() {}

func (x *PresetList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresetList.ProtoReflect.Descriptor instead.
func (*PresetList) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{6}
}

func (x *PresetList) GetItems() []*Preset {
	if x != nil {
		return x.Items
	}
	return nil
}

type Preset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *v1.Reference                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata *PresetMetadata              `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *CapabilityBackendConfigSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *Preset) Reset() {
	*x = Preset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Preset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Preset) ProtoMessage() {}

func (x *Preset) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Preset.ProtoReflect.Descriptor instead.
func (*Preset) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{7}
}

func (x *Preset) GetId() *v1.Reference {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Preset) GetMetadata() *PresetMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Preset) GetSpec() *CapabilityBackendConfigSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type PresetMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A display name for the preset.
	DisplayName string `protobuf:"bytes,1,opt,name=displayName,proto3" json:"displayName,omitempty"`
	// Longer description of the preset.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Optional list of messages that should be displayed to the user when the
	// preset is used (determined at the client's discretion).
	// For example, this may contain additional information about requirements
	// or next steps that the user should be aware of.
	Notes []string `protobuf:"bytes,3,rep,name=notes,proto3" json:"notes,omitempty"`
}

func (x *PresetMetadata) Reset() {
	*x = PresetMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresetMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresetMetadata) ProtoMessage() {}

func (x *PresetMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresetMetadata.ProtoReflect.Descriptor instead.
func (*PresetMetadata) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{8}
}

func (x *PresetMetadata) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *PresetMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PresetMetadata) GetNotes() []string {
	if x != nil {
		return x.Notes
	}
	return nil
}

type DryRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target driverutil.Target            `protobuf:"varint,1,opt,name=target,proto3,enum=driverutil.Target" json:"target,omitempty"`
	Action driverutil.Action            `protobuf:"varint,2,opt,name=action,proto3,enum=driverutil.Action" json:"action,omitempty"`
	Spec   *CapabilityBackendConfigSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *DryRunRequest) Reset() {
	*x = DryRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DryRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DryRunRequest) ProtoMessage() {}

func (x *DryRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DryRunRequest.ProtoReflect.Descriptor instead.
func (*DryRunRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{9}
}

func (x *DryRunRequest) GetTarget() driverutil.Target {
	if x != nil {
		return x.Target
	}
	return driverutil.Target(0)
}

func (x *DryRunRequest) GetAction() driverutil.Action {
	if x != nil {
		return x.Action
	}
	return driverutil.Action(0)
}

func (x *DryRunRequest) GetSpec() *CapabilityBackendConfigSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type ValidationError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severity ValidationError_Severity `protobuf:"varint,1,opt,name=severity,proto3,enum=cortexops.ValidationError_Severity" json:"severity,omitempty"`
	Message  string                   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ValidationError) Reset() {
	*x = ValidationError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationError) ProtoMessage() {}

func (x *ValidationError) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationError.ProtoReflect.Descriptor instead.
func (*ValidationError) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{10}
}

func (x *ValidationError) GetSeverity() ValidationError_Severity {
	if x != nil {
		return x.Severity
	}
	return ValidationError_Unknown
}

func (x *ValidationError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DryRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current          *CapabilityBackendConfigSpec `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Modified         *CapabilityBackendConfigSpec `protobuf:"bytes,2,opt,name=modified,proto3" json:"modified,omitempty"`
	ValidationErrors []*ValidationError           `protobuf:"bytes,3,rep,name=validationErrors,proto3" json:"validationErrors,omitempty"`
}

func (x *DryRunResponse) Reset() {
	*x = DryRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DryRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DryRunResponse) ProtoMessage() {}

func (x *DryRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DryRunResponse.ProtoReflect.Descriptor instead.
func (*DryRunResponse) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{11}
}

func (x *DryRunResponse) GetCurrent() *CapabilityBackendConfigSpec {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *DryRunResponse) GetModified() *CapabilityBackendConfigSpec {
	if x != nil {
		return x.Modified
	}
	return nil
}

func (x *DryRunResponse) GetValidationErrors() []*ValidationError {
	if x != nil {
		return x.ValidationErrors
	}
	return nil
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set, will return the config at the specified revision instead of
	// the current config.
	// This revision value can be obtained from the revision field of a
	// CapabilityBackendConfigSpec, either from GetConfiguration/GetDefaultConfiguration
	// or from one of the history entries returned by ConfigurationHistory.
	Revision *v1.Revision `protobuf:"bytes,1,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{12}
}

func (x *GetRequest) GetRevision() *v1.Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

type ConfigurationHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The configuration type to return history for.
	Target driverutil.Target `protobuf:"varint,1,opt,name=target,proto3,enum=driverutil.Target" json:"target,omitempty"`
	// If set, will include the values of the configuration in the response.
	// Otherwise, only the revision field of each entry will be populated.
	IncludeValues bool `protobuf:"varint,2,opt,name=includeValues,proto3" json:"includeValues,omitempty"`
}

func (x *ConfigurationHistoryRequest) Reset() {
	*x = ConfigurationHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationHistoryRequest) ProtoMessage() {}

func (x *ConfigurationHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationHistoryRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationHistoryRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{13}
}

func (x *ConfigurationHistoryRequest) GetTarget() driverutil.Target {
	if x != nil {
		return x.Target
	}
	return driverutil.Target(0)
}

func (x *ConfigurationHistoryRequest) GetIncludeValues() bool {
	if x != nil {
		return x.IncludeValues
	}
	return false
}

type ConfigurationHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*CapabilityBackendConfigSpec `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *ConfigurationHistoryResponse) Reset() {
	*x = ConfigurationHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationHistoryResponse) ProtoMessage() {}

func (x *ConfigurationHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationHistoryResponse.ProtoReflect.Descriptor instead.
func (*ConfigurationHistoryResponse) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP(), []int{14}
}

func (x *ConfigurationHistoryResponse) GetEntries() []*CapabilityBackendConfigSpec {
	if x != nil {
		return x.Entries
	}
	return nil
}

var File_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto protoreflect.FileDescriptor

var file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDesc = []byte{
	0x0a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63,
	0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f,
	0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78,
	0x6f, 0x70, 0x73, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6c,
	0x69, 0x2f, 0x63, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x48, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f,
	0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f,
	0x72, 0x74, 0x65, 0x78, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x2f, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x50, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f,
	0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f,
	0x72, 0x74, 0x65, 0x78, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x46, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f,
	0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x64, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x01,
	0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x72,
	0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x02, 0x0a, 0x1b, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x25, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0x8a, 0xc0, 0x0c, 0x02,
	0x28, 0x01, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x06, 0x8a, 0xc0, 0x0c, 0x02, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x74, 0x65, 0x78,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0f, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x12, 0x46, 0x0a, 0x0c, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f,
	0x70, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x63, 0x6f, 0x72, 0x74,
	0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x66,
	0x61, 0x6e, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x74,
	0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x07, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x72,
	0x74, 0x65, 0x78, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x4f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e,
	0x43, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x06, 0x8a, 0xc0, 0x0c, 0x02, 0x28, 0x01, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x1a, 0x59, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73,
	0x2e, 0x43, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x60,
	0x0a, 0x12, 0x43, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41,
	0x72, 0x67, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x22, 0x9a, 0x03, 0x0a, 0x17, 0x43, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x70, 0x0a, 0x06,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x42, 0x44, 0x92, 0xc0, 0x0c, 0x40, 0x0a, 0x3e, 0x0a, 0x25, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12,
	0x15, 0x09, 0x00, 0x00, 0x00, 0x00, 0x80, 0x4f, 0x22, 0x41, 0x18, 0xc0, 0x84, 0x3d, 0x82, 0x03,
	0x05, 0x08, 0x80, 0x9a, 0x9e, 0x01, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x49,
	0x0a, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0d, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x2d, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0x8a, 0xc0, 0x0c, 0x07, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xae, 0x01,
	0x0a, 0x0d, 0x47, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2a, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x0b, 0x8a, 0xc0, 0x0c, 0x07, 0x0a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x8a, 0xc0,
	0x0c, 0x08, 0x0a, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x35,
	0x0a, 0x0a, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f,
	0x70, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x22, 0x6a, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x22, 0xa3, 0x01, 0x0a, 0x0d, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2a,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65,
	0x78, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x9d, 0x01, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2f, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x22, 0xde, 0x01, 0x0a, 0x0e, 0x44, 0x72, 0x79, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x72,
	0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x46, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x74,
	0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x40, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x92, 0xc0, 0x0c, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7b, 0x0a, 0x1b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x8a, 0xc0, 0x0c,
	0x06, 0x0a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78,
	0x6f, 0x70, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2a, 0x5c, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x32, 0xce, 0x0b, 0x0a, 0x09, 0x43, 0x6f, 0x72, 0x74, 0x65,
	0x78, 0x4f, 0x70, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78,
	0x6f, 0x70, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x22,
	0x3c, 0x82, 0xc0, 0x0c, 0x1a, 0x8a, 0xc0, 0x0c, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20,
	0x67, 0x65, 0x74, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0xa8, 0xc0, 0x0c, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x9a, 0x01,
	0x0a, 0x17, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x72, 0x74,
	0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65,
	0x63, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3f, 0x82, 0xc0, 0x0c, 0x1a, 0x8a,
	0xc0, 0x0c, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x73, 0x65, 0x74, 0x2d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0xb0, 0xc0, 0x0c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a,
	0x01, 0x2a, 0x1a, 0x16, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x19, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3a, 0x82, 0xc0, 0x0c, 0x18, 0x8a, 0xc0,
	0x0c, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x7f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65,
	0x78, 0x6f, 0x70, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x22, 0x2c, 0x82, 0xc0, 0x0c, 0x12, 0x8a, 0xc0, 0x0c,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x67, 0x65, 0x74, 0xa8, 0xc0, 0x0c, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x87, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x72,
	0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70,
	0x65, 0x63, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x33, 0x82, 0xc0, 0x0c, 0x16,
	0x8a, 0xc0, 0x0c, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x73, 0x65, 0x74, 0xa8, 0xc0,
	0x0c, 0x01, 0xb0, 0xc0, 0x0c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x1a,
	0x0e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x70, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2a, 0x82, 0xc0, 0x0c, 0x10, 0x8a, 0xc0, 0x0c, 0x0c, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x10, 0x2a, 0x0e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x59, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1d, 0x82,
	0xc0, 0x0c, 0x0a, 0x8a, 0xc0, 0x0c, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x09, 0x12, 0x07, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x07,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1f, 0x82, 0xc0, 0x0c, 0x0b, 0x8a, 0xc0, 0x0c,
	0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x22, 0x08,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x60, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x23, 0x82, 0xc0, 0x0c, 0x0d, 0x8a, 0xc0, 0x0c, 0x09, 0x75,
	0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x22, 0x0a,
	0x2f, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x62, 0x0a, 0x0b, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x24, 0x82, 0xc0, 0x0c, 0x10, 0x8a, 0xc0,
	0x0c, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0x5a,
	0x0a, 0x06, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65,
	0x78, 0x6f, 0x70, 0x73, 0x2e, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x44,
	0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82,
	0xc0, 0x0c, 0x04, 0xa0, 0xc0, 0x0c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a,
	0x22, 0x08, 0x2f, 0x64, 0x72, 0x79, 0x2d, 0x72, 0x75, 0x6e, 0x12, 0x9d, 0x01, 0x0a, 0x14, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f,
	0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xc0, 0x0c, 0x12, 0x8a, 0xc0, 0x0c, 0x0e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x12, 0x16, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x0b, 0x82, 0xc0, 0x0c, 0x07,
	0x8a, 0xc0, 0x0c, 0x03, 0x6f, 0x70, 0x73, 0x42, 0x40, 0x82, 0xc0, 0x0c, 0x04, 0x08, 0x01, 0x10,
	0x01, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x6f, 0x70, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescOnce sync.Once
	file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescData = file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDesc
)

func file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescGZIP() []byte {
	file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescOnce.Do(func() {
		file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescData)
	})
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDescData
}

var file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_goTypes = []interface{}{
	(InstallState)(0),                         // 0: cortexops.InstallState
	(ValidationError_Severity)(0),             // 1: cortexops.ValidationError.Severity
	(*InstallStatus)(nil),                     // 2: cortexops.InstallStatus
	(*CapabilityBackendConfigSpec)(nil),       // 3: cortexops.CapabilityBackendConfigSpec
	(*CortexWorkloadsConfig)(nil),             // 4: cortexops.CortexWorkloadsConfig
	(*CortexWorkloadSpec)(nil),                // 5: cortexops.CortexWorkloadSpec
	(*CortexApplicationConfig)(nil),           // 6: cortexops.CortexApplicationConfig
	(*GrafanaConfig)(nil),                     // 7: cortexops.GrafanaConfig
	(*PresetList)(nil),                        // 8: cortexops.PresetList
	(*Preset)(nil),                            // 9: cortexops.Preset
	(*PresetMetadata)(nil),                    // 10: cortexops.PresetMetadata
	(*DryRunRequest)(nil),                     // 11: cortexops.DryRunRequest
	(*ValidationError)(nil),                   // 12: cortexops.ValidationError
	(*DryRunResponse)(nil),                    // 13: cortexops.DryRunResponse
	(*GetRequest)(nil),                        // 14: cortexops.GetRequest
	(*ConfigurationHistoryRequest)(nil),       // 15: cortexops.ConfigurationHistoryRequest
	(*ConfigurationHistoryResponse)(nil),      // 16: cortexops.ConfigurationHistoryResponse
	nil,                                       // 17: cortexops.InstallStatus.MetadataEntry
	nil,                                       // 18: cortexops.CortexWorkloadsConfig.TargetsEntry
	(*v1.Revision)(nil),                       // 19: core.Revision
	(*validation.Limits)(nil),                 // 20: validation.Limits
	(*runtimeconfig.RuntimeConfigValues)(nil), // 21: runtimeconfig.RuntimeConfigValues
	(*compactor.Config)(nil),                  // 22: compactor.Config
	(*querier.Config)(nil),                    // 23: querier.Config
	(*storage.Config)(nil),                    // 24: storage.Config
	(*v1.Reference)(nil),                      // 25: core.Reference
	(driverutil.Target)(0),                    // 26: driverutil.Target
	(driverutil.Action)(0),                    // 27: driverutil.Action
	(*emptypb.Empty)(nil),                     // 28: google.protobuf.Empty
}
var file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_depIdxs = []int32{
	0,  // 0: cortexops.InstallStatus.state:type_name -> cortexops.InstallState
	17, // 1: cortexops.InstallStatus.metadata:type_name -> cortexops.InstallStatus.MetadataEntry
	19, // 2: cortexops.CapabilityBackendConfigSpec.revision:type_name -> core.Revision
	4,  // 3: cortexops.CapabilityBackendConfigSpec.cortexWorkloads:type_name -> cortexops.CortexWorkloadsConfig
	6,  // 4: cortexops.CapabilityBackendConfigSpec.cortexConfig:type_name -> cortexops.CortexApplicationConfig
	7,  // 5: cortexops.CapabilityBackendConfigSpec.grafana:type_name -> cortexops.GrafanaConfig
	18, // 6: cortexops.CortexWorkloadsConfig.targets:type_name -> cortexops.CortexWorkloadsConfig.TargetsEntry
	20, // 7: cortexops.CortexApplicationConfig.limits:type_name -> validation.Limits
	21, // 8: cortexops.CortexApplicationConfig.runtime_config:type_name -> runtimeconfig.RuntimeConfigValues
	22, // 9: cortexops.CortexApplicationConfig.compactor:type_name -> compactor.Config
	23, // 10: cortexops.CortexApplicationConfig.querier:type_name -> querier.Config
	24, // 11: cortexops.CortexApplicationConfig.storage:type_name -> storage.Config
	9,  // 12: cortexops.PresetList.items:type_name -> cortexops.Preset
	25, // 13: cortexops.Preset.id:type_name -> core.Reference
	10, // 14: cortexops.Preset.metadata:type_name -> cortexops.PresetMetadata
	3,  // 15: cortexops.Preset.spec:type_name -> cortexops.CapabilityBackendConfigSpec
	26, // 16: cortexops.DryRunRequest.target:type_name -> driverutil.Target
	27, // 17: cortexops.DryRunRequest.action:type_name -> driverutil.Action
	3,  // 18: cortexops.DryRunRequest.spec:type_name -> cortexops.CapabilityBackendConfigSpec
	1,  // 19: cortexops.ValidationError.severity:type_name -> cortexops.ValidationError.Severity
	3,  // 20: cortexops.DryRunResponse.current:type_name -> cortexops.CapabilityBackendConfigSpec
	3,  // 21: cortexops.DryRunResponse.modified:type_name -> cortexops.CapabilityBackendConfigSpec
	12, // 22: cortexops.DryRunResponse.validationErrors:type_name -> cortexops.ValidationError
	19, // 23: cortexops.GetRequest.revision:type_name -> core.Revision
	26, // 24: cortexops.ConfigurationHistoryRequest.target:type_name -> driverutil.Target
	3,  // 25: cortexops.ConfigurationHistoryResponse.entries:type_name -> cortexops.CapabilityBackendConfigSpec
	5,  // 26: cortexops.CortexWorkloadsConfig.TargetsEntry.value:type_name -> cortexops.CortexWorkloadSpec
	14, // 27: cortexops.CortexOps.GetDefaultConfiguration:input_type -> cortexops.GetRequest
	3,  // 28: cortexops.CortexOps.SetDefaultConfiguration:input_type -> cortexops.CapabilityBackendConfigSpec
	28, // 29: cortexops.CortexOps.ResetDefaultConfiguration:input_type -> google.protobuf.Empty
	14, // 30: cortexops.CortexOps.GetConfiguration:input_type -> cortexops.GetRequest
	3,  // 31: cortexops.CortexOps.SetConfiguration:input_type -> cortexops.CapabilityBackendConfigSpec
	28, // 32: cortexops.CortexOps.ResetConfiguration:input_type -> google.protobuf.Empty
	28, // 33: cortexops.CortexOps.Status:input_type -> google.protobuf.Empty
	28, // 34: cortexops.CortexOps.Install:input_type -> google.protobuf.Empty
	28, // 35: cortexops.CortexOps.Uninstall:input_type -> google.protobuf.Empty
	28, // 36: cortexops.CortexOps.ListPresets:input_type -> google.protobuf.Empty
	11, // 37: cortexops.CortexOps.DryRun:input_type -> cortexops.DryRunRequest
	15, // 38: cortexops.CortexOps.ConfigurationHistory:input_type -> cortexops.ConfigurationHistoryRequest
	3,  // 39: cortexops.CortexOps.GetDefaultConfiguration:output_type -> cortexops.CapabilityBackendConfigSpec
	28, // 40: cortexops.CortexOps.SetDefaultConfiguration:output_type -> google.protobuf.Empty
	28, // 41: cortexops.CortexOps.ResetDefaultConfiguration:output_type -> google.protobuf.Empty
	3,  // 42: cortexops.CortexOps.GetConfiguration:output_type -> cortexops.CapabilityBackendConfigSpec
	28, // 43: cortexops.CortexOps.SetConfiguration:output_type -> google.protobuf.Empty
	28, // 44: cortexops.CortexOps.ResetConfiguration:output_type -> google.protobuf.Empty
	2,  // 45: cortexops.CortexOps.Status:output_type -> cortexops.InstallStatus
	28, // 46: cortexops.CortexOps.Install:output_type -> google.protobuf.Empty
	28, // 47: cortexops.CortexOps.Uninstall:output_type -> google.protobuf.Empty
	8,  // 48: cortexops.CortexOps.ListPresets:output_type -> cortexops.PresetList
	13, // 49: cortexops.CortexOps.DryRun:output_type -> cortexops.DryRunResponse
	16, // 50: cortexops.CortexOps.ConfigurationHistory:output_type -> cortexops.ConfigurationHistoryResponse
	39, // [39:51] is the sub-list for method output_type
	27, // [27:39] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_init() }
func file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_init() {
	if File_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilityBackendConfigSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CortexWorkloadsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CortexWorkloadSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CortexApplicationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrafanaConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Preset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresetMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DryRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DryRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_goTypes,
		DependencyIndexes: file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_depIdxs,
		EnumInfos:         file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_enumTypes,
		MessageInfos:      file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_msgTypes,
	}.Build()
	File_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto = out.File
	file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_rawDesc = nil
	file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_goTypes = nil
	file_github_com_rancher_opni_plugins_metrics_apis_cortexops_cortexops_proto_depIdxs = nil
}
