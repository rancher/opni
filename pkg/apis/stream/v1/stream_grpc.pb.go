// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/pkg/apis/stream/v1/stream.proto

package v1

import (
	context "context"
	totem "github.com/kralicky/totem"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (Stream_ConnectClient, error)
	// Used for implementation-specific events. No guarantees are made about
	// whether events will be sent or when.
	Notify(ctx context.Context, in *StreamEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type streamClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamClient(cc grpc.ClientConnInterface) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) Connect(ctx context.Context, opts ...grpc.CallOption) (Stream_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Stream_ServiceDesc.Streams[0], "/stream.Stream/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamConnectClient{stream}
	return x, nil
}

type Stream_ConnectClient interface {
	Send(*totem.RPC) error
	Recv() (*totem.RPC, error)
	grpc.ClientStream
}

type streamConnectClient struct {
	grpc.ClientStream
}

func (x *streamConnectClient) Send(m *totem.RPC) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamConnectClient) Recv() (*totem.RPC, error) {
	m := new(totem.RPC)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamClient) Notify(ctx context.Context, in *StreamEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/stream.Stream/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamServer is the server API for Stream service.
// All implementations must embed UnimplementedStreamServer
// for forward compatibility
type StreamServer interface {
	Connect(Stream_ConnectServer) error
	// Used for implementation-specific events. No guarantees are made about
	// whether events will be sent or when.
	Notify(context.Context, *StreamEvent) (*emptypb.Empty, error)
	mustEmbedUnimplementedStreamServer()
}

// UnimplementedStreamServer must be embedded to have forward compatible implementations.
type UnimplementedStreamServer struct {
}

func (UnimplementedStreamServer) Connect(Stream_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedStreamServer) Notify(context.Context, *StreamEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedStreamServer) mustEmbedUnimplementedStreamServer() {}

// UnsafeStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamServer will
// result in compilation errors.
type UnsafeStreamServer interface {
	mustEmbedUnimplementedStreamServer()
}

func RegisterStreamServer(s grpc.ServiceRegistrar, srv StreamServer) {
	s.RegisterService(&Stream_ServiceDesc, srv)
}

func _Stream_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).Connect(&streamConnectServer{stream})
}

type Stream_ConnectServer interface {
	Send(*totem.RPC) error
	Recv() (*totem.RPC, error)
	grpc.ServerStream
}

type streamConnectServer struct {
	grpc.ServerStream
}

func (x *streamConnectServer) Send(m *totem.RPC) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamConnectServer) Recv() (*totem.RPC, error) {
	m := new(totem.RPC)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Stream_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.Stream/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).Notify(ctx, req.(*StreamEvent))
	}
	return interceptor(ctx, in, info, handler)
}

// Stream_ServiceDesc is the grpc.ServiceDesc for Stream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream.Stream",
	HandlerType: (*StreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _Stream_Notify_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Stream_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/rancher/opni/pkg/apis/stream/v1/stream.proto",
}

// DelegateClient is the client API for Delegate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DelegateClient interface {
	// A synchronous request-response RPC sent to a single client.
	Request(ctx context.Context, in *DelegatedMessage, opts ...grpc.CallOption) (*totem.RPC, error)
	// A best-effort broadcast sent to all connected clients, with an
	// optional target filter.
	Broadcast(ctx context.Context, in *BroadcastMessage, opts ...grpc.CallOption) (*BroadcastReplyList, error)
}

type delegateClient struct {
	cc grpc.ClientConnInterface
}

func NewDelegateClient(cc grpc.ClientConnInterface) DelegateClient {
	return &delegateClient{cc}
}

func (c *delegateClient) Request(ctx context.Context, in *DelegatedMessage, opts ...grpc.CallOption) (*totem.RPC, error) {
	out := new(totem.RPC)
	err := c.cc.Invoke(ctx, "/stream.Delegate/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *delegateClient) Broadcast(ctx context.Context, in *BroadcastMessage, opts ...grpc.CallOption) (*BroadcastReplyList, error) {
	out := new(BroadcastReplyList)
	err := c.cc.Invoke(ctx, "/stream.Delegate/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DelegateServer is the server API for Delegate service.
// All implementations must embed UnimplementedDelegateServer
// for forward compatibility
type DelegateServer interface {
	// A synchronous request-response RPC sent to a single client.
	Request(context.Context, *DelegatedMessage) (*totem.RPC, error)
	// A best-effort broadcast sent to all connected clients, with an
	// optional target filter.
	Broadcast(context.Context, *BroadcastMessage) (*BroadcastReplyList, error)
	mustEmbedUnimplementedDelegateServer()
}

// UnimplementedDelegateServer must be embedded to have forward compatible implementations.
type UnimplementedDelegateServer struct {
}

func (UnimplementedDelegateServer) Request(context.Context, *DelegatedMessage) (*totem.RPC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedDelegateServer) Broadcast(context.Context, *BroadcastMessage) (*BroadcastReplyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedDelegateServer) mustEmbedUnimplementedDelegateServer() {}

// UnsafeDelegateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DelegateServer will
// result in compilation errors.
type UnsafeDelegateServer interface {
	mustEmbedUnimplementedDelegateServer()
}

func RegisterDelegateServer(s grpc.ServiceRegistrar, srv DelegateServer) {
	s.RegisterService(&Delegate_ServiceDesc, srv)
}

func _Delegate_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelegatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DelegateServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.Delegate/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DelegateServer).Request(ctx, req.(*DelegatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delegate_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DelegateServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.Delegate/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DelegateServer).Broadcast(ctx, req.(*BroadcastMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Delegate_ServiceDesc is the grpc.ServiceDesc for Delegate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Delegate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream.Delegate",
	HandlerType: (*DelegateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _Delegate_Request_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _Delegate_Broadcast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/pkg/apis/stream/v1/stream.proto",
}
