// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/pkg/plugins/alerting/pkg/apis/alerting/alerting.proto

package alerting

import (
	context "context"
	v1 "github.com/rancher/opni/pkg/apis/core/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlertingClient is the client API for Alerting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertingClient interface {
	CreateAlertEvent(ctx context.Context, in *AlertEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// id is the unix epoch timestamp of the alert
	GetAlertEvent(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListAlertEvents(ctx context.Context, in *ListAlertEventRequest, opts ...grpc.CallOption) (*AlertEventList, error)
	UpdateAlertEvent(ctx context.Context, in *UpdateAlertEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteAlertEvent(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type alertingClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertingClient(cc grpc.ClientConnInterface) AlertingClient {
	return &alertingClient{cc}
}

func (c *alertingClient) CreateAlertEvent(ctx context.Context, in *AlertEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Alerting/CreateAlertEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingClient) GetAlertEvent(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Alerting/GetAlertEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingClient) ListAlertEvents(ctx context.Context, in *ListAlertEventRequest, opts ...grpc.CallOption) (*AlertEventList, error) {
	out := new(AlertEventList)
	err := c.cc.Invoke(ctx, "/Alerting/ListAlertEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingClient) UpdateAlertEvent(ctx context.Context, in *UpdateAlertEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Alerting/UpdateAlertEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingClient) DeleteAlertEvent(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Alerting/DeleteAlertEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertingServer is the server API for Alerting service.
// All implementations must embed UnimplementedAlertingServer
// for forward compatibility
type AlertingServer interface {
	CreateAlertEvent(context.Context, *AlertEvent) (*emptypb.Empty, error)
	// id is the unix epoch timestamp of the alert
	GetAlertEvent(context.Context, *v1.Reference) (*emptypb.Empty, error)
	ListAlertEvents(context.Context, *ListAlertEventRequest) (*AlertEventList, error)
	UpdateAlertEvent(context.Context, *UpdateAlertEventRequest) (*emptypb.Empty, error)
	DeleteAlertEvent(context.Context, *v1.Reference) (*emptypb.Empty, error)
	mustEmbedUnimplementedAlertingServer()
}

// UnimplementedAlertingServer must be embedded to have forward compatible implementations.
type UnimplementedAlertingServer struct {
}

func (UnimplementedAlertingServer) CreateAlertEvent(context.Context, *AlertEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlertEvent not implemented")
}
func (UnimplementedAlertingServer) GetAlertEvent(context.Context, *v1.Reference) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertEvent not implemented")
}
func (UnimplementedAlertingServer) ListAlertEvents(context.Context, *ListAlertEventRequest) (*AlertEventList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlertEvents not implemented")
}
func (UnimplementedAlertingServer) UpdateAlertEvent(context.Context, *UpdateAlertEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlertEvent not implemented")
}
func (UnimplementedAlertingServer) DeleteAlertEvent(context.Context, *v1.Reference) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlertEvent not implemented")
}
func (UnimplementedAlertingServer) mustEmbedUnimplementedAlertingServer() {}

// UnsafeAlertingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertingServer will
// result in compilation errors.
type UnsafeAlertingServer interface {
	mustEmbedUnimplementedAlertingServer()
}

func RegisterAlertingServer(s grpc.ServiceRegistrar, srv AlertingServer) {
	s.RegisterService(&Alerting_ServiceDesc, srv)
}

func _Alerting_CreateAlertEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingServer).CreateAlertEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Alerting/CreateAlertEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingServer).CreateAlertEvent(ctx, req.(*AlertEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alerting_GetAlertEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingServer).GetAlertEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Alerting/GetAlertEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingServer).GetAlertEvent(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alerting_ListAlertEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlertEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingServer).ListAlertEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Alerting/ListAlertEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingServer).ListAlertEvents(ctx, req.(*ListAlertEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alerting_UpdateAlertEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlertEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingServer).UpdateAlertEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Alerting/UpdateAlertEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingServer).UpdateAlertEvent(ctx, req.(*UpdateAlertEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alerting_DeleteAlertEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingServer).DeleteAlertEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Alerting/DeleteAlertEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingServer).DeleteAlertEvent(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

// Alerting_ServiceDesc is the grpc.ServiceDesc for Alerting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Alerting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Alerting",
	HandlerType: (*AlertingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAlertEvent",
			Handler:    _Alerting_CreateAlertEvent_Handler,
		},
		{
			MethodName: "GetAlertEvent",
			Handler:    _Alerting_GetAlertEvent_Handler,
		},
		{
			MethodName: "ListAlertEvents",
			Handler:    _Alerting_ListAlertEvents_Handler,
		},
		{
			MethodName: "UpdateAlertEvent",
			Handler:    _Alerting_UpdateAlertEvent_Handler,
		},
		{
			MethodName: "DeleteAlertEvent",
			Handler:    _Alerting_DeleteAlertEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/pkg/plugins/alerting/pkg/apis/alerting/alerting.proto",
}
