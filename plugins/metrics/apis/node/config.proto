syntax = "proto3";

package node.metrics.config;

import "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate/validate.proto";
import "github.com/rancher/opni/internal/codegen/cli/cli.proto";
import "github.com/rancher/opni/pkg/apis/core/v1/core.proto";
import "github.com/rancher/opni/pkg/config/v1beta1/agent_config.proto";
import "github.com/rancher/opni/pkg/plugins/driverutil/types.proto";
import "github.com/rancher/opni/pkg/validation/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

option go_package      = "github.com/rancher/opni/plugins/metrics/apis/node";
option (cli.generator) = {
  generate: true
};

// The NodeConfiguration service allows for per-node configuration of the
// metrics capability.
// Served as a management API extension.
service NodeConfiguration {
  option (cli.command_group) = {
    use: "config"
  };

  // {{ template "GetDefaultConfiguration" }}
  rpc GetDefaultConfiguration(GetRequest) returns (MetricsCapabilityConfig) {
    option (cli.command) = {
      use:          "get-default"
      enable_hooks: true
    };
    option (google.api.http) = {
      get: "/node_config"
    };
  }

  // {{ template "SetDefaultConfiguration" }}
  rpc SetDefaultConfiguration(SetRequest) returns (google.protobuf.Empty) {
    option (cli.command) = {
      use:         "set-default"
      granularity: EditMessage
    };
    option (google.api.http) = {
      put:  "/node_config"
      body: "*"
    };
  }

  // {{ template "ResetDefaultConfiguration" }}
  rpc ResetDefaultConfiguration(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (cli.command) = {
      use: "reset-default"
    };
    option (google.api.http) = {
      post: "/node_config/reset"
    };
  }

  // {{ template "GetConfiguration" }}
  rpc GetConfiguration(GetRequest) returns (MetricsCapabilityConfig) {
    option (cli.command) = {
      use:          "get"
      enable_hooks: true
    };
    option (google.api.http) = {
      get: "/node_config/{node.id}"
    };
  }

  // {{ template "SetConfiguration" }}
  rpc SetConfiguration(SetRequest) returns (google.protobuf.Empty) {
    option (cli.command) = {
      use:          "set"
      enable_hooks: true
      granularity:  EditMessage
    };
    option (google.api.http) = {
      put:  "/node_config/{node.id}"
      body: "*"
    };
  }

  // {{ template "ResetConfiguration" }}
  rpc ResetConfiguration(ResetRequest) returns (google.protobuf.Empty) {
    option (cli.command) = {
      use: "reset"
    };
    option (google.api.http) = {
      post: "/node_config/{node.id}/reset"
      body: "*"
    };
  }

  // {{ template "DryRun" }}
  rpc DryRun(DryRunRequest) returns (DryRunResponse) {
    option (cli.command).skip = true;
    option (google.api.http) = {
      post: "/dry-run"
      body: "*"
    };
  }

  // {{ template "ConfigurationHistory" }}
  rpc ConfigurationHistory(ConfigurationHistoryRequest) returns (ConfigurationHistoryResponse) {
    option (cli.command) = {
      use: "history"
    };
    option (google.api.http) = {
      get: "/node_config/{node.id}/history"
    };
  }
}

// This message is strictly an implementation detail and used for sync request/response only.
// It is NOT persisted to the key-value store.
message MetricsCapabilityStatus {
  // Note: this field is not used as part of an installable config type. It is
  // older and kept for compatibility purposes.
  bool enabled = 1;
  // If enabled is false, conditions may contain a list of relevant status
  // messages describing why the capability is disabled.
  repeated string         conditions = 2;
  MetricsCapabilityConfig spec       = 3;
}

// This message is the persisted configuration for a single node, or the
// default configuration for all nodes.
message MetricsCapabilityConfig {
  core.Revision revision = 5;

  .config.v1beta1.RulesSpec rules = 1 [(cli.flag_set).default = {
    [type.googleapis.com/config.v1beta1.RulesSpec]: {
      discovery: {
        prometheusRules: {
          searchNamespaces: [""]
        }
      }
    }
  }];

  enum Driver {
    None          = 0;
    Prometheus    = 1;
    OpenTelemetry = 2;
  }
  optional Driver driver = 4 [(cli.flag).default = "Prometheus"];
  PrometheusSpec prometheus = 2 [
    (buf.validate.field).ignore_if = {
      id:         "prometheus"
      expression: "this.driver != 1"
    }
  ];
  OTELSpec otel = 3 [
    (buf.validate.field).ignore_if = {
      id:         "otel"
      expression: "this.driver != 2"
    }
  ];
}

message PrometheusSpec {
  optional string image = 1 [
    (cli.flag).default       = "quay.io/prometheus/prometheus:latest",
    (buf.validate.field).cel = {
      id:         "prometheus_image"
      expression: "this.isValidImageRef()"
    }
  ];
  reserved 2;
}

message ScrapeConfig {
  optional string jobName = 1 [(buf.validate.field).required = true];
  repeated string targets = 2 [(buf.validate.field).repeated = {
    min_items: 1
    unique:    true
  }];
  optional string scrapeInterval = 3 [
    (buf.validate.field) = {
      required: true
      cel: {
        id:         "scrape_interval_duration"
        message:    "invalid scrape interval duration"
        expression: "prometheusDuration(this) >= duration('1s')"
      }
    }
  ];
}

message OTELSpec {
  repeated ScrapeConfig additionalScrapeConfigs = 1;
  WALConfig             wal                     = 2;
  optional bool         hostMetrics             = 3;
}

message WALConfig {
  optional bool enabled = 1;
  optional int64 bufferSize = 2 [
    (buf.validate.field).ignore_if = {id: "bufferSize", expression: "!this.enabled"},
    (buf.validate.field).required  = true,
    (buf.validate.field).int64.gt  = 0
  ];
  google.protobuf.Duration truncateFrequency = 3 [
    (buf.validate.field).ignore_if   = {id: "truncateFrequency", expression: "!this.enabled"},
    (buf.validate.field).required    = true,
    (buf.validate.field).duration.gt = {seconds: 0, nanos: 0}
  ];
}

enum ConfigStatus {
  Unknown     = 0;
  UpToDate    = 1;
  NeedsUpdate = 2;
}

message ConfigurationHistoryResponse {
  repeated MetricsCapabilityConfig entries = 1;
}

message ResetRequest {
  core.Reference            node     = 1; // Only used for active config requests
  core.Revision             revision = 2 [(cli.flag_set).no_prefix = true];
  google.protobuf.FieldMask mask     = 3 [(cli.flag).skip = true];
  MetricsCapabilityConfig   patch    = 4 [(cli.flag).skip = true];
}

message GetRequest {
  core.Reference node     = 1; // Only used for active config requests
  core.Revision  revision = 2;
}

message SetRequest {
  core.Reference          node = 1; // Only used for active config requests
  MetricsCapabilityConfig spec = 2;
}

message DryRunRequest {
  core.Reference node = 1; // Only used for active config requests

  driverutil.Target target = 2;
  driverutil.Action action = 3;

  MetricsCapabilityConfig spec = 4; // Set

  core.Revision             revision = 5 [(cli.flag_set).no_prefix = true]; // Reset
  MetricsCapabilityConfig   patch    = 6 [(cli.flag).skip = true]; // Reset
  google.protobuf.FieldMask mask     = 7 [(cli.flag).skip = true]; // Reset
}

message DryRunResponse {
  MetricsCapabilityConfig current          = 1;
  MetricsCapabilityConfig modified         = 2;
  buf.validate.Violations validationErrors = 3;
}

message ConfigurationHistoryRequest {
  core.Reference    node          = 1; // Only used for active config requests
  driverutil.Target target        = 2;
  core.Revision     revision      = 3 [(cli.flag_set).no_prefix = true];
  bool              includeValues = 4 [(cli.flag).default = "true"];
}
