// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/plugins/alerting/pkg/apis/node/node.proto

package node

import (
	context "context"
	v1 "github.com/rancher/opni/pkg/apis/core/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NodeAlertingCapability_Sync_FullMethodName = "/alerting.node.NodeAlertingCapability/Sync"
)

// NodeAlertingCapabilityClient is the client API for NodeAlertingCapability service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeAlertingCapabilityClient interface {
	Sync(ctx context.Context, in *AlertingCapabilityConfig, opts ...grpc.CallOption) (*SyncResponse, error)
}

type nodeAlertingCapabilityClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeAlertingCapabilityClient(cc grpc.ClientConnInterface) NodeAlertingCapabilityClient {
	return &nodeAlertingCapabilityClient{cc}
}

func (c *nodeAlertingCapabilityClient) Sync(ctx context.Context, in *AlertingCapabilityConfig, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, NodeAlertingCapability_Sync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeAlertingCapabilityServer is the server API for NodeAlertingCapability service.
// All implementations should embed UnimplementedNodeAlertingCapabilityServer
// for forward compatibility
type NodeAlertingCapabilityServer interface {
	Sync(context.Context, *AlertingCapabilityConfig) (*SyncResponse, error)
}

// UnimplementedNodeAlertingCapabilityServer should be embedded to have forward compatible implementations.
type UnimplementedNodeAlertingCapabilityServer struct {
}

func (UnimplementedNodeAlertingCapabilityServer) Sync(context.Context, *AlertingCapabilityConfig) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}

// UnsafeNodeAlertingCapabilityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeAlertingCapabilityServer will
// result in compilation errors.
type UnsafeNodeAlertingCapabilityServer interface {
	mustEmbedUnimplementedNodeAlertingCapabilityServer()
}

func RegisterNodeAlertingCapabilityServer(s grpc.ServiceRegistrar, srv NodeAlertingCapabilityServer) {
	s.RegisterService(&NodeAlertingCapability_ServiceDesc, srv)
}

func _NodeAlertingCapability_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertingCapabilityConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAlertingCapabilityServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeAlertingCapability_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAlertingCapabilityServer).Sync(ctx, req.(*AlertingCapabilityConfig))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeAlertingCapability_ServiceDesc is the grpc.ServiceDesc for NodeAlertingCapability service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeAlertingCapability_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alerting.node.NodeAlertingCapability",
	HandlerType: (*NodeAlertingCapabilityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _NodeAlertingCapability_Sync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/plugins/alerting/pkg/apis/node/node.proto",
}

const (
	AlertingNodeConfiguration_GetDefaultConfiguration_FullMethodName = "/alerting.node.AlertingNodeConfiguration/GetDefaultConfiguration"
	AlertingNodeConfiguration_SetDefaultConfiguration_FullMethodName = "/alerting.node.AlertingNodeConfiguration/SetDefaultConfiguration"
	AlertingNodeConfiguration_GetNodeConfiguration_FullMethodName    = "/alerting.node.AlertingNodeConfiguration/GetNodeConfiguration"
	AlertingNodeConfiguration_SetNodeConfiguration_FullMethodName    = "/alerting.node.AlertingNodeConfiguration/SetNodeConfiguration"
)

// AlertingNodeConfigurationClient is the client API for AlertingNodeConfiguration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertingNodeConfigurationClient interface {
	GetDefaultConfiguration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AlertingCapabilitySpec, error)
	SetDefaultConfiguration(ctx context.Context, in *AlertingCapabilitySpec, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetNodeConfiguration(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*AlertingCapabilitySpec, error)
	SetNodeConfiguration(ctx context.Context, in *NodeConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type alertingNodeConfigurationClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertingNodeConfigurationClient(cc grpc.ClientConnInterface) AlertingNodeConfigurationClient {
	return &alertingNodeConfigurationClient{cc}
}

func (c *alertingNodeConfigurationClient) GetDefaultConfiguration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AlertingCapabilitySpec, error) {
	out := new(AlertingCapabilitySpec)
	err := c.cc.Invoke(ctx, AlertingNodeConfiguration_GetDefaultConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingNodeConfigurationClient) SetDefaultConfiguration(ctx context.Context, in *AlertingCapabilitySpec, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AlertingNodeConfiguration_SetDefaultConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingNodeConfigurationClient) GetNodeConfiguration(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*AlertingCapabilitySpec, error) {
	out := new(AlertingCapabilitySpec)
	err := c.cc.Invoke(ctx, AlertingNodeConfiguration_GetNodeConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingNodeConfigurationClient) SetNodeConfiguration(ctx context.Context, in *NodeConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AlertingNodeConfiguration_SetNodeConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertingNodeConfigurationServer is the server API for AlertingNodeConfiguration service.
// All implementations should embed UnimplementedAlertingNodeConfigurationServer
// for forward compatibility
type AlertingNodeConfigurationServer interface {
	GetDefaultConfiguration(context.Context, *emptypb.Empty) (*AlertingCapabilitySpec, error)
	SetDefaultConfiguration(context.Context, *AlertingCapabilitySpec) (*emptypb.Empty, error)
	GetNodeConfiguration(context.Context, *v1.Reference) (*AlertingCapabilitySpec, error)
	SetNodeConfiguration(context.Context, *NodeConfigRequest) (*emptypb.Empty, error)
}

// UnimplementedAlertingNodeConfigurationServer should be embedded to have forward compatible implementations.
type UnimplementedAlertingNodeConfigurationServer struct {
}

func (UnimplementedAlertingNodeConfigurationServer) GetDefaultConfiguration(context.Context, *emptypb.Empty) (*AlertingCapabilitySpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultConfiguration not implemented")
}
func (UnimplementedAlertingNodeConfigurationServer) SetDefaultConfiguration(context.Context, *AlertingCapabilitySpec) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultConfiguration not implemented")
}
func (UnimplementedAlertingNodeConfigurationServer) GetNodeConfiguration(context.Context, *v1.Reference) (*AlertingCapabilitySpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeConfiguration not implemented")
}
func (UnimplementedAlertingNodeConfigurationServer) SetNodeConfiguration(context.Context, *NodeConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNodeConfiguration not implemented")
}

// UnsafeAlertingNodeConfigurationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertingNodeConfigurationServer will
// result in compilation errors.
type UnsafeAlertingNodeConfigurationServer interface {
	mustEmbedUnimplementedAlertingNodeConfigurationServer()
}

func RegisterAlertingNodeConfigurationServer(s grpc.ServiceRegistrar, srv AlertingNodeConfigurationServer) {
	s.RegisterService(&AlertingNodeConfiguration_ServiceDesc, srv)
}

func _AlertingNodeConfiguration_GetDefaultConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingNodeConfigurationServer).GetDefaultConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertingNodeConfiguration_GetDefaultConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingNodeConfigurationServer).GetDefaultConfiguration(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertingNodeConfiguration_SetDefaultConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertingCapabilitySpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingNodeConfigurationServer).SetDefaultConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertingNodeConfiguration_SetDefaultConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingNodeConfigurationServer).SetDefaultConfiguration(ctx, req.(*AlertingCapabilitySpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertingNodeConfiguration_GetNodeConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingNodeConfigurationServer).GetNodeConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertingNodeConfiguration_GetNodeConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingNodeConfigurationServer).GetNodeConfiguration(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertingNodeConfiguration_SetNodeConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingNodeConfigurationServer).SetNodeConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertingNodeConfiguration_SetNodeConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingNodeConfigurationServer).SetNodeConfiguration(ctx, req.(*NodeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlertingNodeConfiguration_ServiceDesc is the grpc.ServiceDesc for AlertingNodeConfiguration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertingNodeConfiguration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alerting.node.AlertingNodeConfiguration",
	HandlerType: (*AlertingNodeConfigurationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDefaultConfiguration",
			Handler:    _AlertingNodeConfiguration_GetDefaultConfiguration_Handler,
		},
		{
			MethodName: "SetDefaultConfiguration",
			Handler:    _AlertingNodeConfiguration_SetDefaultConfiguration_Handler,
		},
		{
			MethodName: "GetNodeConfiguration",
			Handler:    _AlertingNodeConfiguration_GetNodeConfiguration_Handler,
		},
		{
			MethodName: "SetNodeConfiguration",
			Handler:    _AlertingNodeConfiguration_SetNodeConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/plugins/alerting/pkg/apis/node/node.proto",
}
