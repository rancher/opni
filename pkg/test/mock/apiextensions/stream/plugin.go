// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/plugins/apis/apiextensions/stream/plugin.go

// Package mock_stream is a generated GoMock package.
package mock_stream

import (
	context "context"
	reflect "reflect"

	v1 "github.com/rancher/opni/pkg/apis/stream/v1"
	apiextensions "github.com/rancher/opni/pkg/plugins/apis/apiextensions"
	util "github.com/rancher/opni/pkg/util"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockStreamAPIExtension is a mock of StreamAPIExtension interface.
type MockStreamAPIExtension struct {
	ctrl     *gomock.Controller
	recorder *MockStreamAPIExtensionMockRecorder
}

// MockStreamAPIExtensionMockRecorder is the mock recorder for MockStreamAPIExtension.
type MockStreamAPIExtensionMockRecorder struct {
	mock *MockStreamAPIExtension
}

// NewMockStreamAPIExtension creates a new mock instance.
func NewMockStreamAPIExtension(ctrl *gomock.Controller) *MockStreamAPIExtension {
	mock := &MockStreamAPIExtension{ctrl: ctrl}
	mock.recorder = &MockStreamAPIExtensionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamAPIExtension) EXPECT() *MockStreamAPIExtensionMockRecorder {
	return m.recorder
}

// StreamServers mocks base method.
func (m *MockStreamAPIExtension) StreamServers() []util.ServicePackInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamServers")
	ret0, _ := ret[0].([]util.ServicePackInterface)
	return ret0
}

// StreamServers indicates an expected call of StreamServers.
func (mr *MockStreamAPIExtensionMockRecorder) StreamServers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamServers", reflect.TypeOf((*MockStreamAPIExtension)(nil).StreamServers))
}

// MockStreamClientHandler is a mock of StreamClientHandler interface.
type MockStreamClientHandler struct {
	ctrl     *gomock.Controller
	recorder *MockStreamClientHandlerMockRecorder
}

// MockStreamClientHandlerMockRecorder is the mock recorder for MockStreamClientHandler.
type MockStreamClientHandlerMockRecorder struct {
	mock *MockStreamClientHandler
}

// NewMockStreamClientHandler creates a new mock instance.
func NewMockStreamClientHandler(ctrl *gomock.Controller) *MockStreamClientHandler {
	mock := &MockStreamClientHandler{ctrl: ctrl}
	mock.recorder = &MockStreamClientHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamClientHandler) EXPECT() *MockStreamClientHandlerMockRecorder {
	return m.recorder
}

// UseStreamClient mocks base method.
func (m *MockStreamClientHandler) UseStreamClient(client grpc.ClientConnInterface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseStreamClient", client)
}

// UseStreamClient indicates an expected call of UseStreamClient.
func (mr *MockStreamClientHandlerMockRecorder) UseStreamClient(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseStreamClient", reflect.TypeOf((*MockStreamClientHandler)(nil).UseStreamClient), client)
}

// MockStreamAPIExtensionWithHandlers is a mock of StreamAPIExtensionWithHandlers interface.
type MockStreamAPIExtensionWithHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockStreamAPIExtensionWithHandlersMockRecorder
}

// MockStreamAPIExtensionWithHandlersMockRecorder is the mock recorder for MockStreamAPIExtensionWithHandlers.
type MockStreamAPIExtensionWithHandlersMockRecorder struct {
	mock *MockStreamAPIExtensionWithHandlers
}

// NewMockStreamAPIExtensionWithHandlers creates a new mock instance.
func NewMockStreamAPIExtensionWithHandlers(ctrl *gomock.Controller) *MockStreamAPIExtensionWithHandlers {
	mock := &MockStreamAPIExtensionWithHandlers{ctrl: ctrl}
	mock.recorder = &MockStreamAPIExtensionWithHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamAPIExtensionWithHandlers) EXPECT() *MockStreamAPIExtensionWithHandlersMockRecorder {
	return m.recorder
}

// StreamServers mocks base method.
func (m *MockStreamAPIExtensionWithHandlers) StreamServers() []util.ServicePackInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamServers")
	ret0, _ := ret[0].([]util.ServicePackInterface)
	return ret0
}

// StreamServers indicates an expected call of StreamServers.
func (mr *MockStreamAPIExtensionWithHandlersMockRecorder) StreamServers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamServers", reflect.TypeOf((*MockStreamAPIExtensionWithHandlers)(nil).StreamServers))
}

// UseStreamClient mocks base method.
func (m *MockStreamAPIExtensionWithHandlers) UseStreamClient(client grpc.ClientConnInterface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseStreamClient", client)
}

// UseStreamClient indicates an expected call of UseStreamClient.
func (mr *MockStreamAPIExtensionWithHandlersMockRecorder) UseStreamClient(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseStreamClient", reflect.TypeOf((*MockStreamAPIExtensionWithHandlers)(nil).UseStreamClient), client)
}

// MockstreamExtPlugin is a mock of streamExtPlugin interface.
type MockstreamExtPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockstreamExtPluginMockRecorder
}

// MockstreamExtPluginMockRecorder is the mock recorder for MockstreamExtPlugin.
type MockstreamExtPluginMockRecorder struct {
	mock *MockstreamExtPlugin
}

// NewMockstreamExtPlugin creates a new mock instance.
func NewMockstreamExtPlugin(ctrl *gomock.Controller) *MockstreamExtPlugin {
	mock := &MockstreamExtPlugin{ctrl: ctrl}
	mock.recorder = &MockstreamExtPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstreamExtPlugin) EXPECT() *MockstreamExtPluginMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockstreamExtPlugin) Connect(arg0 v1.Stream_ConnectServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockstreamExtPluginMockRecorder) Connect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockstreamExtPlugin)(nil).Connect), arg0)
}

// ConnectInternal mocks base method.
func (m *MockstreamExtPlugin) ConnectInternal(arg0 apiextensions.StreamAPIExtension_ConnectInternalServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectInternal", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectInternal indicates an expected call of ConnectInternal.
func (mr *MockstreamExtPluginMockRecorder) ConnectInternal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectInternal", reflect.TypeOf((*MockstreamExtPlugin)(nil).ConnectInternal), arg0)
}

// Notify mocks base method.
func (m *MockstreamExtPlugin) Notify(arg0 context.Context, arg1 *v1.StreamEvent) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Notify indicates an expected call of Notify.
func (mr *MockstreamExtPluginMockRecorder) Notify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockstreamExtPlugin)(nil).Notify), arg0, arg1)
}
