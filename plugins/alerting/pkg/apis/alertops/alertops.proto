syntax = "proto3";
option go_package = "github.com/rancher/opni/plugins/alerting/pkg/apis/alertops";

import "google/protobuf/empty.proto";
import "github.com/rancher/opni/pkg/apis/storage/v1/storage.proto";
import "google/api/annotations.proto";

package alerting.ops;


// The AlertingOps service controls meta-operations for
// deploying, connecting & configuring AlertManager in the upstream environment
service AlertingOps {
    rpc GetClusterConfiguration(google.protobuf.Empty) returns (ClusterConfiguration) {
        option (google.api.http) = {
          get: "/configuration"
        };
      }
      rpc ConfigureCluster(ClusterConfiguration) returns (google.protobuf.Empty) {
        option (google.api.http) = {
          post: "/configure"
          body: "*"
        };
      }
      rpc GetClusterStatus(google.protobuf.Empty) returns (InstallStatus) {
        option (google.api.http) = {
          get: "/status"
        };
      }
      rpc UninstallCluster(google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (google.api.http) = {
          post: "/uninstall"
        };
      }
}

enum InstallState {
    Unknown = 0;
    NotInstalled = 1;
    Updating = 2;
    Installed = 3;
    Uninstalling = 4;
  }

message InstallStatus {
    InstallState state = 1;
    string version = 2;
    map<string, string> metadata = 3;
}

message ClusterConfiguration {
    // install / uninstall Alerting
    bool enabled = 1;
    // number of replicas for the opni-alerting statefulset (odd-number for HA)
    int32 numReplicas = 2;
    // Set resources to apply to each opni-alerting-pod
    ResourceLimitSpec resourceLimits = 3;
}

message ResourceLimitSpec {
    // CPU resource limit
    string cpu = 1;
    // Memory resource limit
    string memory = 2;
}