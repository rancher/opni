syntax = "proto3";

package management;

import "github.com/rancher/opni/pkg/apis/capability/v1/capability.proto";
import "github.com/rancher/opni/pkg/apis/core/v1/core.proto";
import "github.com/rancher/opni/pkg/apis/control/v1/remote.proto";
import "google/api/annotations.proto";
import "google/api/http.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";

option go_package = "github.com/rancher/opni/pkg/apis/management/v1";

service Management {
  rpc CreateBootstrapToken(CreateBootstrapTokenRequest) returns (core.BootstrapToken) {
    option (google.api.http) = {
      post: "/tokens"
      body: "*"
    };
  }
  rpc RevokeBootstrapToken(core.Reference) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/tokens/{id}"
    };
  }
  rpc ListBootstrapTokens(google.protobuf.Empty) returns (core.BootstrapTokenList) {
    option (google.api.http) = {
      get: "/tokens"
    };
  }
  rpc GetBootstrapToken(core.Reference) returns (core.BootstrapToken) {
    option (google.api.http) = {
      get: "/tokens/{id}"
    };
  }
  rpc ListClusters(ListClustersRequest) returns (core.ClusterList) {
    option (google.api.http) = {
      get: "/clusters"
    };
  }
  rpc WatchClusters(WatchClustersRequest) returns (stream WatchEvent) {
    option (google.api.http) = {
      get:  "/watch/clusters"
      body: "*"
    };
  }
  rpc DeleteCluster(core.Reference) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/clusters/{id}"
    };
  }
  rpc CertsInfo(google.protobuf.Empty) returns (CertsInfoResponse) {
    option (google.api.http) = {
      get: "/certs"
    };
  }
  rpc GetCluster(core.Reference) returns (core.Cluster) {
    option (google.api.http) = {
      get: "/clusters/{id}"
    };
  }
  rpc GetClusterHealthStatus(core.Reference) returns (core.HealthStatus) {
    option (google.api.http) = {
      get: "/clusters/{id}/health"
    };
  }
  rpc WatchClusterHealthStatus(google.protobuf.Empty) returns (stream core.ClusterHealthStatus) {
    option (google.api.http) = {
      get: "/watch/health"
    };
  }
  rpc EditCluster(EditClusterRequest) returns (core.Cluster) {
    option (google.api.http) = {
      put:  "/clusters/{cluster.id}"
      body: "*"
    };
  }
  rpc CreateRole(core.Role) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/roles"
      body: "*"
    };
  }
  rpc UpdateRole(core.Role) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put:  "/roles"
      body: "*"
    };
  }
  rpc DeleteRole(core.Reference) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/roles/{id}"
    };
  }
  rpc GetRole(core.Reference) returns (core.Role) {
    option (google.api.http) = {
      get: "/roles/{id}"
    };
  }
  rpc CreateRoleBinding(core.RoleBinding) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/rolebindings"
      body: "*"
    };
  }
  rpc UpdateRoleBinding(core.RoleBinding) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put:  "/rolebindings"
      body: "*"
    };
  }
  rpc DeleteRoleBinding(core.Reference) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/rolebindings/{id}"
    };
  }
  rpc GetRoleBinding(core.Reference) returns (core.RoleBinding) {
    option (google.api.http) = {
      get: "/rolebindings/{id}"
    };
  }
  rpc ListRoles(google.protobuf.Empty) returns (core.RoleList) {
    option (google.api.http) = {
      get: "/roles"
    };
  }
  rpc ListRoleBindings(google.protobuf.Empty) returns (core.RoleBindingList) {
    option (google.api.http) = {
      get: "/rolebindings"
    };
  }
  rpc SubjectAccess(core.SubjectAccessRequest) returns (core.ReferenceList) {
    option (google.api.http) = {
      get: "/subjectaccess"
    };
  }
  rpc APIExtensions(google.protobuf.Empty) returns (APIExtensionInfoList) {
    option (google.api.http) = {
      get: "/apiextensions"
    };
  }
  rpc GetConfig(google.protobuf.Empty) returns (GatewayConfig) {
    option (google.api.http) = {
      get: "/config"
    };
  }
  rpc UpdateConfig(UpdateConfigRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put:  "/config"
      body: "*"
    };
  }
  rpc ListCapabilities(google.protobuf.Empty) returns (CapabilityList) {
    option (google.api.http) = {
      get: "/capabilities"
    };
  }
  // Deprecated: For agent v2, use InstallCapability instead.
  rpc CapabilityInstaller(CapabilityInstallerRequest) returns (CapabilityInstallerResponse) {
    option deprecated = true;
    option (google.api.http) = {
      post: "/capabilities/{name}/installer"
      body: "*"
    };
  }
  rpc InstallCapability(CapabilityInstallRequest) returns (capability.InstallResponse) {
    option (google.api.http) = {
      post: "/clusters/{target.cluster.id}/capabilities/{name}/install"
      body: "*"
    };
  }
  rpc UninstallCapability(CapabilityUninstallRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/clusters/{target.cluster.id}/capabilities/{name}/uninstall"
      body: "*"
    };
  }
  rpc CapabilityStatus(CapabilityStatusRequest) returns (capability.NodeCapabilityStatus) {
    option (google.api.http) = {
      get: "/clusters/{cluster.id}/capabilities/{name}/status"
    };
  }
  rpc CapabilityUninstallStatus(CapabilityStatusRequest) returns (core.TaskStatus) {
    option (google.api.http) = {
      get: "/clusters/{cluster.id}/capabilities/{name}/uninstall/status"
    };
  }
  rpc CancelCapabilityUninstall(CapabilityUninstallCancelRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/clusters/{cluster.id}/capabilities/{name}/uninstall/cancel"
    };
  }
  rpc GetDashboardSettings(google.protobuf.Empty) returns (DashboardSettings) {
    option (google.api.http) = {
      get: "/dashboard/settings"
    };
  }
  rpc UpdateDashboardSettings(DashboardSettings) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put:  "/dashboard/settings"
      body: "*"
    };
  }
  rpc GetAgentLogStream(StreamAgentLogsRequest) returns (stream control.StructuredLogRecord) {
    option (google.api.http) = {
      get: "/clusters/{id}/logs"
      body: "*"
    };
  }
}

message CreateBootstrapTokenRequest {
  google.protobuf.Duration      ttl          = 1;
  map<string, string>           labels       = 2;
  repeated core.TokenCapability capabilities = 3;
  int64                         maxUsages    = 4;
}

message CertsInfoResponse {
  repeated core.CertInfo chain = 1;
}

message ListClustersRequest {
  core.LabelSelector matchLabels  = 1;
  core.MatchOptions  matchOptions = 2;
}

message EditClusterRequest {
  core.Reference      cluster = 1;
  map<string, string> labels  = 2;
}

message WatchClustersRequest {
  core.ReferenceList knownClusters = 1;
}

enum WatchEventType {
  Put    = 0;
  Delete = 2;
}

message WatchEvent {
  core.Cluster   cluster  = 1;
  WatchEventType type     = 2;
  core.Cluster   previous = 3;
}

message APIExtensionInfoList {
  repeated APIExtensionInfo items = 1;
}

message APIExtensionInfo {
  google.protobuf.ServiceDescriptorProto serviceDesc = 1;
  repeated HTTPRuleDescriptor            rules       = 2;
}

message HTTPRuleDescriptor {
  google.api.HttpRule                   http   = 1;
  google.protobuf.MethodDescriptorProto method = 2;
}

message GatewayConfig {
  repeated ConfigDocumentWithSchema documents = 1;
}

message ConfigDocumentWithSchema {
  bytes json   = 1;
  bytes yaml   = 2;
  bytes schema = 3;
}

message ConfigDocument {
  bytes json = 1;
}

message UpdateConfigRequest {
  repeated ConfigDocument documents = 1;
}

message CapabilityList {
  repeated CapabilityInfo items = 1;
}

message CapabilityInfo {
  capability.Details details   = 1;
  int32              nodeCount = 2;
}

message CapabilityInstallerRequest {
  string name  = 1;
  string token = 2;
  string pin   = 3;
}

message CapabilityInstallRequest {
  string                    name   = 1;
  capability.InstallRequest target = 2;
}

message CapabilityInstallerResponse {
  string command = 1;
}

message CapabilityUninstallRequest {
  string                      name   = 1;
  capability.UninstallRequest target = 2;
}

message CapabilityStatusRequest {
  string         name    = 1;
  core.Reference cluster = 2;
}

message CapabilityUninstallCancelRequest {
  string         name    = 1;
  core.Reference cluster = 2;
}

message DashboardSettings {
  optional DashboardGlobalSettings global = 1;
  map<string, string>              user   = 2;
}

message DashboardGlobalSettings {
  string                   defaultImageRepository = 1;
  google.protobuf.Duration defaultTokenTtl        = 2;
  map<string, string>      defaultTokenLabels     = 3;
}

message StreamAgentLogsRequest {
  core.Reference agent = 1;
  control.LogStreamRequest request = 2;
}
