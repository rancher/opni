// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/slo/backend/store.go

// Package mock_backend is a generated GoMock package.
package mock_backend

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/rancher/opni/pkg/apis/core/v1"
	v10 "github.com/rancher/opni/pkg/apis/slo/v1"
)

// MockSLOStore is a mock of SLOStore interface.
type MockSLOStore struct {
	ctrl     *gomock.Controller
	recorder *MockSLOStoreMockRecorder
}

// MockSLOStoreMockRecorder is the mock recorder for MockSLOStore.
type MockSLOStoreMockRecorder struct {
	mock *MockSLOStore
}

// NewMockSLOStore creates a new mock instance.
func NewMockSLOStore(ctrl *gomock.Controller) *MockSLOStore {
	mock := &MockSLOStore{ctrl: ctrl}
	mock.recorder = &MockSLOStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSLOStore) EXPECT() *MockSLOStoreMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockSLOStore) Clone(ctx context.Context, clone *v10.SLOData) (*v1.Reference, *v10.SLOData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", ctx, clone)
	ret0, _ := ret[0].(*v1.Reference)
	ret1, _ := ret[1].(*v10.SLOData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Clone indicates an expected call of Clone.
func (mr *MockSLOStoreMockRecorder) Clone(ctx, clone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockSLOStore)(nil).Clone), ctx, clone)
}

// Create mocks base method.
func (m *MockSLOStore) Create(ctx context.Context, req *v10.CreateSLORequest) (*v1.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(*v1.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSLOStoreMockRecorder) Create(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSLOStore)(nil).Create), ctx, req)
}

// Delete mocks base method.
func (m *MockSLOStore) Delete(ctx context.Context, existing *v10.SLOData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, existing)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSLOStoreMockRecorder) Delete(ctx, existing interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSLOStore)(nil).Delete), ctx, existing)
}

// MultiClusterClone mocks base method.
func (m *MockSLOStore) MultiClusterClone(ctx context.Context, slo *v10.SLOData, toClusters []*v1.Reference) ([]*v1.Reference, []*v10.SLOData, []error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiClusterClone", ctx, slo, toClusters)
	ret0, _ := ret[0].([]*v1.Reference)
	ret1, _ := ret[1].([]*v10.SLOData)
	ret2, _ := ret[2].([]error)
	return ret0, ret1, ret2
}

// MultiClusterClone indicates an expected call of MultiClusterClone.
func (mr *MockSLOStoreMockRecorder) MultiClusterClone(ctx, slo, toClusters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiClusterClone", reflect.TypeOf((*MockSLOStore)(nil).MultiClusterClone), ctx, slo, toClusters)
}

// Preview mocks base method.
func (m *MockSLOStore) Preview(ctx context.Context, s *v10.CreateSLORequest) (*v10.SLOPreviewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Preview", ctx, s)
	ret0, _ := ret[0].(*v10.SLOPreviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Preview indicates an expected call of Preview.
func (mr *MockSLOStoreMockRecorder) Preview(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preview", reflect.TypeOf((*MockSLOStore)(nil).Preview), ctx, s)
}

// Status mocks base method.
func (m *MockSLOStore) Status(ctx context.Context, existing *v10.SLOData) (*v10.SLOStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", ctx, existing)
	ret0, _ := ret[0].(*v10.SLOStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockSLOStoreMockRecorder) Status(ctx, existing interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockSLOStore)(nil).Status), ctx, existing)
}

// Update mocks base method.
func (m *MockSLOStore) Update(ctx context.Context, incoming, existing *v10.SLOData) (*v10.SLOData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, incoming, existing)
	ret0, _ := ret[0].(*v10.SLOData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSLOStoreMockRecorder) Update(ctx, incoming, existing interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSLOStore)(nil).Update), ctx, incoming, existing)
}
