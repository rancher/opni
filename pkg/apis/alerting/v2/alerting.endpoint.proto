syntax = "proto3";
option go_package = "github.com/rancher/opni/pkg/apis/alerting/v2";
import "github.com/rancher/opni/pkg/apis/core/v1/core.proto";
import "google/protobuf/timestamp.proto";
import "google/api/http.proto";
import "google/protobuf/duration.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
package alertingv2;

service AlertEndpointsV2{
    rpc CreateAlertEndpoint(AlertEndpoint) returns (core.Reference){
        option(google.api.http) = {
            post : "/configure",
            body : "*",
        };
    }

    rpc GetAlertEndpoint(core.Reference) returns (AlertEndpoint) {
        option (google.api.http) = {
            get : "/list/{id}"
        };
    }

    rpc ListAlertEndpoints(google.protobuf.Empty)
        returns (AlertEndpointList) {
        option (google.api.http) = {
            get : "/list"
        };
    }

    rpc UpdateAlertEndpoint(UpdateAlertEndpointRequest) returns (UpdateAlertEndpointResponse){
        option(google.api.http) = {
            put : "/configure",
            body : "*",
        };
    }

    rpc DeleteAlertEndpoint(DeleteAlertEndpointRequest) returns (DeleteAlertEndpointResponse){
        option(google.api.http) = {
            delete : "/configure",
        };
    }

    rpc TestAlertEndpoint(AlertEndpoint) returns (TestAlertEndpointResponse) {}

    rpc EphemeralDispatcher(EphemeralDispatcherRequest) returns (EphemeralDispatcherResponse){
        option(google.api.http) = {
            post : "/dispatch",
            body : "*",
        };
    }
}

service AlertEndpointsSyncV2{
    // ImportConfig
    rpc ImportConfig(google.protobuf.Empty) returns (google.protobuf.Empty) {
        option(google.api.http) = {
            post : "/import"
        };
    }

    // Downstream Syncs config
    rpc SyncConfig(google.protobuf.Empty) returns (google.protobuf.Empty);

    rpc GetFullConfig(google.protobuf.Empty) returns (google.protobuf.Empty){
        option(google.api.http) = {
            get : "/alertmanager/config"
        };
    }
}

// User defined endpoints
message AlertEndpoint{
    // readonly
    core.Reference id = 1;
    google.protobuf.Timestamp createdAt = 2;

    string name = 3;
    string description = 4;
    oneof endpoint {
        SlackEndpoint slack = 5;
        EmailEndpoint email = 6;
        PagerDutyEndpoint pagerDuty = 7;
    }
    optional AlertEndpointSpec defaultSpec = 8;
    optional AlertEndpointContents defaultContents = 9;
}

message EphemeralDispatcherRequest {
  google.protobuf.Duration ttl = 1;
  int64 numDispatches = 2;
  string prefix = 3;
  AlertEndpoint endpoint = 4;
  AlertEndpointContents details = 5;
}

message EphemeralDispatcherResponse{
//   TriggerAlertsRequest triggerAlertsRequest = 1;
}

message UpdateAlertEndpointRequest{
    AlertEndpoint endpoint = 1;
    bool forceUpdate = 2;
}
message UpdateAlertEndpointResponse{
    // AlertConditionList inUse = 1;
    bool forceUpdate = 2;
}

message DeleteAlertEndpointRequest{
    core.Reference id = 1;
    bool forceUpdate = 2;
}

message DeleteAlertEndpointResponse{
    // AlertConditionList inUse = 1;
    bool forceUpdate = 2;
}

message AlertEndpointList{
    repeated AlertEndpoint items = 1;
}

// contains info to be applied to the receiver configs
message AlertEndpointContents{
    string title = 1;
    string body = 2;
    optional bool sendResolved = 3;
}

// contains info to be applied to the routing configs
message AlertEndpointSpec{

}

// will contain details in a future iteration
message TestAlertEndpointResponse {}


message SlackEndpoint {
  string webhookUrl = 1;
  string channel = 2;
}

message EmailEndpoint {
  // email recipient
  string to = 1;
  // smtp server sender email
  optional string smtpFrom = 2;
  // smtp server host & port
  optional string smtpSmartHost = 3;
  // smtp server username
  optional string smtpAuthUsername = 4;
  // smtp server identity
  optional string smtpAuthIdentity = 5;
  // smtp server password
  optional string smtpAuthPassword = 6;
  // does SMTP require TSL : yes or no
  optional bool smtpRequireTLS = 7;
}

message PagerDutyEndpoint {
  // one of the following is required but not both
  string integrationKey = 1;
  string serviceKey = 2;
}

// endpoint discovered from synced configs
message SyncedEndpoint{
    string clusterId = 1;
    // endpoint is created based on all receivers 
    map<string, string> labelValuePairs = 3;
}

message RoutingRelationship{

}