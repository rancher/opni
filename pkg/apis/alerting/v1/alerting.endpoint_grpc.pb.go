// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/pkg/apis/alerting/v1/alerting.endpoint.proto

package v1

import (
	context "context"
	v1 "github.com/rancher/opni/pkg/apis/core/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlertEndpointsClient is the client API for AlertEndpoints service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertEndpointsClient interface {
	CreateAlertEndpoint(ctx context.Context, in *AlertEndpoint, opts ...grpc.CallOption) (*v1.Reference, error)
	GetAlertEndpoint(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*AlertEndpoint, error)
	// update the endpoint to opt in/out of opni notifications
	ToggleNotifications(ctx context.Context, in *ToggleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListAlertEndpoints(ctx context.Context, in *ListAlertEndpointsRequest, opts ...grpc.CallOption) (*AlertEndpointList, error)
	// when forceUpdate = false,
	// returns a list of conditions this would affect(if none, applies the update)
	// when forceUpdate = true,
	//
	//	updates everything without warning
	UpdateAlertEndpoint(ctx context.Context, in *UpdateAlertEndpointRequest, opts ...grpc.CallOption) (*InvolvedConditions, error)
	// when forceDelete = false,
	// returns a list of conditions this would affect(if none, applies the delete)
	// when forceDelete = true
	// deletes and applies the consequences of those changes
	// to everything without warning
	DeleteAlertEndpoint(ctx context.Context, in *DeleteAlertEndpointRequest, opts ...grpc.CallOption) (*InvolvedConditions, error)
	TestAlertEndpoint(ctx context.Context, in *TestAlertEndpointRequest, opts ...grpc.CallOption) (*TestAlertEndpointResponse, error)
}

type alertEndpointsClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertEndpointsClient(cc grpc.ClientConnInterface) AlertEndpointsClient {
	return &alertEndpointsClient{cc}
}

func (c *alertEndpointsClient) CreateAlertEndpoint(ctx context.Context, in *AlertEndpoint, opts ...grpc.CallOption) (*v1.Reference, error) {
	out := new(v1.Reference)
	err := c.cc.Invoke(ctx, "/alerting.AlertEndpoints/CreateAlertEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertEndpointsClient) GetAlertEndpoint(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*AlertEndpoint, error) {
	out := new(AlertEndpoint)
	err := c.cc.Invoke(ctx, "/alerting.AlertEndpoints/GetAlertEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertEndpointsClient) ToggleNotifications(ctx context.Context, in *ToggleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alerting.AlertEndpoints/ToggleNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertEndpointsClient) ListAlertEndpoints(ctx context.Context, in *ListAlertEndpointsRequest, opts ...grpc.CallOption) (*AlertEndpointList, error) {
	out := new(AlertEndpointList)
	err := c.cc.Invoke(ctx, "/alerting.AlertEndpoints/ListAlertEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertEndpointsClient) UpdateAlertEndpoint(ctx context.Context, in *UpdateAlertEndpointRequest, opts ...grpc.CallOption) (*InvolvedConditions, error) {
	out := new(InvolvedConditions)
	err := c.cc.Invoke(ctx, "/alerting.AlertEndpoints/UpdateAlertEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertEndpointsClient) DeleteAlertEndpoint(ctx context.Context, in *DeleteAlertEndpointRequest, opts ...grpc.CallOption) (*InvolvedConditions, error) {
	out := new(InvolvedConditions)
	err := c.cc.Invoke(ctx, "/alerting.AlertEndpoints/DeleteAlertEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertEndpointsClient) TestAlertEndpoint(ctx context.Context, in *TestAlertEndpointRequest, opts ...grpc.CallOption) (*TestAlertEndpointResponse, error) {
	out := new(TestAlertEndpointResponse)
	err := c.cc.Invoke(ctx, "/alerting.AlertEndpoints/TestAlertEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertEndpointsServer is the server API for AlertEndpoints service.
// All implementations must embed UnimplementedAlertEndpointsServer
// for forward compatibility
type AlertEndpointsServer interface {
	CreateAlertEndpoint(context.Context, *AlertEndpoint) (*v1.Reference, error)
	GetAlertEndpoint(context.Context, *v1.Reference) (*AlertEndpoint, error)
	// update the endpoint to opt in/out of opni notifications
	ToggleNotifications(context.Context, *ToggleRequest) (*emptypb.Empty, error)
	ListAlertEndpoints(context.Context, *ListAlertEndpointsRequest) (*AlertEndpointList, error)
	// when forceUpdate = false,
	// returns a list of conditions this would affect(if none, applies the update)
	// when forceUpdate = true,
	//
	//	updates everything without warning
	UpdateAlertEndpoint(context.Context, *UpdateAlertEndpointRequest) (*InvolvedConditions, error)
	// when forceDelete = false,
	// returns a list of conditions this would affect(if none, applies the delete)
	// when forceDelete = true
	// deletes and applies the consequences of those changes
	// to everything without warning
	DeleteAlertEndpoint(context.Context, *DeleteAlertEndpointRequest) (*InvolvedConditions, error)
	TestAlertEndpoint(context.Context, *TestAlertEndpointRequest) (*TestAlertEndpointResponse, error)
	mustEmbedUnimplementedAlertEndpointsServer()
}

// UnimplementedAlertEndpointsServer must be embedded to have forward compatible implementations.
type UnimplementedAlertEndpointsServer struct {
}

func (UnimplementedAlertEndpointsServer) CreateAlertEndpoint(context.Context, *AlertEndpoint) (*v1.Reference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlertEndpoint not implemented")
}
func (UnimplementedAlertEndpointsServer) GetAlertEndpoint(context.Context, *v1.Reference) (*AlertEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertEndpoint not implemented")
}
func (UnimplementedAlertEndpointsServer) ToggleNotifications(context.Context, *ToggleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleNotifications not implemented")
}
func (UnimplementedAlertEndpointsServer) ListAlertEndpoints(context.Context, *ListAlertEndpointsRequest) (*AlertEndpointList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlertEndpoints not implemented")
}
func (UnimplementedAlertEndpointsServer) UpdateAlertEndpoint(context.Context, *UpdateAlertEndpointRequest) (*InvolvedConditions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlertEndpoint not implemented")
}
func (UnimplementedAlertEndpointsServer) DeleteAlertEndpoint(context.Context, *DeleteAlertEndpointRequest) (*InvolvedConditions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlertEndpoint not implemented")
}
func (UnimplementedAlertEndpointsServer) TestAlertEndpoint(context.Context, *TestAlertEndpointRequest) (*TestAlertEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestAlertEndpoint not implemented")
}
func (UnimplementedAlertEndpointsServer) mustEmbedUnimplementedAlertEndpointsServer() {}

// UnsafeAlertEndpointsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertEndpointsServer will
// result in compilation errors.
type UnsafeAlertEndpointsServer interface {
	mustEmbedUnimplementedAlertEndpointsServer()
}

func RegisterAlertEndpointsServer(s grpc.ServiceRegistrar, srv AlertEndpointsServer) {
	s.RegisterService(&AlertEndpoints_ServiceDesc, srv)
}

func _AlertEndpoints_CreateAlertEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertEndpointsServer).CreateAlertEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.AlertEndpoints/CreateAlertEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertEndpointsServer).CreateAlertEndpoint(ctx, req.(*AlertEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertEndpoints_GetAlertEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertEndpointsServer).GetAlertEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.AlertEndpoints/GetAlertEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertEndpointsServer).GetAlertEndpoint(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertEndpoints_ToggleNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertEndpointsServer).ToggleNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.AlertEndpoints/ToggleNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertEndpointsServer).ToggleNotifications(ctx, req.(*ToggleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertEndpoints_ListAlertEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlertEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertEndpointsServer).ListAlertEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.AlertEndpoints/ListAlertEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertEndpointsServer).ListAlertEndpoints(ctx, req.(*ListAlertEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertEndpoints_UpdateAlertEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlertEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertEndpointsServer).UpdateAlertEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.AlertEndpoints/UpdateAlertEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertEndpointsServer).UpdateAlertEndpoint(ctx, req.(*UpdateAlertEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertEndpoints_DeleteAlertEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlertEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertEndpointsServer).DeleteAlertEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.AlertEndpoints/DeleteAlertEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertEndpointsServer).DeleteAlertEndpoint(ctx, req.(*DeleteAlertEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertEndpoints_TestAlertEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestAlertEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertEndpointsServer).TestAlertEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.AlertEndpoints/TestAlertEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertEndpointsServer).TestAlertEndpoint(ctx, req.(*TestAlertEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlertEndpoints_ServiceDesc is the grpc.ServiceDesc for AlertEndpoints service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertEndpoints_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alerting.AlertEndpoints",
	HandlerType: (*AlertEndpointsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAlertEndpoint",
			Handler:    _AlertEndpoints_CreateAlertEndpoint_Handler,
		},
		{
			MethodName: "GetAlertEndpoint",
			Handler:    _AlertEndpoints_GetAlertEndpoint_Handler,
		},
		{
			MethodName: "ToggleNotifications",
			Handler:    _AlertEndpoints_ToggleNotifications_Handler,
		},
		{
			MethodName: "ListAlertEndpoints",
			Handler:    _AlertEndpoints_ListAlertEndpoints_Handler,
		},
		{
			MethodName: "UpdateAlertEndpoint",
			Handler:    _AlertEndpoints_UpdateAlertEndpoint_Handler,
		},
		{
			MethodName: "DeleteAlertEndpoint",
			Handler:    _AlertEndpoints_DeleteAlertEndpoint_Handler,
		},
		{
			MethodName: "TestAlertEndpoint",
			Handler:    _AlertEndpoints_TestAlertEndpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/pkg/apis/alerting/v1/alerting.endpoint.proto",
}
