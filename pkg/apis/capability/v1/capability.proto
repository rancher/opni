syntax = "proto3";

package capability;

import "github.com/kralicky/totem/extensions.proto";
import "github.com/rancher/opni/internal/codegen/cli/cli.proto";
import "github.com/rancher/opni/pkg/apis/core/v1/core.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

option go_package      = "github.com/rancher/opni/pkg/apis/capability/v1";
option (cli.generator) = {
  generate: true
};

service Backend {
  // Returns info about the backend, including capability name.
  rpc Info(core.Reference) returns (Details);

  // Returns a list of capabilities available in the backend.
  rpc List(google.protobuf.Empty) returns (DetailsList);

  // Installs the capability on an agent.
  rpc Install(InstallRequest) returns (InstallResponse);

  // Returns common runtime config info for this capability from a specific agent.
  rpc Status(StatusRequest) returns (NodeCapabilityStatus);

  // Requests the backend to clean up any resources it owns and prepare
  // for uninstallation. This process is asynchronous. The status of the
  // operation can be queried using the UninstallStatus method, or canceled
  // using the CancelUninstall method.
  rpc Uninstall(UninstallRequest) returns (google.protobuf.Empty);

  // Gets the status of the uninstall task for the given cluster.
  rpc UninstallStatus(UninstallStatusRequest) returns (core.TaskStatus);

  // Cancels an uninstall task for the given cluster, if it is still pending.
  rpc CancelUninstall(CancelUninstallRequest) returns (google.protobuf.Empty);
}

service Node {
  rpc SyncNow(Filter) returns (google.protobuf.Empty) {
    option (totem.qos) = {
      replicationStrategy: Broadcast
    };
  }
}

service RBACManager {
  // Returns info about the manager, including capability name
  rpc Info(core.Reference) returns (Details);
  rpc List(google.protobuf.Empty) returns (DetailsList);
  rpc GetAvailablePermissions(google.protobuf.Empty) returns (core.AvailablePermissions);
  rpc GetRole(core.Reference) returns (core.Role);
  rpc CreateRole(core.Role) returns (google.protobuf.Empty);
  rpc UpdateRole(core.Role) returns (google.protobuf.Empty);
  rpc DeleteRole(core.Reference) returns (google.protobuf.Empty);
  rpc ListRoles(google.protobuf.Empty) returns (core.RoleList);
}

message Details {
  string          name             = 1;
  string          source           = 2;
  repeated string availableDrivers = 3;
  string          enabledDriver    = 4;
}

message Filter {
  repeated string capabilityNames = 1;
}

message InstallRequest {
  core.Reference capability     = 3;
  core.Reference agent          = 1;
  bool           ignoreWarnings = 2;
}

message StatusRequest {
  core.Reference capability = 3;
  core.Reference agent      = 1;
}

enum InstallResponseStatus {
  Unknown = 0;
  Success = 1;
  Warning = 2;
  Error   = 3;
}

message InstallResponse {
  InstallResponseStatus status  = 1;
  string                message = 2;
}

message UninstallRequest {
  core.Reference         capability = 3;
  core.Reference         agent      = 1;
  google.protobuf.Struct options    = 2 [(cli.flag).skip = true];
}

message InstallerTemplateResponse {
  string template = 1;
}

message NodeCapabilityStatus {
  bool                      enabled      = 1;
  google.protobuf.Timestamp lastSync     = 2;
  repeated string           conditions   = 3;
  core.Revision             lastRevision = 4;
}

message UninstallStatusRequest {
  core.Reference capability = 1;
  core.Reference agent      = 2;
}

message CancelUninstallRequest {
  core.Reference capability = 1;
  core.Reference agent      = 2;
}

message DetailsList {
  repeated Details items        = 1;
  core.Revision    lastRevision = 4;
}
