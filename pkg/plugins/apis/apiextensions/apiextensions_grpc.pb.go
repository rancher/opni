// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/pkg/plugins/apis/apiextensions/apiextensions.proto

package apiextensions

import (
	context "context"
	totem "github.com/kralicky/totem"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	grpc_health_v1 "google.golang.org/grpc/health/grpc_health_v1"
	status "google.golang.org/grpc/status"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ManagementAPIExtension_Descriptors_FullMethodName = "/apiextensions.ManagementAPIExtension/Descriptors"
	ManagementAPIExtension_Authorized_FullMethodName  = "/apiextensions.ManagementAPIExtension/Authorized"
	ManagementAPIExtension_CheckHealth_FullMethodName = "/apiextensions.ManagementAPIExtension/CheckHealth"
	ManagementAPIExtension_WatchHealth_FullMethodName = "/apiextensions.ManagementAPIExtension/WatchHealth"
)

// ManagementAPIExtensionClient is the client API for ManagementAPIExtension service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementAPIExtensionClient interface {
	Descriptors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceDescriptorProtoList, error)
	Authorized(ctx context.Context, in *AuthzRequest, opts ...grpc.CallOption) (*AuthzResponse, error)
	CheckHealth(ctx context.Context, in *grpc_health_v1.HealthCheckRequest, opts ...grpc.CallOption) (*grpc_health_v1.HealthCheckResponse, error)
	WatchHealth(ctx context.Context, in *grpc_health_v1.HealthCheckRequest, opts ...grpc.CallOption) (ManagementAPIExtension_WatchHealthClient, error)
}

type managementAPIExtensionClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementAPIExtensionClient(cc grpc.ClientConnInterface) ManagementAPIExtensionClient {
	return &managementAPIExtensionClient{cc}
}

func (c *managementAPIExtensionClient) Descriptors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceDescriptorProtoList, error) {
	out := new(ServiceDescriptorProtoList)
	err := c.cc.Invoke(ctx, ManagementAPIExtension_Descriptors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementAPIExtensionClient) Authorized(ctx context.Context, in *AuthzRequest, opts ...grpc.CallOption) (*AuthzResponse, error) {
	out := new(AuthzResponse)
	err := c.cc.Invoke(ctx, ManagementAPIExtension_Authorized_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementAPIExtensionClient) CheckHealth(ctx context.Context, in *grpc_health_v1.HealthCheckRequest, opts ...grpc.CallOption) (*grpc_health_v1.HealthCheckResponse, error) {
	out := new(grpc_health_v1.HealthCheckResponse)
	err := c.cc.Invoke(ctx, ManagementAPIExtension_CheckHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementAPIExtensionClient) WatchHealth(ctx context.Context, in *grpc_health_v1.HealthCheckRequest, opts ...grpc.CallOption) (ManagementAPIExtension_WatchHealthClient, error) {
	stream, err := c.cc.NewStream(ctx, &ManagementAPIExtension_ServiceDesc.Streams[0], ManagementAPIExtension_WatchHealth_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &managementAPIExtensionWatchHealthClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ManagementAPIExtension_WatchHealthClient interface {
	Recv() (*grpc_health_v1.HealthCheckResponse, error)
	grpc.ClientStream
}

type managementAPIExtensionWatchHealthClient struct {
	grpc.ClientStream
}

func (x *managementAPIExtensionWatchHealthClient) Recv() (*grpc_health_v1.HealthCheckResponse, error) {
	m := new(grpc_health_v1.HealthCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ManagementAPIExtensionServer is the server API for ManagementAPIExtension service.
// All implementations should embed UnimplementedManagementAPIExtensionServer
// for forward compatibility
type ManagementAPIExtensionServer interface {
	Descriptors(context.Context, *emptypb.Empty) (*ServiceDescriptorProtoList, error)
	Authorized(context.Context, *AuthzRequest) (*AuthzResponse, error)
	CheckHealth(context.Context, *grpc_health_v1.HealthCheckRequest) (*grpc_health_v1.HealthCheckResponse, error)
	WatchHealth(*grpc_health_v1.HealthCheckRequest, ManagementAPIExtension_WatchHealthServer) error
}

// UnimplementedManagementAPIExtensionServer should be embedded to have forward compatible implementations.
type UnimplementedManagementAPIExtensionServer struct {
}

func (UnimplementedManagementAPIExtensionServer) Descriptors(context.Context, *emptypb.Empty) (*ServiceDescriptorProtoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Descriptors not implemented")
}
func (UnimplementedManagementAPIExtensionServer) Authorized(context.Context, *AuthzRequest) (*AuthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorized not implemented")
}
func (UnimplementedManagementAPIExtensionServer) CheckHealth(context.Context, *grpc_health_v1.HealthCheckRequest) (*grpc_health_v1.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedManagementAPIExtensionServer) WatchHealth(*grpc_health_v1.HealthCheckRequest, ManagementAPIExtension_WatchHealthServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchHealth not implemented")
}

// UnsafeManagementAPIExtensionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementAPIExtensionServer will
// result in compilation errors.
type UnsafeManagementAPIExtensionServer interface {
	mustEmbedUnimplementedManagementAPIExtensionServer()
}

func RegisterManagementAPIExtensionServer(s grpc.ServiceRegistrar, srv ManagementAPIExtensionServer) {
	s.RegisterService(&ManagementAPIExtension_ServiceDesc, srv)
}

func _ManagementAPIExtension_Descriptors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementAPIExtensionServer).Descriptors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementAPIExtension_Descriptors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementAPIExtensionServer).Descriptors(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementAPIExtension_Authorized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementAPIExtensionServer).Authorized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementAPIExtension_Authorized_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementAPIExtensionServer).Authorized(ctx, req.(*AuthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementAPIExtension_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc_health_v1.HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementAPIExtensionServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementAPIExtension_CheckHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementAPIExtensionServer).CheckHealth(ctx, req.(*grpc_health_v1.HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementAPIExtension_WatchHealth_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(grpc_health_v1.HealthCheckRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagementAPIExtensionServer).WatchHealth(m, &managementAPIExtensionWatchHealthServer{stream})
}

type ManagementAPIExtension_WatchHealthServer interface {
	Send(*grpc_health_v1.HealthCheckResponse) error
	grpc.ServerStream
}

type managementAPIExtensionWatchHealthServer struct {
	grpc.ServerStream
}

func (x *managementAPIExtensionWatchHealthServer) Send(m *grpc_health_v1.HealthCheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ManagementAPIExtension_ServiceDesc is the grpc.ServiceDesc for ManagementAPIExtension service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagementAPIExtension_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apiextensions.ManagementAPIExtension",
	HandlerType: (*ManagementAPIExtensionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Descriptors",
			Handler:    _ManagementAPIExtension_Descriptors_Handler,
		},
		{
			MethodName: "Authorized",
			Handler:    _ManagementAPIExtension_Authorized_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _ManagementAPIExtension_CheckHealth_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchHealth",
			Handler:       _ManagementAPIExtension_WatchHealth_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/rancher/opni/pkg/plugins/apis/apiextensions/apiextensions.proto",
}

const (
	HTTPAPIExtension_Configure_FullMethodName = "/apiextensions.HTTPAPIExtension/Configure"
)

// HTTPAPIExtensionClient is the client API for HTTPAPIExtension service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HTTPAPIExtensionClient interface {
	Configure(ctx context.Context, in *CertConfig, opts ...grpc.CallOption) (*HTTPAPIExtensionConfig, error)
}

type hTTPAPIExtensionClient struct {
	cc grpc.ClientConnInterface
}

func NewHTTPAPIExtensionClient(cc grpc.ClientConnInterface) HTTPAPIExtensionClient {
	return &hTTPAPIExtensionClient{cc}
}

func (c *hTTPAPIExtensionClient) Configure(ctx context.Context, in *CertConfig, opts ...grpc.CallOption) (*HTTPAPIExtensionConfig, error) {
	out := new(HTTPAPIExtensionConfig)
	err := c.cc.Invoke(ctx, HTTPAPIExtension_Configure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HTTPAPIExtensionServer is the server API for HTTPAPIExtension service.
// All implementations should embed UnimplementedHTTPAPIExtensionServer
// for forward compatibility
type HTTPAPIExtensionServer interface {
	Configure(context.Context, *CertConfig) (*HTTPAPIExtensionConfig, error)
}

// UnimplementedHTTPAPIExtensionServer should be embedded to have forward compatible implementations.
type UnimplementedHTTPAPIExtensionServer struct {
}

func (UnimplementedHTTPAPIExtensionServer) Configure(context.Context, *CertConfig) (*HTTPAPIExtensionConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}

// UnsafeHTTPAPIExtensionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HTTPAPIExtensionServer will
// result in compilation errors.
type UnsafeHTTPAPIExtensionServer interface {
	mustEmbedUnimplementedHTTPAPIExtensionServer()
}

func RegisterHTTPAPIExtensionServer(s grpc.ServiceRegistrar, srv HTTPAPIExtensionServer) {
	s.RegisterService(&HTTPAPIExtension_ServiceDesc, srv)
}

func _HTTPAPIExtension_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPAPIExtensionServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HTTPAPIExtension_Configure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPAPIExtensionServer).Configure(ctx, req.(*CertConfig))
	}
	return interceptor(ctx, in, info, handler)
}

// HTTPAPIExtension_ServiceDesc is the grpc.ServiceDesc for HTTPAPIExtension service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HTTPAPIExtension_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apiextensions.HTTPAPIExtension",
	HandlerType: (*HTTPAPIExtensionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configure",
			Handler:    _HTTPAPIExtension_Configure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/pkg/plugins/apis/apiextensions/apiextensions.proto",
}

const (
	StreamAPIExtension_ConnectInternal_FullMethodName = "/apiextensions.StreamAPIExtension/ConnectInternal"
)

// StreamAPIExtensionClient is the client API for StreamAPIExtension service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamAPIExtensionClient interface {
	ConnectInternal(ctx context.Context, opts ...grpc.CallOption) (StreamAPIExtension_ConnectInternalClient, error)
}

type streamAPIExtensionClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamAPIExtensionClient(cc grpc.ClientConnInterface) StreamAPIExtensionClient {
	return &streamAPIExtensionClient{cc}
}

func (c *streamAPIExtensionClient) ConnectInternal(ctx context.Context, opts ...grpc.CallOption) (StreamAPIExtension_ConnectInternalClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamAPIExtension_ServiceDesc.Streams[0], StreamAPIExtension_ConnectInternal_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamAPIExtensionConnectInternalClient{stream}
	return x, nil
}

type StreamAPIExtension_ConnectInternalClient interface {
	Send(*totem.RPC) error
	Recv() (*totem.RPC, error)
	grpc.ClientStream
}

type streamAPIExtensionConnectInternalClient struct {
	grpc.ClientStream
}

func (x *streamAPIExtensionConnectInternalClient) Send(m *totem.RPC) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamAPIExtensionConnectInternalClient) Recv() (*totem.RPC, error) {
	m := new(totem.RPC)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamAPIExtensionServer is the server API for StreamAPIExtension service.
// All implementations should embed UnimplementedStreamAPIExtensionServer
// for forward compatibility
type StreamAPIExtensionServer interface {
	ConnectInternal(StreamAPIExtension_ConnectInternalServer) error
}

// UnimplementedStreamAPIExtensionServer should be embedded to have forward compatible implementations.
type UnimplementedStreamAPIExtensionServer struct {
}

func (UnimplementedStreamAPIExtensionServer) ConnectInternal(StreamAPIExtension_ConnectInternalServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectInternal not implemented")
}

// UnsafeStreamAPIExtensionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamAPIExtensionServer will
// result in compilation errors.
type UnsafeStreamAPIExtensionServer interface {
	mustEmbedUnimplementedStreamAPIExtensionServer()
}

func RegisterStreamAPIExtensionServer(s grpc.ServiceRegistrar, srv StreamAPIExtensionServer) {
	s.RegisterService(&StreamAPIExtension_ServiceDesc, srv)
}

func _StreamAPIExtension_ConnectInternal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamAPIExtensionServer).ConnectInternal(&streamAPIExtensionConnectInternalServer{stream})
}

type StreamAPIExtension_ConnectInternalServer interface {
	Send(*totem.RPC) error
	Recv() (*totem.RPC, error)
	grpc.ServerStream
}

type streamAPIExtensionConnectInternalServer struct {
	grpc.ServerStream
}

func (x *streamAPIExtensionConnectInternalServer) Send(m *totem.RPC) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamAPIExtensionConnectInternalServer) Recv() (*totem.RPC, error) {
	m := new(totem.RPC)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamAPIExtension_ServiceDesc is the grpc.ServiceDesc for StreamAPIExtension service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamAPIExtension_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apiextensions.StreamAPIExtension",
	HandlerType: (*StreamAPIExtensionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectInternal",
			Handler:       _StreamAPIExtension_ConnectInternal_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/rancher/opni/pkg/plugins/apis/apiextensions/apiextensions.proto",
}

const (
	UnaryAPIExtension_UnaryDescriptor_FullMethodName = "/apiextensions.UnaryAPIExtension/UnaryDescriptor"
)

// UnaryAPIExtensionClient is the client API for UnaryAPIExtension service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnaryAPIExtensionClient interface {
	UnaryDescriptor(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*descriptorpb.ServiceDescriptorProto, error)
}

type unaryAPIExtensionClient struct {
	cc grpc.ClientConnInterface
}

func NewUnaryAPIExtensionClient(cc grpc.ClientConnInterface) UnaryAPIExtensionClient {
	return &unaryAPIExtensionClient{cc}
}

func (c *unaryAPIExtensionClient) UnaryDescriptor(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*descriptorpb.ServiceDescriptorProto, error) {
	out := new(descriptorpb.ServiceDescriptorProto)
	err := c.cc.Invoke(ctx, UnaryAPIExtension_UnaryDescriptor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnaryAPIExtensionServer is the server API for UnaryAPIExtension service.
// All implementations should embed UnimplementedUnaryAPIExtensionServer
// for forward compatibility
type UnaryAPIExtensionServer interface {
	UnaryDescriptor(context.Context, *emptypb.Empty) (*descriptorpb.ServiceDescriptorProto, error)
}

// UnimplementedUnaryAPIExtensionServer should be embedded to have forward compatible implementations.
type UnimplementedUnaryAPIExtensionServer struct {
}

func (UnimplementedUnaryAPIExtensionServer) UnaryDescriptor(context.Context, *emptypb.Empty) (*descriptorpb.ServiceDescriptorProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryDescriptor not implemented")
}

// UnsafeUnaryAPIExtensionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnaryAPIExtensionServer will
// result in compilation errors.
type UnsafeUnaryAPIExtensionServer interface {
	mustEmbedUnimplementedUnaryAPIExtensionServer()
}

func RegisterUnaryAPIExtensionServer(s grpc.ServiceRegistrar, srv UnaryAPIExtensionServer) {
	s.RegisterService(&UnaryAPIExtension_ServiceDesc, srv)
}

func _UnaryAPIExtension_UnaryDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnaryAPIExtensionServer).UnaryDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnaryAPIExtension_UnaryDescriptor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnaryAPIExtensionServer).UnaryDescriptor(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// UnaryAPIExtension_ServiceDesc is the grpc.ServiceDesc for UnaryAPIExtension service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UnaryAPIExtension_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apiextensions.UnaryAPIExtension",
	HandlerType: (*UnaryAPIExtensionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryDescriptor",
			Handler:    _UnaryAPIExtension_UnaryDescriptor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/pkg/plugins/apis/apiextensions/apiextensions.proto",
}
