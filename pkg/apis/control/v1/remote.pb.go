// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v1.0.0
// source: github.com/rancher/opni/pkg/apis/control/v1/remote.proto

package v1

import (
	_ "github.com/kralicky/totem"
	v1 "github.com/rancher/opni/pkg/apis/core/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PatchOp int32

const (
	// revisions match
	PatchOp_NONE PatchOp = 0
	// same plugin exists on both
	PatchOp_UPDATE PatchOp = 1
	// missing plugin on agent
	PatchOp_CREATE PatchOp = 2
	// outdate plugin on agent, with no version on the gateway
	PatchOp_REMOVE PatchOp = 3
)

// Enum value maps for PatchOp.
var (
	PatchOp_name = map[int32]string{
		0: "NONE",
		1: "UPDATE",
		2: "CREATE",
		3: "REMOVE",
	}
	PatchOp_value = map[string]int32{
		"NONE":   0,
		"UPDATE": 1,
		"CREATE": 2,
		"REMOVE": 3,
	}
)

func (x PatchOp) Enum() *PatchOp {
	p := new(PatchOp)
	*p = x
	return p
}

func (x PatchOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatchOp) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_enumTypes[0].Descriptor()
}

func (PatchOp) Type() protoreflect.EnumType {
	return &file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_enumTypes[0]
}

func (x PatchOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatchOp.Descriptor instead.
func (PatchOp) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_rawDescGZIP(), []int{0}
}

type CompressedManifests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items map[string]*ManifestData `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CompressedManifests) Reset() {
	*x = CompressedManifests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompressedManifests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressedManifests) ProtoMessage() {}

func (x *CompressedManifests) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressedManifests.ProtoReflect.Descriptor instead.
func (*CompressedManifests) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_rawDescGZIP(), []int{0}
}

func (x *CompressedManifests) GetItems() map[string]*ManifestData {
	if x != nil {
		return x.Items
	}
	return nil
}

type ManifestMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash     string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Path     string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Revision string `protobuf:"bytes,3,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *ManifestMetadata) Reset() {
	*x = ManifestMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManifestMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManifestMetadata) ProtoMessage() {}

func (x *ManifestMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManifestMetadata.ProtoReflect.Descriptor instead.
func (*ManifestMetadata) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_rawDescGZIP(), []int{1}
}

func (x *ManifestMetadata) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ManifestMetadata) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ManifestMetadata) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

type ManifestMetadataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CompressionMethod reqCompr = 1;
	Items map[string]*ManifestMetadata `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ManifestMetadataList) Reset() {
	*x = ManifestMetadataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManifestMetadataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManifestMetadataList) ProtoMessage() {}

func (x *ManifestMetadataList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManifestMetadataList.ProtoReflect.Descriptor instead.
func (*ManifestMetadataList) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_rawDescGZIP(), []int{2}
}

func (x *ManifestMetadataList) GetItems() map[string]*ManifestMetadata {
	if x != nil {
		return x.Items
	}
	return nil
}

type ManifestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []byte  `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	OpPath  string  `protobuf:"bytes,2,opt,name=opPath,proto3" json:"opPath,omitempty"`
	Op      PatchOp `protobuf:"varint,3,opt,name=op,proto3,enum=control.PatchOp" json:"op,omitempty"`
	IsPatch bool    `protobuf:"varint,4,opt,name=isPatch,proto3" json:"isPatch,omitempty"`
	OldHash string  `protobuf:"bytes,5,opt,name=oldHash,proto3" json:"oldHash,omitempty"`
	NewHash string  `protobuf:"bytes,6,opt,name=newHash,proto3" json:"newHash,omitempty"`
	// If the server wants the agent to compute a patch and upload it, this will be true.
	RequestPatchUpload bool `protobuf:"varint,7,opt,name=requestPatchUpload,proto3" json:"requestPatchUpload,omitempty"`
}

func (x *ManifestData) Reset() {
	*x = ManifestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManifestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManifestData) ProtoMessage() {}

func (x *ManifestData) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManifestData.ProtoReflect.Descriptor instead.
func (*ManifestData) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_rawDescGZIP(), []int{3}
}

func (x *ManifestData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ManifestData) GetOpPath() string {
	if x != nil {
		return x.OpPath
	}
	return ""
}

func (x *ManifestData) GetOp() PatchOp {
	if x != nil {
		return x.Op
	}
	return PatchOp_NONE
}

func (x *ManifestData) GetIsPatch() bool {
	if x != nil {
		return x.IsPatch
	}
	return false
}

func (x *ManifestData) GetOldHash() string {
	if x != nil {
		return x.OldHash
	}
	return ""
}

func (x *ManifestData) GetNewHash() string {
	if x != nil {
		return x.NewHash
	}
	return ""
}

func (x *ManifestData) GetRequestPatchUpload() bool {
	if x != nil {
		return x.RequestPatchUpload
	}
	return false
}

type ManifestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// !!! plugin name -> bytes, not plugin path -> bytes
	Manifests map[string]*CompressedManifest `protobuf:"bytes,1,rep,name=manifests,proto3" json:"manifests,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ManifestList) Reset() {
	*x = ManifestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManifestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManifestList) ProtoMessage() {}

func (x *ManifestList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManifestList.ProtoReflect.Descriptor instead.
func (*ManifestList) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_rawDescGZIP(), []int{4}
}

func (x *ManifestList) GetManifests() map[string]*CompressedManifest {
	if x != nil {
		return x.Manifests
	}
	return nil
}

type CompressedManifest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttachedMetadata *string `protobuf:"bytes,1,opt,name=attachedMetadata,proto3,oneof" json:"attachedMetadata,omitempty"`
	// CompressionMethod comprMethod = 2;
	DataAndInfo *ManifestData `protobuf:"bytes,3,opt,name=dataAndInfo,proto3" json:"dataAndInfo,omitempty"`
}

func (x *CompressedManifest) Reset() {
	*x = CompressedManifest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompressedManifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressedManifest) ProtoMessage() {}

func (x *CompressedManifest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressedManifest.ProtoReflect.Descriptor instead.
func (*CompressedManifest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_rawDescGZIP(), []int{5}
}

func (x *CompressedManifest) GetAttachedMetadata() string {
	if x != nil && x.AttachedMetadata != nil {
		return *x.AttachedMetadata
	}
	return ""
}

func (x *CompressedManifest) GetDataAndInfo() *ManifestData {
	if x != nil {
		return x.DataAndInfo
	}
	return nil
}

type PatchSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PluginName string `protobuf:"bytes,1,opt,name=pluginName,proto3" json:"pluginName,omitempty"`
	OldHash    string `protobuf:"bytes,2,opt,name=oldHash,proto3" json:"oldHash,omitempty"`
	NewHash    string `protobuf:"bytes,3,opt,name=newHash,proto3" json:"newHash,omitempty"`
	Patch      []byte `protobuf:"bytes,4,opt,name=patch,proto3" json:"patch,omitempty"`
}

func (x *PatchSpec) Reset() {
	*x = PatchSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchSpec) ProtoMessage() {}

func (x *PatchSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchSpec.ProtoReflect.Descriptor instead.
func (*PatchSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_rawDescGZIP(), []int{6}
}

func (x *PatchSpec) GetPluginName() string {
	if x != nil {
		return x.PluginName
	}
	return ""
}

func (x *PatchSpec) GetOldHash() string {
	if x != nil {
		return x.OldHash
	}
	return ""
}

func (x *PatchSpec) GetNewHash() string {
	if x != nil {
		return x.NewHash
	}
	return ""
}

func (x *PatchSpec) GetPatch() []byte {
	if x != nil {
		return x.Patch
	}
	return nil
}

var File_github_com_rancher_opni_pkg_apis_control_v1_remote_proto protoreflect.FileDescriptor

var file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_rawDesc = []byte{
	0x0a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6b, 0x72, 0x61, 0x6c, 0x69, 0x63, 0x6b, 0x79, 0x2f, 0x74, 0x6f, 0x74, 0x65, 0x6d,
	0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa5, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x4f, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x56, 0x0a, 0x10, 0x4d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xab, 0x01, 0x0a, 0x14, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x53, 0x0a, 0x0a, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xda, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x02,
	0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x12,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xad, 0x01, 0x0a,
	0x0c, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x73, 0x1a, 0x59, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x93, 0x01, 0x0a,
	0x12, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x41, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x75, 0x0a, 0x09, 0x50, 0x61, 0x74, 0x63, 0x68, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x6c, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x77,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2a, 0x37, 0x0a, 0x07, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x70, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45,
	0x10, 0x03, 0x32, 0x3b, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x32,
	0x49, 0x0a, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x12, 0x38, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x32, 0x46, 0x0a, 0x0e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x0c, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x32, 0x54, 0x0a, 0x15, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x13, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xeb, 0x01, 0x0a, 0x0e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x19, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x4f, 0x72, 0x4b, 0x6e,
	0x6f, 0x77, 0x6e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x53, 0x70, 0x65, 0x63, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e,
	0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_rawDescOnce sync.Once
	file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_rawDescData = file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_rawDesc
)

func file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_rawDescGZIP() []byte {
	file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_rawDescOnce.Do(func() {
		file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_rawDescData)
	})
	return file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_rawDescData
}

var file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_goTypes = []interface{}{
	(PatchOp)(0),                 // 0: control.PatchOp
	(*CompressedManifests)(nil),  // 1: control.CompressedManifests
	(*ManifestMetadata)(nil),     // 2: control.ManifestMetadata
	(*ManifestMetadataList)(nil), // 3: control.ManifestMetadataList
	(*ManifestData)(nil),         // 4: control.ManifestData
	(*ManifestList)(nil),         // 5: control.ManifestList
	(*CompressedManifest)(nil),   // 6: control.CompressedManifest
	(*PatchSpec)(nil),            // 7: control.PatchSpec
	nil,                          // 8: control.CompressedManifests.ItemsEntry
	nil,                          // 9: control.ManifestMetadataList.ItemsEntry
	nil,                          // 10: control.ManifestList.ManifestsEntry
	(*emptypb.Empty)(nil),        // 11: google.protobuf.Empty
	(*v1.Health)(nil),            // 12: core.Health
	(*v1.BackendHealth)(nil),     // 13: core.BackendHealth
}
var file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_depIdxs = []int32{
	8,  // 0: control.CompressedManifests.items:type_name -> control.CompressedManifests.ItemsEntry
	9,  // 1: control.ManifestMetadataList.items:type_name -> control.ManifestMetadataList.ItemsEntry
	0,  // 2: control.ManifestData.op:type_name -> control.PatchOp
	10, // 3: control.ManifestList.manifests:type_name -> control.ManifestList.ManifestsEntry
	4,  // 4: control.CompressedManifest.dataAndInfo:type_name -> control.ManifestData
	4,  // 5: control.CompressedManifests.ItemsEntry.value:type_name -> control.ManifestData
	2,  // 6: control.ManifestMetadataList.ItemsEntry.value:type_name -> control.ManifestMetadata
	6,  // 7: control.ManifestList.ManifestsEntry.value:type_name -> control.CompressedManifest
	11, // 8: control.Health.GetHealth:input_type -> google.protobuf.Empty
	11, // 9: control.BackendHealth.GetHealth:input_type -> google.protobuf.Empty
	12, // 10: control.HealthListener.UpdateHealth:input_type -> core.Health
	13, // 11: control.BackendHealthListener.UpdateHealth:input_type -> core.BackendHealth
	3,  // 12: control.PluginManifest.SendManifestsOrKnownPatch:input_type -> control.ManifestMetadataList
	11, // 13: control.PluginManifest.GetPluginManifests:input_type -> google.protobuf.Empty
	7,  // 14: control.PluginManifest.UploadPatch:input_type -> control.PatchSpec
	12, // 15: control.Health.GetHealth:output_type -> core.Health
	13, // 16: control.BackendHealth.GetHealth:output_type -> core.BackendHealth
	11, // 17: control.HealthListener.UpdateHealth:output_type -> google.protobuf.Empty
	11, // 18: control.BackendHealthListener.UpdateHealth:output_type -> google.protobuf.Empty
	5,  // 19: control.PluginManifest.SendManifestsOrKnownPatch:output_type -> control.ManifestList
	3,  // 20: control.PluginManifest.GetPluginManifests:output_type -> control.ManifestMetadataList
	11, // 21: control.PluginManifest.UploadPatch:output_type -> google.protobuf.Empty
	15, // [15:22] is the sub-list for method output_type
	8,  // [8:15] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_init() }
func file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_init() {
	if File_github_com_rancher_opni_pkg_apis_control_v1_remote_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompressedManifests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManifestMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManifestMetadataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManifestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManifestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompressedManifest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_goTypes,
		DependencyIndexes: file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_depIdxs,
		EnumInfos:         file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_enumTypes,
		MessageInfos:      file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_msgTypes,
	}.Build()
	File_github_com_rancher_opni_pkg_apis_control_v1_remote_proto = out.File
	file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_rawDesc = nil
	file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_goTypes = nil
	file_github_com_rancher_opni_pkg_apis_control_v1_remote_proto_depIdxs = nil
}
