// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/pkg/test/testgrpc/cached.proto

package testgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SimpleService_Increment_FullMethodName                       = "/testgrpc.cached.SimpleService/Increment"
	SimpleService_GetValue_FullMethodName                        = "/testgrpc.cached.SimpleService/GetValue"
	SimpleService_GetValueWithForcedClientCaching_FullMethodName = "/testgrpc.cached.SimpleService/GetValueWithForcedClientCaching"
)

// SimpleServiceClient is the client API for SimpleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimpleServiceClient interface {
	Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetValue(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Value, error)
	GetValueWithForcedClientCaching(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Value, error)
}

type simpleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleServiceClient(cc grpc.ClientConnInterface) SimpleServiceClient {
	return &simpleServiceClient{cc}
}

func (c *simpleServiceClient) Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SimpleService_Increment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) GetValue(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, SimpleService_GetValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) GetValueWithForcedClientCaching(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, SimpleService_GetValueWithForcedClientCaching_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleServiceServer is the server API for SimpleService service.
// All implementations should embed UnimplementedSimpleServiceServer
// for forward compatibility
type SimpleServiceServer interface {
	Increment(context.Context, *IncrementRequest) (*emptypb.Empty, error)
	GetValue(context.Context, *emptypb.Empty) (*Value, error)
	GetValueWithForcedClientCaching(context.Context, *emptypb.Empty) (*Value, error)
}

// UnimplementedSimpleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSimpleServiceServer struct {
}

func (UnimplementedSimpleServiceServer) Increment(context.Context, *IncrementRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Increment not implemented")
}
func (UnimplementedSimpleServiceServer) GetValue(context.Context, *emptypb.Empty) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedSimpleServiceServer) GetValueWithForcedClientCaching(context.Context, *emptypb.Empty) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValueWithForcedClientCaching not implemented")
}

// UnsafeSimpleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimpleServiceServer will
// result in compilation errors.
type UnsafeSimpleServiceServer interface {
	mustEmbedUnimplementedSimpleServiceServer()
}

func RegisterSimpleServiceServer(s grpc.ServiceRegistrar, srv SimpleServiceServer) {
	s.RegisterService(&SimpleService_ServiceDesc, srv)
}

func _SimpleService_Increment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServiceServer).Increment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimpleService_Increment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServiceServer).Increment(ctx, req.(*IncrementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleService_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServiceServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimpleService_GetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServiceServer).GetValue(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleService_GetValueWithForcedClientCaching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServiceServer).GetValueWithForcedClientCaching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimpleService_GetValueWithForcedClientCaching_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServiceServer).GetValueWithForcedClientCaching(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SimpleService_ServiceDesc is the grpc.ServiceDesc for SimpleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimpleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testgrpc.cached.SimpleService",
	HandlerType: (*SimpleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Increment",
			Handler:    _SimpleService_Increment_Handler,
		},
		{
			MethodName: "GetValue",
			Handler:    _SimpleService_GetValue_Handler,
		},
		{
			MethodName: "GetValueWithForcedClientCaching",
			Handler:    _SimpleService_GetValueWithForcedClientCaching_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/pkg/test/testgrpc/cached.proto",
}

const (
	ObjectService_IncrementObject_FullMethodName = "/testgrpc.cached.ObjectService/IncrementObject"
	ObjectService_GetObjectValue_FullMethodName  = "/testgrpc.cached.ObjectService/GetObjectValue"
	ObjectService_List_FullMethodName            = "/testgrpc.cached.ObjectService/List"
)

// ObjectServiceClient is the client API for ObjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectServiceClient interface {
	// Adds the value to the an arbitrary server-side object.
	// If the object doesn't exist create a new one and it set it to the value.
	IncrementObject(ctx context.Context, in *IncrementObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetObjectValue(ctx context.Context, in *ObjectReference, opts ...grpc.CallOption) (*Value, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ObjectList, error)
}

type objectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectServiceClient(cc grpc.ClientConnInterface) ObjectServiceClient {
	return &objectServiceClient{cc}
}

func (c *objectServiceClient) IncrementObject(ctx context.Context, in *IncrementObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ObjectService_IncrementObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) GetObjectValue(ctx context.Context, in *ObjectReference, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, ObjectService_GetObjectValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ObjectList, error) {
	out := new(ObjectList)
	err := c.cc.Invoke(ctx, ObjectService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectServiceServer is the server API for ObjectService service.
// All implementations should embed UnimplementedObjectServiceServer
// for forward compatibility
type ObjectServiceServer interface {
	// Adds the value to the an arbitrary server-side object.
	// If the object doesn't exist create a new one and it set it to the value.
	IncrementObject(context.Context, *IncrementObjectRequest) (*emptypb.Empty, error)
	GetObjectValue(context.Context, *ObjectReference) (*Value, error)
	List(context.Context, *emptypb.Empty) (*ObjectList, error)
}

// UnimplementedObjectServiceServer should be embedded to have forward compatible implementations.
type UnimplementedObjectServiceServer struct {
}

func (UnimplementedObjectServiceServer) IncrementObject(context.Context, *IncrementObjectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementObject not implemented")
}
func (UnimplementedObjectServiceServer) GetObjectValue(context.Context, *ObjectReference) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectValue not implemented")
}
func (UnimplementedObjectServiceServer) List(context.Context, *emptypb.Empty) (*ObjectList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeObjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectServiceServer will
// result in compilation errors.
type UnsafeObjectServiceServer interface {
	mustEmbedUnimplementedObjectServiceServer()
}

func RegisterObjectServiceServer(s grpc.ServiceRegistrar, srv ObjectServiceServer) {
	s.RegisterService(&ObjectService_ServiceDesc, srv)
}

func _ObjectService_IncrementObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).IncrementObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_IncrementObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).IncrementObject(ctx, req.(*IncrementObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_GetObjectValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectReference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetObjectValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_GetObjectValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetObjectValue(ctx, req.(*ObjectReference))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjectService_ServiceDesc is the grpc.ServiceDesc for ObjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testgrpc.cached.ObjectService",
	HandlerType: (*ObjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IncrementObject",
			Handler:    _ObjectService_IncrementObject_Handler,
		},
		{
			MethodName: "GetObjectValue",
			Handler:    _ObjectService_GetObjectValue_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ObjectService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/pkg/test/testgrpc/cached.proto",
}

const (
	AggregatorService_IncrementAll_FullMethodName            = "/testgrpc.cached.AggregatorService/IncrementAll"
	AggregatorService_GetAll_FullMethodName                  = "/testgrpc.cached.AggregatorService/GetAll"
	AggregatorService_GetAllWithNestedCaching_FullMethodName = "/testgrpc.cached.AggregatorService/GetAllWithNestedCaching"
)

// AggregatorServiceClient is the client API for AggregatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AggregatorServiceClient interface {
	// Increments the global value and all object values by 1,
	// by making nested RPC calls.
	// returns an aggregate value of all other values.
	IncrementAll(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// returns sum of all values
	GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Value, error)
	GetAllWithNestedCaching(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Value, error)
}

type aggregatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregatorServiceClient(cc grpc.ClientConnInterface) AggregatorServiceClient {
	return &aggregatorServiceClient{cc}
}

func (c *aggregatorServiceClient) IncrementAll(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AggregatorService_IncrementAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorServiceClient) GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, AggregatorService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorServiceClient) GetAllWithNestedCaching(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, AggregatorService_GetAllWithNestedCaching_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregatorServiceServer is the server API for AggregatorService service.
// All implementations should embed UnimplementedAggregatorServiceServer
// for forward compatibility
type AggregatorServiceServer interface {
	// Increments the global value and all object values by 1,
	// by making nested RPC calls.
	// returns an aggregate value of all other values.
	IncrementAll(context.Context, *IncrementRequest) (*emptypb.Empty, error)
	// returns sum of all values
	GetAll(context.Context, *emptypb.Empty) (*Value, error)
	GetAllWithNestedCaching(context.Context, *emptypb.Empty) (*Value, error)
}

// UnimplementedAggregatorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAggregatorServiceServer struct {
}

func (UnimplementedAggregatorServiceServer) IncrementAll(context.Context, *IncrementRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementAll not implemented")
}
func (UnimplementedAggregatorServiceServer) GetAll(context.Context, *emptypb.Empty) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedAggregatorServiceServer) GetAllWithNestedCaching(context.Context, *emptypb.Empty) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllWithNestedCaching not implemented")
}

// UnsafeAggregatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregatorServiceServer will
// result in compilation errors.
type UnsafeAggregatorServiceServer interface {
	mustEmbedUnimplementedAggregatorServiceServer()
}

func RegisterAggregatorServiceServer(s grpc.ServiceRegistrar, srv AggregatorServiceServer) {
	s.RegisterService(&AggregatorService_ServiceDesc, srv)
}

func _AggregatorService_IncrementAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServiceServer).IncrementAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggregatorService_IncrementAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServiceServer).IncrementAll(ctx, req.(*IncrementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregatorService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggregatorService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServiceServer).GetAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregatorService_GetAllWithNestedCaching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServiceServer).GetAllWithNestedCaching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggregatorService_GetAllWithNestedCaching_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServiceServer).GetAllWithNestedCaching(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AggregatorService_ServiceDesc is the grpc.ServiceDesc for AggregatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AggregatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testgrpc.cached.AggregatorService",
	HandlerType: (*AggregatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IncrementAll",
			Handler:    _AggregatorService_IncrementAll_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _AggregatorService_GetAll_Handler,
		},
		{
			MethodName: "GetAllWithNestedCaching",
			Handler:    _AggregatorService_GetAllWithNestedCaching_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/pkg/test/testgrpc/cached.proto",
}
