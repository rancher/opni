// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/plugins/pkg/apis/server/log/alerting.log.proto

package log

import (
	context "context"
	v1 "github.com/rancher/opni/pkg/apis/core/v1"
	common "github.com/rancher/opni/plugins/alerting/pkg/apis/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlertingLogsClient is the client API for AlertingLogs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertingLogsClient interface {
	// alerting internal use only
	CreateAlertLog(ctx context.Context, in *v1.AlertLog, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListAlertLogs(ctx context.Context, in *common.ListAlertLogRequest, opts ...grpc.CallOption) (*common.InformativeAlertLogList, error)
}

type alertingLogsClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertingLogsClient(cc grpc.ClientConnInterface) AlertingLogsClient {
	return &alertingLogsClient{cc}
}

func (c *alertingLogsClient) CreateAlertLog(ctx context.Context, in *v1.AlertLog, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alerting.log.AlertingLogs/CreateAlertLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingLogsClient) ListAlertLogs(ctx context.Context, in *common.ListAlertLogRequest, opts ...grpc.CallOption) (*common.InformativeAlertLogList, error) {
	out := new(common.InformativeAlertLogList)
	err := c.cc.Invoke(ctx, "/alerting.log.AlertingLogs/ListAlertLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertingLogsServer is the server API for AlertingLogs service.
// All implementations must embed UnimplementedAlertingLogsServer
// for forward compatibility
type AlertingLogsServer interface {
	// alerting internal use only
	CreateAlertLog(context.Context, *v1.AlertLog) (*emptypb.Empty, error)
	ListAlertLogs(context.Context, *common.ListAlertLogRequest) (*common.InformativeAlertLogList, error)
	mustEmbedUnimplementedAlertingLogsServer()
}

// UnimplementedAlertingLogsServer must be embedded to have forward compatible implementations.
type UnimplementedAlertingLogsServer struct {
}

func (UnimplementedAlertingLogsServer) CreateAlertLog(context.Context, *v1.AlertLog) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlertLog not implemented")
}
func (UnimplementedAlertingLogsServer) ListAlertLogs(context.Context, *common.ListAlertLogRequest) (*common.InformativeAlertLogList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlertLogs not implemented")
}
func (UnimplementedAlertingLogsServer) mustEmbedUnimplementedAlertingLogsServer() {}

// UnsafeAlertingLogsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertingLogsServer will
// result in compilation errors.
type UnsafeAlertingLogsServer interface {
	mustEmbedUnimplementedAlertingLogsServer()
}

func RegisterAlertingLogsServer(s grpc.ServiceRegistrar, srv AlertingLogsServer) {
	s.RegisterService(&AlertingLogs_ServiceDesc, srv)
}

func _AlertingLogs_CreateAlertLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AlertLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingLogsServer).CreateAlertLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.log.AlertingLogs/CreateAlertLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingLogsServer).CreateAlertLog(ctx, req.(*v1.AlertLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertingLogs_ListAlertLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListAlertLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingLogsServer).ListAlertLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.log.AlertingLogs/ListAlertLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingLogsServer).ListAlertLogs(ctx, req.(*common.ListAlertLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlertingLogs_ServiceDesc is the grpc.ServiceDesc for AlertingLogs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertingLogs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alerting.log.AlertingLogs",
	HandlerType: (*AlertingLogsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAlertLog",
			Handler:    _AlertingLogs_CreateAlertLog_Handler,
		},
		{
			MethodName: "ListAlertLogs",
			Handler:    _AlertingLogs_ListAlertLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/plugins/pkg/apis/server/log/alerting.log.proto",
}
