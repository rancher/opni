// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/pkg/apis/alerting/v1/sidecar.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SyncerClient is the client API for Syncer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncerClient interface {
	PutConfig(ctx context.Context, in *PutConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Ready(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Healthy(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SyncerStatus, error)
}

type syncerClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncerClient(cc grpc.ClientConnInterface) SyncerClient {
	return &syncerClient{cc}
}

func (c *syncerClient) PutConfig(ctx context.Context, in *PutConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alerting.Syncer/PutConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncerClient) Ready(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alerting.Syncer/Ready", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncerClient) Healthy(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alerting.Syncer/Healthy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncerClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SyncerStatus, error) {
	out := new(SyncerStatus)
	err := c.cc.Invoke(ctx, "/alerting.Syncer/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncerServer is the server API for Syncer service.
// All implementations must embed UnimplementedSyncerServer
// for forward compatibility
type SyncerServer interface {
	PutConfig(context.Context, *PutConfigRequest) (*emptypb.Empty, error)
	Ready(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Healthy(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Status(context.Context, *emptypb.Empty) (*SyncerStatus, error)
	mustEmbedUnimplementedSyncerServer()
}

// UnimplementedSyncerServer must be embedded to have forward compatible implementations.
type UnimplementedSyncerServer struct {
}

func (UnimplementedSyncerServer) PutConfig(context.Context, *PutConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutConfig not implemented")
}
func (UnimplementedSyncerServer) Ready(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ready not implemented")
}
func (UnimplementedSyncerServer) Healthy(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthy not implemented")
}
func (UnimplementedSyncerServer) Status(context.Context, *emptypb.Empty) (*SyncerStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedSyncerServer) mustEmbedUnimplementedSyncerServer() {}

// UnsafeSyncerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncerServer will
// result in compilation errors.
type UnsafeSyncerServer interface {
	mustEmbedUnimplementedSyncerServer()
}

func RegisterSyncerServer(s grpc.ServiceRegistrar, srv SyncerServer) {
	s.RegisterService(&Syncer_ServiceDesc, srv)
}

func _Syncer_PutConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerServer).PutConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.Syncer/PutConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerServer).PutConfig(ctx, req.(*PutConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syncer_Ready_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerServer).Ready(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.Syncer/Ready",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerServer).Ready(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syncer_Healthy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerServer).Healthy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.Syncer/Healthy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerServer).Healthy(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syncer_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.Syncer/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerServer).Status(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Syncer_ServiceDesc is the grpc.ServiceDesc for Syncer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Syncer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alerting.Syncer",
	HandlerType: (*SyncerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutConfig",
			Handler:    _Syncer_PutConfig_Handler,
		},
		{
			MethodName: "Ready",
			Handler:    _Syncer_Ready_Handler,
		},
		{
			MethodName: "Healthy",
			Handler:    _Syncer_Healthy_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Syncer_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/pkg/apis/alerting/v1/sidecar.proto",
}
