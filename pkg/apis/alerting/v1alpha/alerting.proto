syntax = "proto3";
option go_package = "github.com/rancher/opni/pkg/alerting/v1alpha";

import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/descriptor.proto";
import "google/api/http.proto";
import "google/api/annotations.proto";
import "google/rpc/status.proto";
import "github.com/rancher/opni/pkg/apis/core/v1/core.proto";

service Alerting {
  // ------- Trigger Alerts -------
  // TODO
  rpc TriggerAlerts(TriggerAlertsRequest) returns (TriggerAlertsResponse) {
    option (google.api.http) = {
      post: "/alerts/v1alpha/trigger"
      body: "*"
    };
  }

  // ------- CRUD for alerting events log -------
  rpc CreateAlertLog(core.AlertLog) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/alerts/v1alpha/log"
      body: "*"
    }; 
  }

  // id is the unix epoch timestamp of the alert 
  rpc GetAlertLog(core.Reference) returns (core.AlertLog) {
    option (google.api.http) = {
      get: "/alerts/v1alpha/events/{id}"
    };
  }

  rpc ListAlertLogs(ListAlertLogRequest) returns (core.AlertLogList) {
    option (google.api.http) = {
      get: "/alerts/v1alpha/events"
    };
  }

  rpc UpdateAlertLog(UpdateAlertLogRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/alerts/v1alpha/events"
      body: "*"
    };
  }

  rpc DeleteAlertLog(core.Reference) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/alerts/v1alpha/events"
    };
  }

  // -------- CRUD for alerting conditions -------
  //TODO 
  rpc CreateAlertCondition(AlertCondition) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/alerts/v1alpha/conditions"
      body: "*"
    };
  }

  rpc GetAlertCondition(core.Reference) returns (AlertCondition) {
    option (google.api.http) = {
      get: "/alerts/v1alpha/conditions/{id}"
    };
  }

  rpc ListAlertConditions(ListAlertConditionRequest) returns (AlertConditionList) {
    option (google.api.http) = {
      get: "/alerts/v1alpha/conditions"
    };
  }

  rpc UpdateAlertCondition(UpdateAlertConditionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/alerts/v1alpha/conditions"
      body: "*"
    };
  }

  rpc DeleteAlertCondition(core.Reference) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/alerts/v1alpha/conditions"
    };
  }

  rpc PreviewAlertCondition(PreviewAlertConditionRequest) returns (PreviewAlertConditionResponse) {
    option (google.api.http) = {
      post: "/alerts/v1alpha/conditions/preview"
      body: "*"
    };
  }

  // -------- CRUD for alerting endpoints ----
  // TODO 
  rpc CreateAlertEndpoint(AlertEndpoint) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/alerts/v1alpha/endpoints"
      body: "*"
    };
  }

  rpc GetAlertEndpoint(core.Reference) returns (AlertEndpoint) {
    option (google.api.http) = {
      get: "/alerts/v1alpha/endpoints/{id}"
    };
  }

  rpc ListAlertEndpoints(ListAlertEndpointsRequest) returns (AlertEndpointList) {
    option (google.api.http) = {
      get: "/alerts/v1alpha/endpoints"
    };
  }

  rpc UpdateAlertEndpoint(UpdateAlertEndpointRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/alerts/v1alpha/endpoints"
      body: "*"
    };
  }

  rpc DeleteAlertEndpoint(core.Reference) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/alerts/v1alpha/endpoints/{id}"
    };
  }

  rpc TestAlertEndpoint(TestAlertEndpointRequest) returns (TestAlertEndpointResponse) {
    option (google.api.http) = {
      post: "/alerts/v1alpha/endpoints/test"
      body: "*"
    };
  }
}

message TriggerAlertsRequest {
  core.Reference id =1;
  // TODO
}

message TriggerAlertsResponse {
  // TODO
}

message ListAlertLogRequest {
  repeated string labels = 1;
  uint64 limit  = 2;
  uint64 startTimestamp  = 3;
  uint64 endTimestamp = 4;
}

message UpdateAlertLogRequest {
  string id = 1;
  core.AlertLog UpdateAlert = 2;
}

message AlertCondition {
  // TODO
}

message AlertConditionList {
  repeated AlertCondition items = 1;
}

message ListAlertConditionRequest {

}

message UpdateAlertConditionRequest {
  // TODO
}

message PreviewAlertConditionRequest {
  // TODO
}

message PreviewAlertConditionResponse {
  // TODO
}


message AlertEndpoint {
  // TODO
}

message AlertEndpointList {
  repeated AlertEndpoint items = 1;
}

message ListAlertEndpointsRequest {

}
message UpdateAlertEndpointRequest {
  //TODO
}

message TestAlertEndpointRequest{
  // TODO
}
message TestAlertEndpointResponse {
  // TODO
}