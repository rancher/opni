syntax = "proto3";
option go_package = "github.com/rancher/opni/pkg/apis/storage/v1";

import "google/protobuf/duration.proto";

package storage;

message StorageSpec {
  string backend = 1;
  S3StorageSpec s3 = 2;
  GCSStorageSpec gcs = 3;
  AzureStorageSpec azure = 4;
  SwiftStorageSpec swift = 5;
  FilesystemStorageSpec filesystem = 6;
}

message S3StorageSpec {
	// The S3 bucket endpoint. It could be an AWS S3 endpoint listed at
	// https://docs.aws.amazon.com/general/latest/gr/s3.html or the address of an
	// S3-compatible service in hostname:port format.
	string endpoint = 1;
	// S3 region. If unset, the client will issue a S3 GetBucketLocation API call
	// to autodetect it.
	string region = 2;
	// S3 bucket name
	string bucketName = 3;
	// S3 secret access key
	string secretAccessKey = 4;
	// S3 access key ID
	string accessKeyID = 5;
	// If enabled, use http:// for the S3 endpoint instead of https://. This could
	// be useful in local dev/test environments while using an S3-compatible
	// backend storage, like Minio.
	bool insecure = 6;
	// The signature version to use for authenticating against S3.
	// Supported values are: v4, v2
	string signatureVersion = 7;

	SSEConfig sse = 8;
	HTTPConfig http = 9;
}

message SSEConfig {
	// Enable AWS Server Side Encryption. Supported values: SSE-KMS, SSE-S3
	string type = 1;
	// KMS Key ID used to encrypt objects in S3
	string kmsKeyID = 2;
	// KMS Encryption Context used for object encryption. It expects a JSON formatted string.
	string kmsEncryptionContext = 3;
}

message HTTPConfig {
	// The time an idle connection will remain idle before closing.
	google.protobuf.Duration idleConnTimeout = 1;
	// The amount of time the client will wait for a servers response headers.
	google.protobuf.Duration responseHeaderTimeout = 2;
	// If the client connects via HTTPS and this option is enabled, the client will accept any certificate and hostname.
	bool insecureSkipVerify = 3;
	// Maximum time to wait for a TLS handshake. 0 means no limit.
	google.protobuf.Duration tlsHandshakeTimeout = 4;
	// The time to wait for a server's first response headers after fully writing the request headers if the request has an Expect header. 0 to send the request body immediately.
	google.protobuf.Duration expectContinueTimeout = 5;
	// Maximum number of idle (keep-alive) connections across all hosts. 0 means no limit.
	int32 maxIdleConns = 6;
	// Maximum number of idle (keep-alive) connections to keep per-host. If 0, a built-in default value is used.
	int32 maxIdleConnsPerHost = 7;
	// Maximum number of connections per host. 0 means no limit.
	int32 maxConnsPerHost = 8;
}

message GCSStorageSpec {
	// GCS bucket name
	string bucketName = 1;
	// JSON representing either a Google Developers Console client_credentials.json file
	// or a Google Developers service account key file. If empty, fallback to Google default logic.
	string serviceAccount = 2;
}

message AzureStorageSpec {
	// Azure storage account name
	string storageAccountName = 1;
	// Azure storage account key
	string storageAccountKey = 2;
	// Azure storage container name
	string containerName = 3;
	// Azure storage endpoint suffix without schema. The account name will be
	// prefixed to this value to create the FQDN
	string endpoint = 4;
	// Number of retries for recoverable errors
	int32 maxRetries = 5;
	// Azure storage MSI resource. Either this or account key must be set.
	string msiResource = 6;
	// Azure storage MSI resource managed identity client Id. If not supplied system assigned identity is used
	string userAssignedID = 7;

	HTTPConfig http = 8;
}

message SwiftStorageSpec {
	// OpenStack Swift authentication API version. 0 to autodetect.
	int32 authVersion = 1;
	// OpenStack Swift authentication URL.
	string authURL = 2;
	// OpenStack Swift username.
	string username = 3;
	// OpenStack Swift user's domain name.
	string userDomainName = 4;
	// OpenStack Swift user's domain ID.
	string userDomainID = 5;
	// OpenStack Swift user ID.
	string userID = 6;
	// OpenStack Swift API key.
	string password = 7;
	// OpenStack Swift user's domain ID.
	string domainID = 8;
	// OpenStack Swift user's domain name.
	string domainName = 9;
	// OpenStack Swift project ID (v2,v3 auth only).
	string projectID = 10;
	// OpenStack Swift project name (v2,v3 auth only).
	string projectName = 11;
	// ID of the OpenStack Swift project's domain (v3 auth only), only needed
	// if it differs the from user domain.
	string projectDomainID = 12;
	// Name of the OpenStack Swift project's domain (v3 auth only), only needed
	// if it differs from the user domain.
	string projectDomainName = 13;
	// OpenStack Swift Region to use (v2,v3 auth only).
	string regionName = 14;
	// Name of the OpenStack Swift container to use. The container must already
	// exist.
	string containerName = 15;
	// Max number of times to retry failed requests.
	int32 maxRetries = 16;
	// Time after which a connection attempt is aborted.
	google.protobuf.Duration connectTimeout = 17;
	// Time after which an idle request is aborted. The timeout watchdog is reset
	// each time some data is received, so the timeout triggers after X time no
	// data is received on a request.
	google.protobuf.Duration requestTimeout = 18;
}

message FilesystemStorageSpec {
	// Local filesystem storage directory.
	string directory = 1;
}
