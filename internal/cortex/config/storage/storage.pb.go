// Code generated by internal/codegen. DO NOT EDIT.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v1.0.0
// source: github.com/rancher/opni/internal/cortex/config/storage/storage.proto

package storage

import (
	_ "github.com/rancher/opni/internal/codegen/cli"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AzureConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Azure storage account name
	AccountName *string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3,oneof" json:"account_name,omitempty"`
	// Azure storage account key
	AccountKey *string `protobuf:"bytes,2,opt,name=account_key,json=accountKey,proto3,oneof" json:"account_key,omitempty"`
	// Azure storage container name
	ContainerName *string `protobuf:"bytes,3,opt,name=container_name,json=containerName,proto3,oneof" json:"container_name,omitempty"`
	// Azure storage endpoint suffix without schema. The account name will be prefixed to this value to create the FQDN
	EndpointSuffix *string `protobuf:"bytes,4,opt,name=endpoint_suffix,json=endpointSuffix,proto3,oneof" json:"endpoint_suffix,omitempty"`
	// Number of retries for recoverable errors
	MaxRetries *int32 `protobuf:"varint,5,opt,name=max_retries,json=maxRetries,proto3,oneof" json:"max_retries,omitempty"`
	// Azure storage MSI resource. Either this or account key must be set.
	MsiResource *string `protobuf:"bytes,6,opt,name=msi_resource,json=msiResource,proto3,oneof" json:"msi_resource,omitempty"`
	// Azure storage MSI resource managed identity client Id. If not supplied system assigned identity is used
	UserAssignedId *string     `protobuf:"bytes,7,opt,name=user_assigned_id,json=userAssignedId,proto3,oneof" json:"user_assigned_id,omitempty"`
	Http           *HttpConfig `protobuf:"bytes,8,opt,name=http,proto3" json:"http,omitempty"`
}

func (x *AzureConfig) Reset() {
	*x = AzureConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureConfig) ProtoMessage() {}

func (x *AzureConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureConfig.ProtoReflect.Descriptor instead.
func (*AzureConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_rawDescGZIP(), []int{0}
}

func (x *AzureConfig) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *AzureConfig) GetAccountKey() string {
	if x != nil && x.AccountKey != nil {
		return *x.AccountKey
	}
	return ""
}

func (x *AzureConfig) GetContainerName() string {
	if x != nil && x.ContainerName != nil {
		return *x.ContainerName
	}
	return ""
}

func (x *AzureConfig) GetEndpointSuffix() string {
	if x != nil && x.EndpointSuffix != nil {
		return *x.EndpointSuffix
	}
	return ""
}

func (x *AzureConfig) GetMaxRetries() int32 {
	if x != nil && x.MaxRetries != nil {
		return *x.MaxRetries
	}
	return 0
}

func (x *AzureConfig) GetMsiResource() string {
	if x != nil && x.MsiResource != nil {
		return *x.MsiResource
	}
	return ""
}

func (x *AzureConfig) GetUserAssignedId() string {
	if x != nil && x.UserAssignedId != nil {
		return *x.UserAssignedId
	}
	return ""
}

func (x *AzureConfig) GetHttp() *HttpConfig {
	if x != nil {
		return x.Http
	}
	return nil
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Backend storage to use. Supported backends are: s3, gcs, azure, swift, filesystem.
	Backend    *string           `protobuf:"bytes,1,opt,name=backend,proto3,oneof" json:"backend,omitempty"`
	S3         *S3Config         `protobuf:"bytes,2,opt,name=s3,proto3" json:"s3,omitempty"`
	Gcs        *GcsConfig        `protobuf:"bytes,3,opt,name=gcs,proto3" json:"gcs,omitempty"`
	Azure      *AzureConfig      `protobuf:"bytes,4,opt,name=azure,proto3" json:"azure,omitempty"`
	Swift      *SwiftConfig      `protobuf:"bytes,5,opt,name=swift,proto3" json:"swift,omitempty"`
	Filesystem *FilesystemConfig `protobuf:"bytes,6,opt,name=filesystem,proto3" json:"filesystem,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_rawDescGZIP(), []int{1}
}

func (x *Config) GetBackend() string {
	if x != nil && x.Backend != nil {
		return *x.Backend
	}
	return ""
}

func (x *Config) GetS3() *S3Config {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *Config) GetGcs() *GcsConfig {
	if x != nil {
		return x.Gcs
	}
	return nil
}

func (x *Config) GetAzure() *AzureConfig {
	if x != nil {
		return x.Azure
	}
	return nil
}

func (x *Config) GetSwift() *SwiftConfig {
	if x != nil {
		return x.Swift
	}
	return nil
}

func (x *Config) GetFilesystem() *FilesystemConfig {
	if x != nil {
		return x.Filesystem
	}
	return nil
}

type FilesystemConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Local filesystem storage directory.
	Dir *string `protobuf:"bytes,1,opt,name=dir,proto3,oneof" json:"dir,omitempty"`
}

func (x *FilesystemConfig) Reset() {
	*x = FilesystemConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemConfig) ProtoMessage() {}

func (x *FilesystemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemConfig.ProtoReflect.Descriptor instead.
func (*FilesystemConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_rawDescGZIP(), []int{2}
}

func (x *FilesystemConfig) GetDir() string {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return ""
}

type GcsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GCS bucket name
	BucketName *string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3,oneof" json:"bucket_name,omitempty"`
	// JSON representing either a Google Developers Console client_credentials.json file or a Google Developers service account key file. If empty, fallback to Google default logic.
	ServiceAccount *string `protobuf:"bytes,2,opt,name=service_account,json=serviceAccount,proto3,oneof" json:"service_account,omitempty"`
}

func (x *GcsConfig) Reset() {
	*x = GcsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcsConfig) ProtoMessage() {}

func (x *GcsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcsConfig.ProtoReflect.Descriptor instead.
func (*GcsConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_rawDescGZIP(), []int{3}
}

func (x *GcsConfig) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *GcsConfig) GetServiceAccount() string {
	if x != nil && x.ServiceAccount != nil {
		return *x.ServiceAccount
	}
	return ""
}

type HttpConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time an idle connection will remain idle before closing.
	IdleConnTimeout *durationpb.Duration `protobuf:"bytes,1,opt,name=idle_conn_timeout,json=idleConnTimeout,proto3" json:"idle_conn_timeout,omitempty"`
	// The amount of time the client will wait for a servers response headers.
	ResponseHeaderTimeout *durationpb.Duration `protobuf:"bytes,2,opt,name=response_header_timeout,json=responseHeaderTimeout,proto3" json:"response_header_timeout,omitempty"`
	// If the client connects via HTTPS and this option is enabled, the client will accept any certificate and hostname.
	InsecureSkipVerify *bool `protobuf:"varint,3,opt,name=insecure_skip_verify,json=insecureSkipVerify,proto3,oneof" json:"insecure_skip_verify,omitempty"`
	// Maximum time to wait for a TLS handshake. 0 means no limit.
	TlsHandshakeTimeout *durationpb.Duration `protobuf:"bytes,4,opt,name=tls_handshake_timeout,json=tlsHandshakeTimeout,proto3" json:"tls_handshake_timeout,omitempty"`
	// The time to wait for a server's first response headers after fully writing the request headers if the request has an Expect header. 0 to send the request body immediately.
	ExpectContinueTimeout *durationpb.Duration `protobuf:"bytes,5,opt,name=expect_continue_timeout,json=expectContinueTimeout,proto3" json:"expect_continue_timeout,omitempty"`
	// Maximum number of idle (keep-alive) connections across all hosts. 0 means no limit.
	MaxIdleConnections *int32 `protobuf:"varint,6,opt,name=max_idle_connections,json=maxIdleConnections,proto3,oneof" json:"max_idle_connections,omitempty"`
	// Maximum number of idle (keep-alive) connections to keep per-host. If 0, a built-in default value is used.
	MaxIdleConnectionsPerHost *int32 `protobuf:"varint,7,opt,name=max_idle_connections_per_host,json=maxIdleConnectionsPerHost,proto3,oneof" json:"max_idle_connections_per_host,omitempty"`
	// Maximum number of connections per host. 0 means no limit.
	MaxConnectionsPerHost *int32 `protobuf:"varint,8,opt,name=max_connections_per_host,json=maxConnectionsPerHost,proto3,oneof" json:"max_connections_per_host,omitempty"`
}

func (x *HttpConfig) Reset() {
	*x = HttpConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpConfig) ProtoMessage() {}

func (x *HttpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpConfig.ProtoReflect.Descriptor instead.
func (*HttpConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_rawDescGZIP(), []int{4}
}

func (x *HttpConfig) GetIdleConnTimeout() *durationpb.Duration {
	if x != nil {
		return x.IdleConnTimeout
	}
	return nil
}

func (x *HttpConfig) GetResponseHeaderTimeout() *durationpb.Duration {
	if x != nil {
		return x.ResponseHeaderTimeout
	}
	return nil
}

func (x *HttpConfig) GetInsecureSkipVerify() bool {
	if x != nil && x.InsecureSkipVerify != nil {
		return *x.InsecureSkipVerify
	}
	return false
}

func (x *HttpConfig) GetTlsHandshakeTimeout() *durationpb.Duration {
	if x != nil {
		return x.TlsHandshakeTimeout
	}
	return nil
}

func (x *HttpConfig) GetExpectContinueTimeout() *durationpb.Duration {
	if x != nil {
		return x.ExpectContinueTimeout
	}
	return nil
}

func (x *HttpConfig) GetMaxIdleConnections() int32 {
	if x != nil && x.MaxIdleConnections != nil {
		return *x.MaxIdleConnections
	}
	return 0
}

func (x *HttpConfig) GetMaxIdleConnectionsPerHost() int32 {
	if x != nil && x.MaxIdleConnectionsPerHost != nil {
		return *x.MaxIdleConnectionsPerHost
	}
	return 0
}

func (x *HttpConfig) GetMaxConnectionsPerHost() int32 {
	if x != nil && x.MaxConnectionsPerHost != nil {
		return *x.MaxConnectionsPerHost
	}
	return 0
}

type S3Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The S3 bucket endpoint. It could be an AWS S3 endpoint listed at https://docs.aws.amazon.com/general/latest/gr/s3.html or the address of an S3-compatible service in hostname:port format.
	Endpoint *string `protobuf:"bytes,1,opt,name=endpoint,proto3,oneof" json:"endpoint,omitempty"`
	// S3 region. If unset, the client will issue a S3 GetBucketLocation API call to autodetect it.
	Region *string `protobuf:"bytes,2,opt,name=region,proto3,oneof" json:"region,omitempty"`
	// S3 bucket name
	BucketName *string `protobuf:"bytes,3,opt,name=bucket_name,json=bucketName,proto3,oneof" json:"bucket_name,omitempty"`
	// S3 secret access key
	SecretAccessKey *string `protobuf:"bytes,4,opt,name=secret_access_key,json=secretAccessKey,proto3,oneof" json:"secret_access_key,omitempty"`
	// S3 access key ID
	AccessKeyId *string `protobuf:"bytes,5,opt,name=access_key_id,json=accessKeyId,proto3,oneof" json:"access_key_id,omitempty"`
	// If enabled, use http:// for the S3 endpoint instead of https://. This could be useful in local dev/test environments while using an S3-compatible backend storage, like Minio.
	Insecure *bool `protobuf:"varint,6,opt,name=insecure,proto3,oneof" json:"insecure,omitempty"`
	// The signature version to use for authenticating against S3. Supported values are: v4, v2.
	SignatureVersion *string `protobuf:"bytes,7,opt,name=signature_version,json=signatureVersion,proto3,oneof" json:"signature_version,omitempty"`
	// The s3 bucket lookup style. Supported values are: auto, virtual-hosted, path.
	BucketLookupType *string      `protobuf:"bytes,8,opt,name=bucket_lookup_type,json=bucketLookupType,proto3,oneof" json:"bucket_lookup_type,omitempty"`
	Sse              *S3SSEConfig `protobuf:"bytes,9,opt,name=sse,proto3" json:"sse,omitempty"`
	Http             *HttpConfig  `protobuf:"bytes,10,opt,name=http,proto3" json:"http,omitempty"`
}

func (x *S3Config) Reset() {
	*x = S3Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Config) ProtoMessage() {}

func (x *S3Config) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Config.ProtoReflect.Descriptor instead.
func (*S3Config) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_rawDescGZIP(), []int{5}
}

func (x *S3Config) GetEndpoint() string {
	if x != nil && x.Endpoint != nil {
		return *x.Endpoint
	}
	return ""
}

func (x *S3Config) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *S3Config) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *S3Config) GetSecretAccessKey() string {
	if x != nil && x.SecretAccessKey != nil {
		return *x.SecretAccessKey
	}
	return ""
}

func (x *S3Config) GetAccessKeyId() string {
	if x != nil && x.AccessKeyId != nil {
		return *x.AccessKeyId
	}
	return ""
}

func (x *S3Config) GetInsecure() bool {
	if x != nil && x.Insecure != nil {
		return *x.Insecure
	}
	return false
}

func (x *S3Config) GetSignatureVersion() string {
	if x != nil && x.SignatureVersion != nil {
		return *x.SignatureVersion
	}
	return ""
}

func (x *S3Config) GetBucketLookupType() string {
	if x != nil && x.BucketLookupType != nil {
		return *x.BucketLookupType
	}
	return ""
}

func (x *S3Config) GetSse() *S3SSEConfig {
	if x != nil {
		return x.Sse
	}
	return nil
}

func (x *S3Config) GetHttp() *HttpConfig {
	if x != nil {
		return x.Http
	}
	return nil
}

type S3SSEConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable AWS Server Side Encryption. Supported values: SSE-KMS, SSE-S3.
	Type *string `protobuf:"bytes,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// KMS Key ID used to encrypt objects in S3
	KmsKeyId *string `protobuf:"bytes,2,opt,name=kms_key_id,json=kmsKeyId,proto3,oneof" json:"kms_key_id,omitempty"`
	// KMS Encryption Context used for object encryption. It expects JSON formatted string.
	KmsEncryptionContext *string `protobuf:"bytes,3,opt,name=kms_encryption_context,json=kmsEncryptionContext,proto3,oneof" json:"kms_encryption_context,omitempty"`
}

func (x *S3SSEConfig) Reset() {
	*x = S3SSEConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3SSEConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3SSEConfig) ProtoMessage() {}

func (x *S3SSEConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3SSEConfig.ProtoReflect.Descriptor instead.
func (*S3SSEConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_rawDescGZIP(), []int{6}
}

func (x *S3SSEConfig) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *S3SSEConfig) GetKmsKeyId() string {
	if x != nil && x.KmsKeyId != nil {
		return *x.KmsKeyId
	}
	return ""
}

func (x *S3SSEConfig) GetKmsEncryptionContext() string {
	if x != nil && x.KmsEncryptionContext != nil {
		return *x.KmsEncryptionContext
	}
	return ""
}

type SwiftConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OpenStack Swift authentication API version. 0 to autodetect.
	AuthVersion *int32 `protobuf:"varint,1,opt,name=auth_version,json=authVersion,proto3,oneof" json:"auth_version,omitempty"`
	// OpenStack Swift authentication URL
	AuthUrl *string `protobuf:"bytes,2,opt,name=auth_url,json=authUrl,proto3,oneof" json:"auth_url,omitempty"`
	// OpenStack Swift username.
	Username *string `protobuf:"bytes,3,opt,name=username,proto3,oneof" json:"username,omitempty"`
	// OpenStack Swift user's domain name.
	UserDomainName *string `protobuf:"bytes,4,opt,name=user_domain_name,json=userDomainName,proto3,oneof" json:"user_domain_name,omitempty"`
	// OpenStack Swift user's domain ID.
	UserDomainId *string `protobuf:"bytes,5,opt,name=user_domain_id,json=userDomainId,proto3,oneof" json:"user_domain_id,omitempty"`
	// OpenStack Swift user ID.
	UserId *string `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	// OpenStack Swift API key.
	Password *string `protobuf:"bytes,7,opt,name=password,proto3,oneof" json:"password,omitempty"`
	// OpenStack Swift user's domain ID.
	DomainId *string `protobuf:"bytes,8,opt,name=domain_id,json=domainId,proto3,oneof" json:"domain_id,omitempty"`
	// OpenStack Swift user's domain name.
	DomainName *string `protobuf:"bytes,9,opt,name=domain_name,json=domainName,proto3,oneof" json:"domain_name,omitempty"`
	// OpenStack Swift application credential ID.
	ApplicationCredentialId *string `protobuf:"bytes,10,opt,name=application_credential_id,json=applicationCredentialId,proto3,oneof" json:"application_credential_id,omitempty"`
	// OpenStack Swift application credential name.
	ApplicationCredentialName *string `protobuf:"bytes,11,opt,name=application_credential_name,json=applicationCredentialName,proto3,oneof" json:"application_credential_name,omitempty"`
	// OpenStack Swift application credential secret.
	ApplicationCredentialSecret *string `protobuf:"bytes,12,opt,name=application_credential_secret,json=applicationCredentialSecret,proto3,oneof" json:"application_credential_secret,omitempty"`
	// OpenStack Swift project ID (v2,v3 auth only).
	ProjectId *string `protobuf:"bytes,13,opt,name=project_id,json=projectId,proto3,oneof" json:"project_id,omitempty"`
	// OpenStack Swift project name (v2,v3 auth only).
	ProjectName *string `protobuf:"bytes,14,opt,name=project_name,json=projectName,proto3,oneof" json:"project_name,omitempty"`
	// ID of the OpenStack Swift project's domain (v3 auth only), only needed if it differs the from user domain.
	ProjectDomainId *string `protobuf:"bytes,15,opt,name=project_domain_id,json=projectDomainId,proto3,oneof" json:"project_domain_id,omitempty"`
	// Name of the OpenStack Swift project's domain (v3 auth only), only needed if it differs from the user domain.
	ProjectDomainName *string `protobuf:"bytes,16,opt,name=project_domain_name,json=projectDomainName,proto3,oneof" json:"project_domain_name,omitempty"`
	// OpenStack Swift Region to use (v2,v3 auth only).
	RegionName *string `protobuf:"bytes,17,opt,name=region_name,json=regionName,proto3,oneof" json:"region_name,omitempty"`
	// Name of the OpenStack Swift container to put chunks in.
	ContainerName *string `protobuf:"bytes,18,opt,name=container_name,json=containerName,proto3,oneof" json:"container_name,omitempty"`
	// Max retries on requests error.
	MaxRetries *int32 `protobuf:"varint,19,opt,name=max_retries,json=maxRetries,proto3,oneof" json:"max_retries,omitempty"`
	// Time after which a connection attempt is aborted.
	ConnectTimeout *durationpb.Duration `protobuf:"bytes,20,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`
	// Time after which an idle request is aborted. The timeout watchdog is reset each time some data is received, so the timeout triggers after X time no data is received on a request.
	RequestTimeout *durationpb.Duration `protobuf:"bytes,21,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`
}

func (x *SwiftConfig) Reset() {
	*x = SwiftConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwiftConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwiftConfig) ProtoMessage() {}

func (x *SwiftConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwiftConfig.ProtoReflect.Descriptor instead.
func (*SwiftConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_rawDescGZIP(), []int{7}
}

func (x *SwiftConfig) GetAuthVersion() int32 {
	if x != nil && x.AuthVersion != nil {
		return *x.AuthVersion
	}
	return 0
}

func (x *SwiftConfig) GetAuthUrl() string {
	if x != nil && x.AuthUrl != nil {
		return *x.AuthUrl
	}
	return ""
}

func (x *SwiftConfig) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *SwiftConfig) GetUserDomainName() string {
	if x != nil && x.UserDomainName != nil {
		return *x.UserDomainName
	}
	return ""
}

func (x *SwiftConfig) GetUserDomainId() string {
	if x != nil && x.UserDomainId != nil {
		return *x.UserDomainId
	}
	return ""
}

func (x *SwiftConfig) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *SwiftConfig) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *SwiftConfig) GetDomainId() string {
	if x != nil && x.DomainId != nil {
		return *x.DomainId
	}
	return ""
}

func (x *SwiftConfig) GetDomainName() string {
	if x != nil && x.DomainName != nil {
		return *x.DomainName
	}
	return ""
}

func (x *SwiftConfig) GetApplicationCredentialId() string {
	if x != nil && x.ApplicationCredentialId != nil {
		return *x.ApplicationCredentialId
	}
	return ""
}

func (x *SwiftConfig) GetApplicationCredentialName() string {
	if x != nil && x.ApplicationCredentialName != nil {
		return *x.ApplicationCredentialName
	}
	return ""
}

func (x *SwiftConfig) GetApplicationCredentialSecret() string {
	if x != nil && x.ApplicationCredentialSecret != nil {
		return *x.ApplicationCredentialSecret
	}
	return ""
}

func (x *SwiftConfig) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *SwiftConfig) GetProjectName() string {
	if x != nil && x.ProjectName != nil {
		return *x.ProjectName
	}
	return ""
}

func (x *SwiftConfig) GetProjectDomainId() string {
	if x != nil && x.ProjectDomainId != nil {
		return *x.ProjectDomainId
	}
	return ""
}

func (x *SwiftConfig) GetProjectDomainName() string {
	if x != nil && x.ProjectDomainName != nil {
		return *x.ProjectDomainName
	}
	return ""
}

func (x *SwiftConfig) GetRegionName() string {
	if x != nil && x.RegionName != nil {
		return *x.RegionName
	}
	return ""
}

func (x *SwiftConfig) GetContainerName() string {
	if x != nil && x.ContainerName != nil {
		return *x.ContainerName
	}
	return ""
}

func (x *SwiftConfig) GetMaxRetries() int32 {
	if x != nil && x.MaxRetries != nil {
		return *x.MaxRetries
	}
	return 0
}

func (x *SwiftConfig) GetConnectTimeout() *durationpb.Duration {
	if x != nil {
		return x.ConnectTimeout
	}
	return nil
}

func (x *SwiftConfig) GetRequestTimeout() *durationpb.Duration {
	if x != nil {
		return x.RequestTimeout
	}
	return nil
}

var File_github_com_rancher_opni_internal_cortex_config_storage_storage_proto protoreflect.FileDescriptor

var file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_rawDesc = []byte{
	0x0a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a,
	0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6c, 0x69, 0x2f, 0x63, 0x6c,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf3, 0x03, 0x0a, 0x0b, 0x41, 0x7a, 0x75, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x8a, 0xc0, 0x0c, 0x02, 0x18, 0x01, 0x48, 0x01, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x8a, 0xc0,
	0x0c, 0x04, 0x0a, 0x02, 0x32, 0x30, 0x48, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0c, 0x6d, 0x73, 0x69, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x8a,
	0xc0, 0x0c, 0x02, 0x18, 0x01, 0x48, 0x05, 0x52, 0x0b, 0x6d, 0x73, 0x69, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x73, 0x69, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x22, 0x99, 0x02,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xc0, 0x0c, 0x04, 0x0a,
	0x02, 0x73, 0x33, 0x48, 0x00, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x02, 0x73, 0x33, 0x12, 0x24, 0x0a, 0x03, 0x67, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x63, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x67, 0x63, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x61, 0x7a,
	0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x77, 0x69, 0x66, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x53, 0x77, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x73, 0x77, 0x69,
	0x66, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x22, 0x31, 0x0a, 0x10, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x15, 0x0a,
	0x03, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x64, 0x69,
	0x72, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x64, 0x69, 0x72, 0x22, 0x8b, 0x01, 0x0a,
	0x09, 0x47, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x34, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x8a, 0xc0, 0x0c, 0x02, 0x18,
	0x01, 0x48, 0x01, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x86, 0x06, 0x0a, 0x0a, 0x48,
	0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x52, 0x0a, 0x11, 0x69, 0x64, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0b, 0x8a, 0xc0, 0x0c, 0x07, 0x0a, 0x05, 0x31, 0x6d, 0x33, 0x30, 0x73, 0x52, 0x0f, 0x69, 0x64,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x5d, 0x0a,
	0x17, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x8a, 0xc0, 0x0c, 0x06, 0x0a,
	0x04, 0x32, 0x6d, 0x30, 0x73, 0x52, 0x15, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x42, 0x0a, 0x14,
	0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0b, 0x8a, 0xc0, 0x0c, 0x07,
	0x0a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x58, 0x0a, 0x15, 0x74, 0x6c, 0x73, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x8a, 0xc0, 0x0c, 0x05,
	0x0a, 0x03, 0x31, 0x30, 0x73, 0x52, 0x13, 0x74, 0x6c, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68,
	0x61, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x5b, 0x0a, 0x17, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x8a, 0xc0, 0x0c, 0x04, 0x0a, 0x02, 0x31, 0x73,
	0x52, 0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x69,
	0x64, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0x8a, 0xc0, 0x0c, 0x05, 0x0a, 0x03, 0x31, 0x30, 0x30,
	0x48, 0x01, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x1d, 0x6d, 0x61, 0x78,
	0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x09, 0x8a, 0xc0, 0x0c, 0x05, 0x0a, 0x03, 0x31, 0x30, 0x30, 0x48, 0x02, 0x52, 0x19, 0x6d,
	0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x18, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0x8a,
	0xc0, 0x0c, 0x03, 0x0a, 0x01, 0x30, 0x48, 0x03, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x22, 0xd4, 0x04, 0x0a, 0x08, 0x53, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1f, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0x8a, 0xc0, 0x0c, 0x02, 0x18, 0x01, 0x48, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0b, 0x8a, 0xc0, 0x0c, 0x07, 0x0a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x48, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0x8a, 0xc0, 0x0c, 0x04, 0x0a, 0x02, 0x76, 0x34, 0x48, 0x06, 0x52, 0x10, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x3d, 0x0a, 0x12, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x8a, 0xc0,
	0x0c, 0x06, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x48, 0x07, 0x52, 0x10, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x03, 0x73, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x33, 0x53, 0x53, 0x45, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x03, 0x73, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x0b, 0x53,
	0x33, 0x53, 0x53, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0a, 0x6b, 0x6d, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x6b, 0x6d, 0x73, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x16, 0x6b, 0x6d, 0x73, 0x5f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x8a, 0xc0, 0x0c, 0x02, 0x18, 0x01, 0x48, 0x02,
	0x52, 0x14, 0x6b, 0x6d, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x6d, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6b, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xfa, 0x0a, 0x0a,
	0x0b, 0x53, 0x77, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x0a, 0x0c,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x07, 0x8a, 0xc0, 0x0c, 0x03, 0x0a, 0x01, 0x30, 0x48, 0x00, 0x52, 0x0b, 0x61,
	0x75, 0x74, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x8a, 0xc0, 0x0c, 0x02, 0x18, 0x01,
	0x48, 0x06, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x19, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x17, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1b, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52,
	0x19, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a,
	0x1d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x8a, 0xc0, 0x0c, 0x02, 0x18, 0x01, 0x48, 0x0b, 0x52, 0x1b,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0x8a, 0xc0, 0x0c, 0x03, 0x0a, 0x01, 0x33,
	0x48, 0x12, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x4d, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x8a, 0xc0, 0x0c, 0x05, 0x0a, 0x03, 0x31, 0x30, 0x73,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x8a, 0xc0, 0x0c, 0x04, 0x0a, 0x02, 0x35, 0x73, 0x52, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x42, 0x40, 0x82, 0xc0, 0x0c, 0x04, 0x08,
	0x01, 0x10, 0x01, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_rawDescOnce sync.Once
	file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_rawDescData = file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_rawDesc
)

func file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_rawDescGZIP() []byte {
	file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_rawDescOnce.Do(func() {
		file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_rawDescData)
	})
	return file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_rawDescData
}

var file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_goTypes = []interface{}{
	(*AzureConfig)(nil),         // 0: storage.AzureConfig
	(*Config)(nil),              // 1: storage.Config
	(*FilesystemConfig)(nil),    // 2: storage.FilesystemConfig
	(*GcsConfig)(nil),           // 3: storage.GcsConfig
	(*HttpConfig)(nil),          // 4: storage.HttpConfig
	(*S3Config)(nil),            // 5: storage.S3Config
	(*S3SSEConfig)(nil),         // 6: storage.S3SSEConfig
	(*SwiftConfig)(nil),         // 7: storage.SwiftConfig
	(*durationpb.Duration)(nil), // 8: google.protobuf.Duration
}
var file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_depIdxs = []int32{
	4,  // 0: storage.AzureConfig.http:type_name -> storage.HttpConfig
	5,  // 1: storage.Config.s3:type_name -> storage.S3Config
	3,  // 2: storage.Config.gcs:type_name -> storage.GcsConfig
	0,  // 3: storage.Config.azure:type_name -> storage.AzureConfig
	7,  // 4: storage.Config.swift:type_name -> storage.SwiftConfig
	2,  // 5: storage.Config.filesystem:type_name -> storage.FilesystemConfig
	8,  // 6: storage.HttpConfig.idle_conn_timeout:type_name -> google.protobuf.Duration
	8,  // 7: storage.HttpConfig.response_header_timeout:type_name -> google.protobuf.Duration
	8,  // 8: storage.HttpConfig.tls_handshake_timeout:type_name -> google.protobuf.Duration
	8,  // 9: storage.HttpConfig.expect_continue_timeout:type_name -> google.protobuf.Duration
	6,  // 10: storage.S3Config.sse:type_name -> storage.S3SSEConfig
	4,  // 11: storage.S3Config.http:type_name -> storage.HttpConfig
	8,  // 12: storage.SwiftConfig.connect_timeout:type_name -> google.protobuf.Duration
	8,  // 13: storage.SwiftConfig.request_timeout:type_name -> google.protobuf.Duration
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_init() }
func file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_init() {
	if File_github_com_rancher_opni_internal_cortex_config_storage_storage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3SSEConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwiftConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_goTypes,
		DependencyIndexes: file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_depIdxs,
		MessageInfos:      file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_msgTypes,
	}.Build()
	File_github_com_rancher_opni_internal_cortex_config_storage_storage_proto = out.File
	file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_rawDesc = nil
	file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_goTypes = nil
	file_github_com_rancher_opni_internal_cortex_config_storage_storage_proto_depIdxs = nil
}
