// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/plugins/aiops/pkg/apis/metricai/metricai.proto

package metricai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetricAI_CreateGrafanaDashboard_FullMethodName = "/metricai.MetricAI/CreateGrafanaDashboard"
	MetricAI_DeleteGrafanaDashboard_FullMethodName = "/metricai.MetricAI/DeleteGrafanaDashboard"
	MetricAI_ListNamespaces_FullMethodName         = "/metricai.MetricAI/ListNamespaces"
	MetricAI_ListJobs_FullMethodName               = "/metricai.MetricAI/ListJobs"
	MetricAI_ListJobRuns_FullMethodName            = "/metricai.MetricAI/ListJobRuns"
	MetricAI_CreateJob_FullMethodName              = "/metricai.MetricAI/CreateJob"
	MetricAI_RunJob_FullMethodName                 = "/metricai.MetricAI/RunJob"
	MetricAI_DeleteJob_FullMethodName              = "/metricai.MetricAI/DeleteJob"
	MetricAI_DeleteJobRun_FullMethodName           = "/metricai.MetricAI/DeleteJobRun"
	MetricAI_GetJobRunResult_FullMethodName        = "/metricai.MetricAI/GetJobRunResult"
	MetricAI_GetJob_FullMethodName                 = "/metricai.MetricAI/GetJob"
)

// MetricAIClient is the client API for MetricAI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricAIClient interface {
	CreateGrafanaDashboard(ctx context.Context, in *MetricAIId, opts ...grpc.CallOption) (*MetricAIAPIResponse, error)
	DeleteGrafanaDashboard(ctx context.Context, in *MetricAIId, opts ...grpc.CallOption) (*MetricAIAPIResponse, error)
	// list namespaces of a cluster given cluster_id
	ListNamespaces(ctx context.Context, in *MetricAIId, opts ...grpc.CallOption) (*MetricAIIdList, error)
	// list jobs created by user
	ListJobs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetricAIIdList, error)
	// list job runs of a given job_id
	ListJobRuns(ctx context.Context, in *MetricAIId, opts ...grpc.CallOption) (*MetricAIIdList, error)
	// create a new job
	CreateJob(ctx context.Context, in *MetricAICreateJobRequest, opts ...grpc.CallOption) (*MetricAIAPIResponse, error)
	// run an existing job
	RunJob(ctx context.Context, in *MetricAIId, opts ...grpc.CallOption) (*MetricAIRunJobResponse, error)
	// delete a job
	DeleteJob(ctx context.Context, in *MetricAIId, opts ...grpc.CallOption) (*MetricAIAPIResponse, error)
	// delete a job run
	DeleteJobRun(ctx context.Context, in *MetricAIId, opts ...grpc.CallOption) (*MetricAIAPIResponse, error)
	// get the output of a job run
	GetJobRunResult(ctx context.Context, in *MetricAIId, opts ...grpc.CallOption) (*MetricAIJobRunResult, error)
	// get the metadata/info of a job
	GetJob(ctx context.Context, in *MetricAIId, opts ...grpc.CallOption) (*MetricAIJobStatus, error)
}

type metricAIClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricAIClient(cc grpc.ClientConnInterface) MetricAIClient {
	return &metricAIClient{cc}
}

func (c *metricAIClient) CreateGrafanaDashboard(ctx context.Context, in *MetricAIId, opts ...grpc.CallOption) (*MetricAIAPIResponse, error) {
	out := new(MetricAIAPIResponse)
	err := c.cc.Invoke(ctx, MetricAI_CreateGrafanaDashboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricAIClient) DeleteGrafanaDashboard(ctx context.Context, in *MetricAIId, opts ...grpc.CallOption) (*MetricAIAPIResponse, error) {
	out := new(MetricAIAPIResponse)
	err := c.cc.Invoke(ctx, MetricAI_DeleteGrafanaDashboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricAIClient) ListNamespaces(ctx context.Context, in *MetricAIId, opts ...grpc.CallOption) (*MetricAIIdList, error) {
	out := new(MetricAIIdList)
	err := c.cc.Invoke(ctx, MetricAI_ListNamespaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricAIClient) ListJobs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetricAIIdList, error) {
	out := new(MetricAIIdList)
	err := c.cc.Invoke(ctx, MetricAI_ListJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricAIClient) ListJobRuns(ctx context.Context, in *MetricAIId, opts ...grpc.CallOption) (*MetricAIIdList, error) {
	out := new(MetricAIIdList)
	err := c.cc.Invoke(ctx, MetricAI_ListJobRuns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricAIClient) CreateJob(ctx context.Context, in *MetricAICreateJobRequest, opts ...grpc.CallOption) (*MetricAIAPIResponse, error) {
	out := new(MetricAIAPIResponse)
	err := c.cc.Invoke(ctx, MetricAI_CreateJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricAIClient) RunJob(ctx context.Context, in *MetricAIId, opts ...grpc.CallOption) (*MetricAIRunJobResponse, error) {
	out := new(MetricAIRunJobResponse)
	err := c.cc.Invoke(ctx, MetricAI_RunJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricAIClient) DeleteJob(ctx context.Context, in *MetricAIId, opts ...grpc.CallOption) (*MetricAIAPIResponse, error) {
	out := new(MetricAIAPIResponse)
	err := c.cc.Invoke(ctx, MetricAI_DeleteJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricAIClient) DeleteJobRun(ctx context.Context, in *MetricAIId, opts ...grpc.CallOption) (*MetricAIAPIResponse, error) {
	out := new(MetricAIAPIResponse)
	err := c.cc.Invoke(ctx, MetricAI_DeleteJobRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricAIClient) GetJobRunResult(ctx context.Context, in *MetricAIId, opts ...grpc.CallOption) (*MetricAIJobRunResult, error) {
	out := new(MetricAIJobRunResult)
	err := c.cc.Invoke(ctx, MetricAI_GetJobRunResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricAIClient) GetJob(ctx context.Context, in *MetricAIId, opts ...grpc.CallOption) (*MetricAIJobStatus, error) {
	out := new(MetricAIJobStatus)
	err := c.cc.Invoke(ctx, MetricAI_GetJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricAIServer is the server API for MetricAI service.
// All implementations must embed UnimplementedMetricAIServer
// for forward compatibility
type MetricAIServer interface {
	CreateGrafanaDashboard(context.Context, *MetricAIId) (*MetricAIAPIResponse, error)
	DeleteGrafanaDashboard(context.Context, *MetricAIId) (*MetricAIAPIResponse, error)
	// list namespaces of a cluster given cluster_id
	ListNamespaces(context.Context, *MetricAIId) (*MetricAIIdList, error)
	// list jobs created by user
	ListJobs(context.Context, *emptypb.Empty) (*MetricAIIdList, error)
	// list job runs of a given job_id
	ListJobRuns(context.Context, *MetricAIId) (*MetricAIIdList, error)
	// create a new job
	CreateJob(context.Context, *MetricAICreateJobRequest) (*MetricAIAPIResponse, error)
	// run an existing job
	RunJob(context.Context, *MetricAIId) (*MetricAIRunJobResponse, error)
	// delete a job
	DeleteJob(context.Context, *MetricAIId) (*MetricAIAPIResponse, error)
	// delete a job run
	DeleteJobRun(context.Context, *MetricAIId) (*MetricAIAPIResponse, error)
	// get the output of a job run
	GetJobRunResult(context.Context, *MetricAIId) (*MetricAIJobRunResult, error)
	// get the metadata/info of a job
	GetJob(context.Context, *MetricAIId) (*MetricAIJobStatus, error)
	mustEmbedUnimplementedMetricAIServer()
}

// UnimplementedMetricAIServer must be embedded to have forward compatible implementations.
type UnimplementedMetricAIServer struct {
}

func (UnimplementedMetricAIServer) CreateGrafanaDashboard(context.Context, *MetricAIId) (*MetricAIAPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGrafanaDashboard not implemented")
}
func (UnimplementedMetricAIServer) DeleteGrafanaDashboard(context.Context, *MetricAIId) (*MetricAIAPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGrafanaDashboard not implemented")
}
func (UnimplementedMetricAIServer) ListNamespaces(context.Context, *MetricAIId) (*MetricAIIdList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (UnimplementedMetricAIServer) ListJobs(context.Context, *emptypb.Empty) (*MetricAIIdList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (UnimplementedMetricAIServer) ListJobRuns(context.Context, *MetricAIId) (*MetricAIIdList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobRuns not implemented")
}
func (UnimplementedMetricAIServer) CreateJob(context.Context, *MetricAICreateJobRequest) (*MetricAIAPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (UnimplementedMetricAIServer) RunJob(context.Context, *MetricAIId) (*MetricAIRunJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunJob not implemented")
}
func (UnimplementedMetricAIServer) DeleteJob(context.Context, *MetricAIId) (*MetricAIAPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (UnimplementedMetricAIServer) DeleteJobRun(context.Context, *MetricAIId) (*MetricAIAPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobRun not implemented")
}
func (UnimplementedMetricAIServer) GetJobRunResult(context.Context, *MetricAIId) (*MetricAIJobRunResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobRunResult not implemented")
}
func (UnimplementedMetricAIServer) GetJob(context.Context, *MetricAIId) (*MetricAIJobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedMetricAIServer) mustEmbedUnimplementedMetricAIServer() {}

// UnsafeMetricAIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricAIServer will
// result in compilation errors.
type UnsafeMetricAIServer interface {
	mustEmbedUnimplementedMetricAIServer()
}

func RegisterMetricAIServer(s grpc.ServiceRegistrar, srv MetricAIServer) {
	s.RegisterService(&MetricAI_ServiceDesc, srv)
}

func _MetricAI_CreateGrafanaDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricAIId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricAIServer).CreateGrafanaDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricAI_CreateGrafanaDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricAIServer).CreateGrafanaDashboard(ctx, req.(*MetricAIId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricAI_DeleteGrafanaDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricAIId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricAIServer).DeleteGrafanaDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricAI_DeleteGrafanaDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricAIServer).DeleteGrafanaDashboard(ctx, req.(*MetricAIId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricAI_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricAIId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricAIServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricAI_ListNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricAIServer).ListNamespaces(ctx, req.(*MetricAIId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricAI_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricAIServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricAI_ListJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricAIServer).ListJobs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricAI_ListJobRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricAIId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricAIServer).ListJobRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricAI_ListJobRuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricAIServer).ListJobRuns(ctx, req.(*MetricAIId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricAI_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricAICreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricAIServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricAI_CreateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricAIServer).CreateJob(ctx, req.(*MetricAICreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricAI_RunJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricAIId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricAIServer).RunJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricAI_RunJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricAIServer).RunJob(ctx, req.(*MetricAIId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricAI_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricAIId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricAIServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricAI_DeleteJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricAIServer).DeleteJob(ctx, req.(*MetricAIId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricAI_DeleteJobRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricAIId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricAIServer).DeleteJobRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricAI_DeleteJobRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricAIServer).DeleteJobRun(ctx, req.(*MetricAIId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricAI_GetJobRunResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricAIId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricAIServer).GetJobRunResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricAI_GetJobRunResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricAIServer).GetJobRunResult(ctx, req.(*MetricAIId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricAI_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricAIId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricAIServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricAI_GetJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricAIServer).GetJob(ctx, req.(*MetricAIId))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricAI_ServiceDesc is the grpc.ServiceDesc for MetricAI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricAI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metricai.MetricAI",
	HandlerType: (*MetricAIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGrafanaDashboard",
			Handler:    _MetricAI_CreateGrafanaDashboard_Handler,
		},
		{
			MethodName: "DeleteGrafanaDashboard",
			Handler:    _MetricAI_DeleteGrafanaDashboard_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _MetricAI_ListNamespaces_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _MetricAI_ListJobs_Handler,
		},
		{
			MethodName: "ListJobRuns",
			Handler:    _MetricAI_ListJobRuns_Handler,
		},
		{
			MethodName: "CreateJob",
			Handler:    _MetricAI_CreateJob_Handler,
		},
		{
			MethodName: "RunJob",
			Handler:    _MetricAI_RunJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _MetricAI_DeleteJob_Handler,
		},
		{
			MethodName: "DeleteJobRun",
			Handler:    _MetricAI_DeleteJobRun_Handler,
		},
		{
			MethodName: "GetJobRunResult",
			Handler:    _MetricAI_GetJobRunResult_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _MetricAI_GetJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/plugins/aiops/pkg/apis/metricai/metricai.proto",
}
