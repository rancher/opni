// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/plugins/pkg/apis/server/endpoint/alerting.endpoint.proto

package endpoint

import (
	context "context"
	v1 "github.com/rancher/opni/pkg/apis/core/v1"
	common "github.com/rancher/opni/plugins/alerting/pkg/apis/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlertingEndpointsClient is the client API for AlertingEndpoints service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertingEndpointsClient interface {
	CreateAlertEndpoint(ctx context.Context, in *common.AlertEndpoint, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAlertEndpoint(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*common.AlertEndpoint, error)
	ListAlertEndpoints(ctx context.Context, in *common.ListAlertEndpointsRequest, opts ...grpc.CallOption) (*common.AlertEndpointList, error)
	UpdateAlertEndpoint(ctx context.Context, in *common.UpdateAlertEndpointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteAlertEndpoint(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// unimplemented
	TestAlertEndpoint(ctx context.Context, in *common.TestAlertEndpointRequest, opts ...grpc.CallOption) (*common.TestAlertEndpointResponse, error)
	// alerting internal use only
	CreateEndpointImplementation(ctx context.Context, in *common.CreateImplementation, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// alerting internal use only
	UpdateEndpointImplementation(ctx context.Context, in *common.CreateImplementation, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// alerting internal use only
	// conditionMustBePassed in here
	DeleteEndpointImplementation(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type alertingEndpointsClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertingEndpointsClient(cc grpc.ClientConnInterface) AlertingEndpointsClient {
	return &alertingEndpointsClient{cc}
}

func (c *alertingEndpointsClient) CreateAlertEndpoint(ctx context.Context, in *common.AlertEndpoint, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alerting.endpoint.AlertingEndpoints/CreateAlertEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingEndpointsClient) GetAlertEndpoint(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*common.AlertEndpoint, error) {
	out := new(common.AlertEndpoint)
	err := c.cc.Invoke(ctx, "/alerting.endpoint.AlertingEndpoints/GetAlertEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingEndpointsClient) ListAlertEndpoints(ctx context.Context, in *common.ListAlertEndpointsRequest, opts ...grpc.CallOption) (*common.AlertEndpointList, error) {
	out := new(common.AlertEndpointList)
	err := c.cc.Invoke(ctx, "/alerting.endpoint.AlertingEndpoints/ListAlertEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingEndpointsClient) UpdateAlertEndpoint(ctx context.Context, in *common.UpdateAlertEndpointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alerting.endpoint.AlertingEndpoints/UpdateAlertEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingEndpointsClient) DeleteAlertEndpoint(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alerting.endpoint.AlertingEndpoints/DeleteAlertEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingEndpointsClient) TestAlertEndpoint(ctx context.Context, in *common.TestAlertEndpointRequest, opts ...grpc.CallOption) (*common.TestAlertEndpointResponse, error) {
	out := new(common.TestAlertEndpointResponse)
	err := c.cc.Invoke(ctx, "/alerting.endpoint.AlertingEndpoints/TestAlertEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingEndpointsClient) CreateEndpointImplementation(ctx context.Context, in *common.CreateImplementation, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alerting.endpoint.AlertingEndpoints/CreateEndpointImplementation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingEndpointsClient) UpdateEndpointImplementation(ctx context.Context, in *common.CreateImplementation, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alerting.endpoint.AlertingEndpoints/UpdateEndpointImplementation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingEndpointsClient) DeleteEndpointImplementation(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alerting.endpoint.AlertingEndpoints/DeleteEndpointImplementation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertingEndpointsServer is the server API for AlertingEndpoints service.
// All implementations must embed UnimplementedAlertingEndpointsServer
// for forward compatibility
type AlertingEndpointsServer interface {
	CreateAlertEndpoint(context.Context, *common.AlertEndpoint) (*emptypb.Empty, error)
	GetAlertEndpoint(context.Context, *v1.Reference) (*common.AlertEndpoint, error)
	ListAlertEndpoints(context.Context, *common.ListAlertEndpointsRequest) (*common.AlertEndpointList, error)
	UpdateAlertEndpoint(context.Context, *common.UpdateAlertEndpointRequest) (*emptypb.Empty, error)
	DeleteAlertEndpoint(context.Context, *v1.Reference) (*emptypb.Empty, error)
	// unimplemented
	TestAlertEndpoint(context.Context, *common.TestAlertEndpointRequest) (*common.TestAlertEndpointResponse, error)
	// alerting internal use only
	CreateEndpointImplementation(context.Context, *common.CreateImplementation) (*emptypb.Empty, error)
	// alerting internal use only
	UpdateEndpointImplementation(context.Context, *common.CreateImplementation) (*emptypb.Empty, error)
	// alerting internal use only
	// conditionMustBePassed in here
	DeleteEndpointImplementation(context.Context, *v1.Reference) (*emptypb.Empty, error)
	mustEmbedUnimplementedAlertingEndpointsServer()
}

// UnimplementedAlertingEndpointsServer must be embedded to have forward compatible implementations.
type UnimplementedAlertingEndpointsServer struct {
}

func (UnimplementedAlertingEndpointsServer) CreateAlertEndpoint(context.Context, *common.AlertEndpoint) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlertEndpoint not implemented")
}
func (UnimplementedAlertingEndpointsServer) GetAlertEndpoint(context.Context, *v1.Reference) (*common.AlertEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertEndpoint not implemented")
}
func (UnimplementedAlertingEndpointsServer) ListAlertEndpoints(context.Context, *common.ListAlertEndpointsRequest) (*common.AlertEndpointList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlertEndpoints not implemented")
}
func (UnimplementedAlertingEndpointsServer) UpdateAlertEndpoint(context.Context, *common.UpdateAlertEndpointRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlertEndpoint not implemented")
}
func (UnimplementedAlertingEndpointsServer) DeleteAlertEndpoint(context.Context, *v1.Reference) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlertEndpoint not implemented")
}
func (UnimplementedAlertingEndpointsServer) TestAlertEndpoint(context.Context, *common.TestAlertEndpointRequest) (*common.TestAlertEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestAlertEndpoint not implemented")
}
func (UnimplementedAlertingEndpointsServer) CreateEndpointImplementation(context.Context, *common.CreateImplementation) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEndpointImplementation not implemented")
}
func (UnimplementedAlertingEndpointsServer) UpdateEndpointImplementation(context.Context, *common.CreateImplementation) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEndpointImplementation not implemented")
}
func (UnimplementedAlertingEndpointsServer) DeleteEndpointImplementation(context.Context, *v1.Reference) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEndpointImplementation not implemented")
}
func (UnimplementedAlertingEndpointsServer) mustEmbedUnimplementedAlertingEndpointsServer() {}

// UnsafeAlertingEndpointsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertingEndpointsServer will
// result in compilation errors.
type UnsafeAlertingEndpointsServer interface {
	mustEmbedUnimplementedAlertingEndpointsServer()
}

func RegisterAlertingEndpointsServer(s grpc.ServiceRegistrar, srv AlertingEndpointsServer) {
	s.RegisterService(&AlertingEndpoints_ServiceDesc, srv)
}

func _AlertingEndpoints_CreateAlertEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.AlertEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingEndpointsServer).CreateAlertEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.endpoint.AlertingEndpoints/CreateAlertEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingEndpointsServer).CreateAlertEndpoint(ctx, req.(*common.AlertEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertingEndpoints_GetAlertEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingEndpointsServer).GetAlertEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.endpoint.AlertingEndpoints/GetAlertEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingEndpointsServer).GetAlertEndpoint(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertingEndpoints_ListAlertEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListAlertEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingEndpointsServer).ListAlertEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.endpoint.AlertingEndpoints/ListAlertEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingEndpointsServer).ListAlertEndpoints(ctx, req.(*common.ListAlertEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertingEndpoints_UpdateAlertEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UpdateAlertEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingEndpointsServer).UpdateAlertEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.endpoint.AlertingEndpoints/UpdateAlertEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingEndpointsServer).UpdateAlertEndpoint(ctx, req.(*common.UpdateAlertEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertingEndpoints_DeleteAlertEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingEndpointsServer).DeleteAlertEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.endpoint.AlertingEndpoints/DeleteAlertEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingEndpointsServer).DeleteAlertEndpoint(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertingEndpoints_TestAlertEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.TestAlertEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingEndpointsServer).TestAlertEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.endpoint.AlertingEndpoints/TestAlertEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingEndpointsServer).TestAlertEndpoint(ctx, req.(*common.TestAlertEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertingEndpoints_CreateEndpointImplementation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.CreateImplementation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingEndpointsServer).CreateEndpointImplementation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.endpoint.AlertingEndpoints/CreateEndpointImplementation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingEndpointsServer).CreateEndpointImplementation(ctx, req.(*common.CreateImplementation))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertingEndpoints_UpdateEndpointImplementation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.CreateImplementation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingEndpointsServer).UpdateEndpointImplementation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.endpoint.AlertingEndpoints/UpdateEndpointImplementation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingEndpointsServer).UpdateEndpointImplementation(ctx, req.(*common.CreateImplementation))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertingEndpoints_DeleteEndpointImplementation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingEndpointsServer).DeleteEndpointImplementation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.endpoint.AlertingEndpoints/DeleteEndpointImplementation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingEndpointsServer).DeleteEndpointImplementation(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

// AlertingEndpoints_ServiceDesc is the grpc.ServiceDesc for AlertingEndpoints service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertingEndpoints_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alerting.endpoint.AlertingEndpoints",
	HandlerType: (*AlertingEndpointsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAlertEndpoint",
			Handler:    _AlertingEndpoints_CreateAlertEndpoint_Handler,
		},
		{
			MethodName: "GetAlertEndpoint",
			Handler:    _AlertingEndpoints_GetAlertEndpoint_Handler,
		},
		{
			MethodName: "ListAlertEndpoints",
			Handler:    _AlertingEndpoints_ListAlertEndpoints_Handler,
		},
		{
			MethodName: "UpdateAlertEndpoint",
			Handler:    _AlertingEndpoints_UpdateAlertEndpoint_Handler,
		},
		{
			MethodName: "DeleteAlertEndpoint",
			Handler:    _AlertingEndpoints_DeleteAlertEndpoint_Handler,
		},
		{
			MethodName: "TestAlertEndpoint",
			Handler:    _AlertingEndpoints_TestAlertEndpoint_Handler,
		},
		{
			MethodName: "CreateEndpointImplementation",
			Handler:    _AlertingEndpoints_CreateEndpointImplementation_Handler,
		},
		{
			MethodName: "UpdateEndpointImplementation",
			Handler:    _AlertingEndpoints_UpdateEndpointImplementation_Handler,
		},
		{
			MethodName: "DeleteEndpointImplementation",
			Handler:    _AlertingEndpoints_DeleteEndpointImplementation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/plugins/pkg/apis/server/endpoint/alerting.endpoint.proto",
}
