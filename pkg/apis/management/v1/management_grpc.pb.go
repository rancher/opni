// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/pkg/apis/management/v1/management.proto

package v1

import (
	context "context"
	v11 "github.com/rancher/opni/pkg/apis/capability/v1"
	v12 "github.com/rancher/opni/pkg/apis/control/v1"
	v1 "github.com/rancher/opni/pkg/apis/core/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Management_CreateBootstrapToken_FullMethodName      = "/management.Management/CreateBootstrapToken"
	Management_RevokeBootstrapToken_FullMethodName      = "/management.Management/RevokeBootstrapToken"
	Management_ListBootstrapTokens_FullMethodName       = "/management.Management/ListBootstrapTokens"
	Management_GetBootstrapToken_FullMethodName         = "/management.Management/GetBootstrapToken"
	Management_ListClusters_FullMethodName              = "/management.Management/ListClusters"
	Management_WatchClusters_FullMethodName             = "/management.Management/WatchClusters"
	Management_DeleteCluster_FullMethodName             = "/management.Management/DeleteCluster"
	Management_CertsInfo_FullMethodName                 = "/management.Management/CertsInfo"
	Management_GetCluster_FullMethodName                = "/management.Management/GetCluster"
	Management_GetClusterHealthStatus_FullMethodName    = "/management.Management/GetClusterHealthStatus"
	Management_WatchClusterHealthStatus_FullMethodName  = "/management.Management/WatchClusterHealthStatus"
	Management_EditCluster_FullMethodName               = "/management.Management/EditCluster"
	Management_CreateRole_FullMethodName                = "/management.Management/CreateRole"
	Management_UpdateRole_FullMethodName                = "/management.Management/UpdateRole"
	Management_DeleteRole_FullMethodName                = "/management.Management/DeleteRole"
	Management_GetRole_FullMethodName                   = "/management.Management/GetRole"
	Management_CreateRoleBinding_FullMethodName         = "/management.Management/CreateRoleBinding"
	Management_UpdateRoleBinding_FullMethodName         = "/management.Management/UpdateRoleBinding"
	Management_DeleteRoleBinding_FullMethodName         = "/management.Management/DeleteRoleBinding"
	Management_GetRoleBinding_FullMethodName            = "/management.Management/GetRoleBinding"
	Management_ListRoles_FullMethodName                 = "/management.Management/ListRoles"
	Management_ListRoleBindings_FullMethodName          = "/management.Management/ListRoleBindings"
	Management_SubjectAccess_FullMethodName             = "/management.Management/SubjectAccess"
	Management_APIExtensions_FullMethodName             = "/management.Management/APIExtensions"
	Management_GetConfig_FullMethodName                 = "/management.Management/GetConfig"
	Management_UpdateConfig_FullMethodName              = "/management.Management/UpdateConfig"
	Management_ListCapabilities_FullMethodName          = "/management.Management/ListCapabilities"
	Management_CapabilityInstaller_FullMethodName       = "/management.Management/CapabilityInstaller"
	Management_InstallCapability_FullMethodName         = "/management.Management/InstallCapability"
	Management_UninstallCapability_FullMethodName       = "/management.Management/UninstallCapability"
	Management_CapabilityStatus_FullMethodName          = "/management.Management/CapabilityStatus"
	Management_CapabilityUninstallStatus_FullMethodName = "/management.Management/CapabilityUninstallStatus"
	Management_CancelCapabilityUninstall_FullMethodName = "/management.Management/CancelCapabilityUninstall"
	Management_GetDashboardSettings_FullMethodName      = "/management.Management/GetDashboardSettings"
	Management_UpdateDashboardSettings_FullMethodName   = "/management.Management/UpdateDashboardSettings"
	Management_GetAgentLogStream_FullMethodName         = "/management.Management/GetAgentLogStream"
)

// ManagementClient is the client API for Management service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementClient interface {
	CreateBootstrapToken(ctx context.Context, in *CreateBootstrapTokenRequest, opts ...grpc.CallOption) (*v1.BootstrapToken, error)
	RevokeBootstrapToken(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListBootstrapTokens(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.BootstrapTokenList, error)
	GetBootstrapToken(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*v1.BootstrapToken, error)
	ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*v1.ClusterList, error)
	WatchClusters(ctx context.Context, in *WatchClustersRequest, opts ...grpc.CallOption) (Management_WatchClustersClient, error)
	DeleteCluster(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CertsInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CertsInfoResponse, error)
	GetCluster(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*v1.Cluster, error)
	GetClusterHealthStatus(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*v1.HealthStatus, error)
	WatchClusterHealthStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Management_WatchClusterHealthStatusClient, error)
	EditCluster(ctx context.Context, in *EditClusterRequest, opts ...grpc.CallOption) (*v1.Cluster, error)
	CreateRole(ctx context.Context, in *v1.Role, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateRole(ctx context.Context, in *v1.Role, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteRole(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRole(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*v1.Role, error)
	CreateRoleBinding(ctx context.Context, in *v1.RoleBinding, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateRoleBinding(ctx context.Context, in *v1.RoleBinding, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteRoleBinding(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRoleBinding(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*v1.RoleBinding, error)
	ListRoles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.RoleList, error)
	ListRoleBindings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.RoleBindingList, error)
	SubjectAccess(ctx context.Context, in *v1.SubjectAccessRequest, opts ...grpc.CallOption) (*v1.ReferenceList, error)
	APIExtensions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIExtensionInfoList, error)
	GetConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GatewayConfig, error)
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListCapabilities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CapabilityList, error)
	// Deprecated: Do not use.
	// Deprecated: For agent v2, use InstallCapability instead.
	CapabilityInstaller(ctx context.Context, in *CapabilityInstallerRequest, opts ...grpc.CallOption) (*CapabilityInstallerResponse, error)
	InstallCapability(ctx context.Context, in *CapabilityInstallRequest, opts ...grpc.CallOption) (*v11.InstallResponse, error)
	UninstallCapability(ctx context.Context, in *CapabilityUninstallRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CapabilityStatus(ctx context.Context, in *CapabilityStatusRequest, opts ...grpc.CallOption) (*v11.NodeCapabilityStatus, error)
	CapabilityUninstallStatus(ctx context.Context, in *CapabilityStatusRequest, opts ...grpc.CallOption) (*v1.TaskStatus, error)
	CancelCapabilityUninstall(ctx context.Context, in *CapabilityUninstallCancelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDashboardSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DashboardSettings, error)
	UpdateDashboardSettings(ctx context.Context, in *DashboardSettings, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAgentLogStream(ctx context.Context, in *StreamAgentLogsRequest, opts ...grpc.CallOption) (Management_GetAgentLogStreamClient, error)
}

type managementClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementClient(cc grpc.ClientConnInterface) ManagementClient {
	return &managementClient{cc}
}

func (c *managementClient) CreateBootstrapToken(ctx context.Context, in *CreateBootstrapTokenRequest, opts ...grpc.CallOption) (*v1.BootstrapToken, error) {
	out := new(v1.BootstrapToken)
	err := c.cc.Invoke(ctx, Management_CreateBootstrapToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) RevokeBootstrapToken(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_RevokeBootstrapToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListBootstrapTokens(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.BootstrapTokenList, error) {
	out := new(v1.BootstrapTokenList)
	err := c.cc.Invoke(ctx, Management_ListBootstrapTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetBootstrapToken(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*v1.BootstrapToken, error) {
	out := new(v1.BootstrapToken)
	err := c.cc.Invoke(ctx, Management_GetBootstrapToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*v1.ClusterList, error) {
	out := new(v1.ClusterList)
	err := c.cc.Invoke(ctx, Management_ListClusters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) WatchClusters(ctx context.Context, in *WatchClustersRequest, opts ...grpc.CallOption) (Management_WatchClustersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Management_ServiceDesc.Streams[0], Management_WatchClusters_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &managementWatchClustersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Management_WatchClustersClient interface {
	Recv() (*WatchEvent, error)
	grpc.ClientStream
}

type managementWatchClustersClient struct {
	grpc.ClientStream
}

func (x *managementWatchClustersClient) Recv() (*WatchEvent, error) {
	m := new(WatchEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *managementClient) DeleteCluster(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_DeleteCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CertsInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CertsInfoResponse, error) {
	out := new(CertsInfoResponse)
	err := c.cc.Invoke(ctx, Management_CertsInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetCluster(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*v1.Cluster, error) {
	out := new(v1.Cluster)
	err := c.cc.Invoke(ctx, Management_GetCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetClusterHealthStatus(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*v1.HealthStatus, error) {
	out := new(v1.HealthStatus)
	err := c.cc.Invoke(ctx, Management_GetClusterHealthStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) WatchClusterHealthStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Management_WatchClusterHealthStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &Management_ServiceDesc.Streams[1], Management_WatchClusterHealthStatus_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &managementWatchClusterHealthStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Management_WatchClusterHealthStatusClient interface {
	Recv() (*v1.ClusterHealthStatus, error)
	grpc.ClientStream
}

type managementWatchClusterHealthStatusClient struct {
	grpc.ClientStream
}

func (x *managementWatchClusterHealthStatusClient) Recv() (*v1.ClusterHealthStatus, error) {
	m := new(v1.ClusterHealthStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *managementClient) EditCluster(ctx context.Context, in *EditClusterRequest, opts ...grpc.CallOption) (*v1.Cluster, error) {
	out := new(v1.Cluster)
	err := c.cc.Invoke(ctx, Management_EditCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CreateRole(ctx context.Context, in *v1.Role, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) UpdateRole(ctx context.Context, in *v1.Role, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DeleteRole(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetRole(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*v1.Role, error) {
	out := new(v1.Role)
	err := c.cc.Invoke(ctx, Management_GetRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CreateRoleBinding(ctx context.Context, in *v1.RoleBinding, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_CreateRoleBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) UpdateRoleBinding(ctx context.Context, in *v1.RoleBinding, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_UpdateRoleBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DeleteRoleBinding(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_DeleteRoleBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetRoleBinding(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*v1.RoleBinding, error) {
	out := new(v1.RoleBinding)
	err := c.cc.Invoke(ctx, Management_GetRoleBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListRoles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.RoleList, error) {
	out := new(v1.RoleList)
	err := c.cc.Invoke(ctx, Management_ListRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListRoleBindings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.RoleBindingList, error) {
	out := new(v1.RoleBindingList)
	err := c.cc.Invoke(ctx, Management_ListRoleBindings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) SubjectAccess(ctx context.Context, in *v1.SubjectAccessRequest, opts ...grpc.CallOption) (*v1.ReferenceList, error) {
	out := new(v1.ReferenceList)
	err := c.cc.Invoke(ctx, Management_SubjectAccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) APIExtensions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIExtensionInfoList, error) {
	out := new(APIExtensionInfoList)
	err := c.cc.Invoke(ctx, Management_APIExtensions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GatewayConfig, error) {
	out := new(GatewayConfig)
	err := c.cc.Invoke(ctx, Management_GetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_UpdateConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListCapabilities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CapabilityList, error) {
	out := new(CapabilityList)
	err := c.cc.Invoke(ctx, Management_ListCapabilities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *managementClient) CapabilityInstaller(ctx context.Context, in *CapabilityInstallerRequest, opts ...grpc.CallOption) (*CapabilityInstallerResponse, error) {
	out := new(CapabilityInstallerResponse)
	err := c.cc.Invoke(ctx, Management_CapabilityInstaller_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) InstallCapability(ctx context.Context, in *CapabilityInstallRequest, opts ...grpc.CallOption) (*v11.InstallResponse, error) {
	out := new(v11.InstallResponse)
	err := c.cc.Invoke(ctx, Management_InstallCapability_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) UninstallCapability(ctx context.Context, in *CapabilityUninstallRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_UninstallCapability_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CapabilityStatus(ctx context.Context, in *CapabilityStatusRequest, opts ...grpc.CallOption) (*v11.NodeCapabilityStatus, error) {
	out := new(v11.NodeCapabilityStatus)
	err := c.cc.Invoke(ctx, Management_CapabilityStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CapabilityUninstallStatus(ctx context.Context, in *CapabilityStatusRequest, opts ...grpc.CallOption) (*v1.TaskStatus, error) {
	out := new(v1.TaskStatus)
	err := c.cc.Invoke(ctx, Management_CapabilityUninstallStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CancelCapabilityUninstall(ctx context.Context, in *CapabilityUninstallCancelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_CancelCapabilityUninstall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetDashboardSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DashboardSettings, error) {
	out := new(DashboardSettings)
	err := c.cc.Invoke(ctx, Management_GetDashboardSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) UpdateDashboardSettings(ctx context.Context, in *DashboardSettings, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_UpdateDashboardSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetAgentLogStream(ctx context.Context, in *StreamAgentLogsRequest, opts ...grpc.CallOption) (Management_GetAgentLogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Management_ServiceDesc.Streams[2], Management_GetAgentLogStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &managementGetAgentLogStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Management_GetAgentLogStreamClient interface {
	Recv() (*v12.StructuredLogRecord, error)
	grpc.ClientStream
}

type managementGetAgentLogStreamClient struct {
	grpc.ClientStream
}

func (x *managementGetAgentLogStreamClient) Recv() (*v12.StructuredLogRecord, error) {
	m := new(v12.StructuredLogRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ManagementServer is the server API for Management service.
// All implementations must embed UnimplementedManagementServer
// for forward compatibility
type ManagementServer interface {
	CreateBootstrapToken(context.Context, *CreateBootstrapTokenRequest) (*v1.BootstrapToken, error)
	RevokeBootstrapToken(context.Context, *v1.Reference) (*emptypb.Empty, error)
	ListBootstrapTokens(context.Context, *emptypb.Empty) (*v1.BootstrapTokenList, error)
	GetBootstrapToken(context.Context, *v1.Reference) (*v1.BootstrapToken, error)
	ListClusters(context.Context, *ListClustersRequest) (*v1.ClusterList, error)
	WatchClusters(*WatchClustersRequest, Management_WatchClustersServer) error
	DeleteCluster(context.Context, *v1.Reference) (*emptypb.Empty, error)
	CertsInfo(context.Context, *emptypb.Empty) (*CertsInfoResponse, error)
	GetCluster(context.Context, *v1.Reference) (*v1.Cluster, error)
	GetClusterHealthStatus(context.Context, *v1.Reference) (*v1.HealthStatus, error)
	WatchClusterHealthStatus(*emptypb.Empty, Management_WatchClusterHealthStatusServer) error
	EditCluster(context.Context, *EditClusterRequest) (*v1.Cluster, error)
	CreateRole(context.Context, *v1.Role) (*emptypb.Empty, error)
	UpdateRole(context.Context, *v1.Role) (*emptypb.Empty, error)
	DeleteRole(context.Context, *v1.Reference) (*emptypb.Empty, error)
	GetRole(context.Context, *v1.Reference) (*v1.Role, error)
	CreateRoleBinding(context.Context, *v1.RoleBinding) (*emptypb.Empty, error)
	UpdateRoleBinding(context.Context, *v1.RoleBinding) (*emptypb.Empty, error)
	DeleteRoleBinding(context.Context, *v1.Reference) (*emptypb.Empty, error)
	GetRoleBinding(context.Context, *v1.Reference) (*v1.RoleBinding, error)
	ListRoles(context.Context, *emptypb.Empty) (*v1.RoleList, error)
	ListRoleBindings(context.Context, *emptypb.Empty) (*v1.RoleBindingList, error)
	SubjectAccess(context.Context, *v1.SubjectAccessRequest) (*v1.ReferenceList, error)
	APIExtensions(context.Context, *emptypb.Empty) (*APIExtensionInfoList, error)
	GetConfig(context.Context, *emptypb.Empty) (*GatewayConfig, error)
	UpdateConfig(context.Context, *UpdateConfigRequest) (*emptypb.Empty, error)
	ListCapabilities(context.Context, *emptypb.Empty) (*CapabilityList, error)
	// Deprecated: Do not use.
	// Deprecated: For agent v2, use InstallCapability instead.
	CapabilityInstaller(context.Context, *CapabilityInstallerRequest) (*CapabilityInstallerResponse, error)
	InstallCapability(context.Context, *CapabilityInstallRequest) (*v11.InstallResponse, error)
	UninstallCapability(context.Context, *CapabilityUninstallRequest) (*emptypb.Empty, error)
	CapabilityStatus(context.Context, *CapabilityStatusRequest) (*v11.NodeCapabilityStatus, error)
	CapabilityUninstallStatus(context.Context, *CapabilityStatusRequest) (*v1.TaskStatus, error)
	CancelCapabilityUninstall(context.Context, *CapabilityUninstallCancelRequest) (*emptypb.Empty, error)
	GetDashboardSettings(context.Context, *emptypb.Empty) (*DashboardSettings, error)
	UpdateDashboardSettings(context.Context, *DashboardSettings) (*emptypb.Empty, error)
	GetAgentLogStream(*StreamAgentLogsRequest, Management_GetAgentLogStreamServer) error
	mustEmbedUnimplementedManagementServer()
}

// UnimplementedManagementServer must be embedded to have forward compatible implementations.
type UnimplementedManagementServer struct {
}

func (UnimplementedManagementServer) CreateBootstrapToken(context.Context, *CreateBootstrapTokenRequest) (*v1.BootstrapToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBootstrapToken not implemented")
}
func (UnimplementedManagementServer) RevokeBootstrapToken(context.Context, *v1.Reference) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeBootstrapToken not implemented")
}
func (UnimplementedManagementServer) ListBootstrapTokens(context.Context, *emptypb.Empty) (*v1.BootstrapTokenList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBootstrapTokens not implemented")
}
func (UnimplementedManagementServer) GetBootstrapToken(context.Context, *v1.Reference) (*v1.BootstrapToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootstrapToken not implemented")
}
func (UnimplementedManagementServer) ListClusters(context.Context, *ListClustersRequest) (*v1.ClusterList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (UnimplementedManagementServer) WatchClusters(*WatchClustersRequest, Management_WatchClustersServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchClusters not implemented")
}
func (UnimplementedManagementServer) DeleteCluster(context.Context, *v1.Reference) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCluster not implemented")
}
func (UnimplementedManagementServer) CertsInfo(context.Context, *emptypb.Empty) (*CertsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertsInfo not implemented")
}
func (UnimplementedManagementServer) GetCluster(context.Context, *v1.Reference) (*v1.Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedManagementServer) GetClusterHealthStatus(context.Context, *v1.Reference) (*v1.HealthStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterHealthStatus not implemented")
}
func (UnimplementedManagementServer) WatchClusterHealthStatus(*emptypb.Empty, Management_WatchClusterHealthStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchClusterHealthStatus not implemented")
}
func (UnimplementedManagementServer) EditCluster(context.Context, *EditClusterRequest) (*v1.Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCluster not implemented")
}
func (UnimplementedManagementServer) CreateRole(context.Context, *v1.Role) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedManagementServer) UpdateRole(context.Context, *v1.Role) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedManagementServer) DeleteRole(context.Context, *v1.Reference) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedManagementServer) GetRole(context.Context, *v1.Reference) (*v1.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedManagementServer) CreateRoleBinding(context.Context, *v1.RoleBinding) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoleBinding not implemented")
}
func (UnimplementedManagementServer) UpdateRoleBinding(context.Context, *v1.RoleBinding) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleBinding not implemented")
}
func (UnimplementedManagementServer) DeleteRoleBinding(context.Context, *v1.Reference) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleBinding not implemented")
}
func (UnimplementedManagementServer) GetRoleBinding(context.Context, *v1.Reference) (*v1.RoleBinding, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleBinding not implemented")
}
func (UnimplementedManagementServer) ListRoles(context.Context, *emptypb.Empty) (*v1.RoleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedManagementServer) ListRoleBindings(context.Context, *emptypb.Empty) (*v1.RoleBindingList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoleBindings not implemented")
}
func (UnimplementedManagementServer) SubjectAccess(context.Context, *v1.SubjectAccessRequest) (*v1.ReferenceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectAccess not implemented")
}
func (UnimplementedManagementServer) APIExtensions(context.Context, *emptypb.Empty) (*APIExtensionInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APIExtensions not implemented")
}
func (UnimplementedManagementServer) GetConfig(context.Context, *emptypb.Empty) (*GatewayConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedManagementServer) UpdateConfig(context.Context, *UpdateConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedManagementServer) ListCapabilities(context.Context, *emptypb.Empty) (*CapabilityList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCapabilities not implemented")
}
func (UnimplementedManagementServer) CapabilityInstaller(context.Context, *CapabilityInstallerRequest) (*CapabilityInstallerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CapabilityInstaller not implemented")
}
func (UnimplementedManagementServer) InstallCapability(context.Context, *CapabilityInstallRequest) (*v11.InstallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallCapability not implemented")
}
func (UnimplementedManagementServer) UninstallCapability(context.Context, *CapabilityUninstallRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallCapability not implemented")
}
func (UnimplementedManagementServer) CapabilityStatus(context.Context, *CapabilityStatusRequest) (*v11.NodeCapabilityStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CapabilityStatus not implemented")
}
func (UnimplementedManagementServer) CapabilityUninstallStatus(context.Context, *CapabilityStatusRequest) (*v1.TaskStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CapabilityUninstallStatus not implemented")
}
func (UnimplementedManagementServer) CancelCapabilityUninstall(context.Context, *CapabilityUninstallCancelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelCapabilityUninstall not implemented")
}
func (UnimplementedManagementServer) GetDashboardSettings(context.Context, *emptypb.Empty) (*DashboardSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardSettings not implemented")
}
func (UnimplementedManagementServer) UpdateDashboardSettings(context.Context, *DashboardSettings) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDashboardSettings not implemented")
}
func (UnimplementedManagementServer) GetAgentLogStream(*StreamAgentLogsRequest, Management_GetAgentLogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAgentLogStream not implemented")
}
func (UnimplementedManagementServer) mustEmbedUnimplementedManagementServer() {}

// UnsafeManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementServer will
// result in compilation errors.
type UnsafeManagementServer interface {
	mustEmbedUnimplementedManagementServer()
}

func RegisterManagementServer(s grpc.ServiceRegistrar, srv ManagementServer) {
	s.RegisterService(&Management_ServiceDesc, srv)
}

func _Management_CreateBootstrapToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBootstrapTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CreateBootstrapToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_CreateBootstrapToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CreateBootstrapToken(ctx, req.(*CreateBootstrapTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_RevokeBootstrapToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).RevokeBootstrapToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_RevokeBootstrapToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).RevokeBootstrapToken(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListBootstrapTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListBootstrapTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_ListBootstrapTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListBootstrapTokens(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetBootstrapToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetBootstrapToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetBootstrapToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetBootstrapToken(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_ListClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListClusters(ctx, req.(*ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_WatchClusters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchClustersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagementServer).WatchClusters(m, &managementWatchClustersServer{stream})
}

type Management_WatchClustersServer interface {
	Send(*WatchEvent) error
	grpc.ServerStream
}

type managementWatchClustersServer struct {
	grpc.ServerStream
}

func (x *managementWatchClustersServer) Send(m *WatchEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Management_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_DeleteCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeleteCluster(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CertsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CertsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_CertsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CertsInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetCluster(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetClusterHealthStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetClusterHealthStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetClusterHealthStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetClusterHealthStatus(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_WatchClusterHealthStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagementServer).WatchClusterHealthStatus(m, &managementWatchClusterHealthStatusServer{stream})
}

type Management_WatchClusterHealthStatusServer interface {
	Send(*v1.ClusterHealthStatus) error
	grpc.ServerStream
}

type managementWatchClusterHealthStatusServer struct {
	grpc.ServerStream
}

func (x *managementWatchClusterHealthStatusServer) Send(m *v1.ClusterHealthStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _Management_EditCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).EditCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_EditCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).EditCluster(ctx, req.(*EditClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CreateRole(ctx, req.(*v1.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).UpdateRole(ctx, req.(*v1.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeleteRole(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetRole(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CreateRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.RoleBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CreateRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_CreateRoleBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CreateRoleBinding(ctx, req.(*v1.RoleBinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_UpdateRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.RoleBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).UpdateRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_UpdateRoleBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).UpdateRoleBinding(ctx, req.(*v1.RoleBinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DeleteRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeleteRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_DeleteRoleBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeleteRoleBinding(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetRoleBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetRoleBinding(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListRoles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListRoleBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListRoleBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_ListRoleBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListRoleBindings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_SubjectAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.SubjectAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).SubjectAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_SubjectAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).SubjectAccess(ctx, req.(*v1.SubjectAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_APIExtensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).APIExtensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_APIExtensions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).APIExtensions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_UpdateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).UpdateConfig(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_ListCapabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListCapabilities(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CapabilityInstaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapabilityInstallerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CapabilityInstaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_CapabilityInstaller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CapabilityInstaller(ctx, req.(*CapabilityInstallerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_InstallCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapabilityInstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).InstallCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_InstallCapability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).InstallCapability(ctx, req.(*CapabilityInstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_UninstallCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapabilityUninstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).UninstallCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_UninstallCapability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).UninstallCapability(ctx, req.(*CapabilityUninstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CapabilityStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapabilityStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CapabilityStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_CapabilityStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CapabilityStatus(ctx, req.(*CapabilityStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CapabilityUninstallStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapabilityStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CapabilityUninstallStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_CapabilityUninstallStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CapabilityUninstallStatus(ctx, req.(*CapabilityStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CancelCapabilityUninstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapabilityUninstallCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CancelCapabilityUninstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_CancelCapabilityUninstall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CancelCapabilityUninstall(ctx, req.(*CapabilityUninstallCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetDashboardSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetDashboardSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetDashboardSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetDashboardSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_UpdateDashboardSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).UpdateDashboardSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_UpdateDashboardSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).UpdateDashboardSettings(ctx, req.(*DashboardSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetAgentLogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamAgentLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagementServer).GetAgentLogStream(m, &managementGetAgentLogStreamServer{stream})
}

type Management_GetAgentLogStreamServer interface {
	Send(*v12.StructuredLogRecord) error
	grpc.ServerStream
}

type managementGetAgentLogStreamServer struct {
	grpc.ServerStream
}

func (x *managementGetAgentLogStreamServer) Send(m *v12.StructuredLogRecord) error {
	return x.ServerStream.SendMsg(m)
}

// Management_ServiceDesc is the grpc.ServiceDesc for Management service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Management_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management.Management",
	HandlerType: (*ManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBootstrapToken",
			Handler:    _Management_CreateBootstrapToken_Handler,
		},
		{
			MethodName: "RevokeBootstrapToken",
			Handler:    _Management_RevokeBootstrapToken_Handler,
		},
		{
			MethodName: "ListBootstrapTokens",
			Handler:    _Management_ListBootstrapTokens_Handler,
		},
		{
			MethodName: "GetBootstrapToken",
			Handler:    _Management_GetBootstrapToken_Handler,
		},
		{
			MethodName: "ListClusters",
			Handler:    _Management_ListClusters_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _Management_DeleteCluster_Handler,
		},
		{
			MethodName: "CertsInfo",
			Handler:    _Management_CertsInfo_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _Management_GetCluster_Handler,
		},
		{
			MethodName: "GetClusterHealthStatus",
			Handler:    _Management_GetClusterHealthStatus_Handler,
		},
		{
			MethodName: "EditCluster",
			Handler:    _Management_EditCluster_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Management_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Management_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Management_DeleteRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _Management_GetRole_Handler,
		},
		{
			MethodName: "CreateRoleBinding",
			Handler:    _Management_CreateRoleBinding_Handler,
		},
		{
			MethodName: "UpdateRoleBinding",
			Handler:    _Management_UpdateRoleBinding_Handler,
		},
		{
			MethodName: "DeleteRoleBinding",
			Handler:    _Management_DeleteRoleBinding_Handler,
		},
		{
			MethodName: "GetRoleBinding",
			Handler:    _Management_GetRoleBinding_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _Management_ListRoles_Handler,
		},
		{
			MethodName: "ListRoleBindings",
			Handler:    _Management_ListRoleBindings_Handler,
		},
		{
			MethodName: "SubjectAccess",
			Handler:    _Management_SubjectAccess_Handler,
		},
		{
			MethodName: "APIExtensions",
			Handler:    _Management_APIExtensions_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _Management_GetConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _Management_UpdateConfig_Handler,
		},
		{
			MethodName: "ListCapabilities",
			Handler:    _Management_ListCapabilities_Handler,
		},
		{
			MethodName: "CapabilityInstaller",
			Handler:    _Management_CapabilityInstaller_Handler,
		},
		{
			MethodName: "InstallCapability",
			Handler:    _Management_InstallCapability_Handler,
		},
		{
			MethodName: "UninstallCapability",
			Handler:    _Management_UninstallCapability_Handler,
		},
		{
			MethodName: "CapabilityStatus",
			Handler:    _Management_CapabilityStatus_Handler,
		},
		{
			MethodName: "CapabilityUninstallStatus",
			Handler:    _Management_CapabilityUninstallStatus_Handler,
		},
		{
			MethodName: "CancelCapabilityUninstall",
			Handler:    _Management_CancelCapabilityUninstall_Handler,
		},
		{
			MethodName: "GetDashboardSettings",
			Handler:    _Management_GetDashboardSettings_Handler,
		},
		{
			MethodName: "UpdateDashboardSettings",
			Handler:    _Management_UpdateDashboardSettings_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchClusters",
			Handler:       _Management_WatchClusters_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchClusterHealthStatus",
			Handler:       _Management_WatchClusterHealthStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAgentLogStream",
			Handler:       _Management_GetAgentLogStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/rancher/opni/pkg/apis/management/v1/management.proto",
}
