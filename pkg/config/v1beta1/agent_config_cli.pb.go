// Code generated by internal/codegen/cli/generator.go. DO NOT EDIT.
// source: github.com/rancher/opni/pkg/config/v1beta1/agent_config.proto

package v1beta1

import (
	flagutil "github.com/rancher/opni/pkg/util/flagutil"
	pflag "github.com/spf13/pflag"
	strings "strings"
)

func (in *RulesSpec) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("RulesSpec", pflag.ExitOnError)
	fs.SortFlags = true
	if in.Discovery == nil {
		in.Discovery = &DiscoverySpec{}
	}
	fs.AddFlagSet(in.Discovery.FlagSet(append(prefix, "discovery")...))
	return fs
}

func (in *DiscoverySpec) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("DiscoverySpec", pflag.ExitOnError)
	fs.SortFlags = true
	if in.PrometheusRules == nil {
		in.PrometheusRules = &PrometheusRulesSpec{}
	}
	fs.AddFlagSet(in.PrometheusRules.FlagSet(append(prefix, "prometheus-rules")...))
	if in.Filesystem == nil {
		in.Filesystem = &FilesystemRulesSpec{}
	}
	fs.AddFlagSet(in.Filesystem.FlagSet(append(prefix, "filesystem")...))
	fs.Var(flagutil.StringPtrValue(nil, &in.Interval), strings.Join(append(prefix, "interval"), "."), "")
	return fs
}

func (in *PrometheusRulesSpec) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("PrometheusRulesSpec", pflag.ExitOnError)
	fs.SortFlags = true
	fs.StringSliceVar(&in.SearchNamespaces, strings.Join(append(prefix, "search-namespaces"), "."), nil, "Namespaces to search for rules in. If empty, will search all accessible")
	fs.Var(flagutil.StringPtrValue(nil, &in.Kubeconfig), strings.Join(append(prefix, "kubeconfig"), "."), "Kubeconfig to use for rule discovery. If nil, will use the in-cluster")
	return fs
}

func (in *FilesystemRulesSpec) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("FilesystemRulesSpec", pflag.ExitOnError)
	fs.SortFlags = true
	fs.StringSliceVar(&in.PathExpressions, strings.Join(append(prefix, "path-expressions"), "."), nil, "")
	return fs
}
