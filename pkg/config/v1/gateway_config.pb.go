// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v1.0.0
// source: github.com/rancher/opni/pkg/config/v1/gateway_config.proto

package configv1

import (
	_ "github.com/rancher/opni/internal/codegen/cli"
	v1 "github.com/rancher/opni/pkg/apis/core/v1"
	_ "github.com/rancher/opni/pkg/validation"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StorageBackend int32

const (
	// Use etcd for key-value storage. This is the recommended default.
	StorageBackend_Etcd StorageBackend = 0
	// Use NATS JetStream for key-value storage.
	StorageBackend_JetStream StorageBackend = 1
)

// Enum value maps for StorageBackend.
var (
	StorageBackend_name = map[int32]string{
		0: "Etcd",
		1: "JetStream",
	}
	StorageBackend_value = map[string]int32{
		"Etcd":      0,
		"JetStream": 1,
	}
)

func (x StorageBackend) Enum() *StorageBackend {
	p := new(StorageBackend)
	*p = x
	return p
}

func (x StorageBackend) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageBackend) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_enumTypes[0].Descriptor()
}

func (StorageBackend) Type() protoreflect.EnumType {
	return &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_enumTypes[0]
}

func (x StorageBackend) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageBackend.Descriptor instead.
func (StorageBackend) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{0}
}

type PatchEngine int32

const (
	PatchEngine_Bsdiff PatchEngine = 0
	PatchEngine_Zstd   PatchEngine = 1
)

// Enum value maps for PatchEngine.
var (
	PatchEngine_name = map[int32]string{
		0: "Bsdiff",
		1: "Zstd",
	}
	PatchEngine_value = map[string]int32{
		"Bsdiff": 0,
		"Zstd":   1,
	}
)

func (x PatchEngine) Enum() *PatchEngine {
	p := new(PatchEngine)
	*p = x
	return p
}

func (x PatchEngine) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatchEngine) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_enumTypes[1].Descriptor()
}

func (PatchEngine) Type() protoreflect.EnumType {
	return &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_enumTypes[1]
}

func (x PatchEngine) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatchEngine.Descriptor instead.
func (PatchEngine) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{1}
}

type CacheBackend int32

const (
	CacheBackend_Filesystem CacheBackend = 0
)

// Enum value maps for CacheBackend.
var (
	CacheBackend_name = map[int32]string{
		0: "Filesystem",
	}
	CacheBackend_value = map[string]int32{
		"Filesystem": 0,
	}
)

func (x CacheBackend) Enum() *CacheBackend {
	p := new(CacheBackend)
	*p = x
	return p
}

func (x CacheBackend) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CacheBackend) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_enumTypes[2].Descriptor()
}

func (CacheBackend) Type() protoreflect.EnumType {
	return &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_enumTypes[2]
}

func (x CacheBackend) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CacheBackend.Descriptor instead.
func (CacheBackend) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{2}
}

type AgentUpgradesSpec_Driver int32

const (
	AgentUpgradesSpec_Noop       AgentUpgradesSpec_Driver = 0
	AgentUpgradesSpec_Kubernetes AgentUpgradesSpec_Driver = 1
)

// Enum value maps for AgentUpgradesSpec_Driver.
var (
	AgentUpgradesSpec_Driver_name = map[int32]string{
		0: "Noop",
		1: "Kubernetes",
	}
	AgentUpgradesSpec_Driver_value = map[string]int32{
		"Noop":       0,
		"Kubernetes": 1,
	}
)

func (x AgentUpgradesSpec_Driver) Enum() *AgentUpgradesSpec_Driver {
	p := new(AgentUpgradesSpec_Driver)
	*p = x
	return p
}

func (x AgentUpgradesSpec_Driver) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentUpgradesSpec_Driver) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_enumTypes[3].Descriptor()
}

func (AgentUpgradesSpec_Driver) Type() protoreflect.EnumType {
	return &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_enumTypes[3]
}

func (x AgentUpgradesSpec_Driver) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentUpgradesSpec_Driver.Descriptor instead.
func (AgentUpgradesSpec_Driver) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{17, 0}
}

type PluginUpgradesSpec_Driver int32

const (
	PluginUpgradesSpec_Noop   PluginUpgradesSpec_Driver = 0
	PluginUpgradesSpec_Binary PluginUpgradesSpec_Driver = 1
)

// Enum value maps for PluginUpgradesSpec_Driver.
var (
	PluginUpgradesSpec_Driver_name = map[int32]string{
		0: "Noop",
		1: "Binary",
	}
	PluginUpgradesSpec_Driver_value = map[string]int32{
		"Noop":   0,
		"Binary": 1,
	}
)

func (x PluginUpgradesSpec_Driver) Enum() *PluginUpgradesSpec_Driver {
	p := new(PluginUpgradesSpec_Driver)
	*p = x
	return p
}

func (x PluginUpgradesSpec_Driver) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PluginUpgradesSpec_Driver) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_enumTypes[4].Descriptor()
}

func (PluginUpgradesSpec_Driver) Type() protoreflect.EnumType {
	return &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_enumTypes[4]
}

func (x PluginUpgradesSpec_Driver) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PluginUpgradesSpec_Driver.Descriptor instead.
func (PluginUpgradesSpec_Driver) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{18, 0}
}

type KubernetesAgentUpgradeSpec_ImageResolver int32

const (
	KubernetesAgentUpgradeSpec_Noop       KubernetesAgentUpgradeSpec_ImageResolver = 0
	KubernetesAgentUpgradeSpec_Kubernetes KubernetesAgentUpgradeSpec_ImageResolver = 1
)

// Enum value maps for KubernetesAgentUpgradeSpec_ImageResolver.
var (
	KubernetesAgentUpgradeSpec_ImageResolver_name = map[int32]string{
		0: "Noop",
		1: "Kubernetes",
	}
	KubernetesAgentUpgradeSpec_ImageResolver_value = map[string]int32{
		"Noop":       0,
		"Kubernetes": 1,
	}
)

func (x KubernetesAgentUpgradeSpec_ImageResolver) Enum() *KubernetesAgentUpgradeSpec_ImageResolver {
	p := new(KubernetesAgentUpgradeSpec_ImageResolver)
	*p = x
	return p
}

func (x KubernetesAgentUpgradeSpec_ImageResolver) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KubernetesAgentUpgradeSpec_ImageResolver) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_enumTypes[5].Descriptor()
}

func (KubernetesAgentUpgradeSpec_ImageResolver) Type() protoreflect.EnumType {
	return &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_enumTypes[5]
}

func (x KubernetesAgentUpgradeSpec_ImageResolver) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KubernetesAgentUpgradeSpec_ImageResolver.Descriptor instead.
func (KubernetesAgentUpgradeSpec_ImageResolver) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{20, 0}
}

type AuthSpec_Backend int32

const (
	AuthSpec_Basic  AuthSpec_Backend = 0
	AuthSpec_OpenID AuthSpec_Backend = 1
)

// Enum value maps for AuthSpec_Backend.
var (
	AuthSpec_Backend_name = map[int32]string{
		0: "Basic",
		1: "OpenID",
	}
	AuthSpec_Backend_value = map[string]int32{
		"Basic":  0,
		"OpenID": 1,
	}
)

func (x AuthSpec_Backend) Enum() *AuthSpec_Backend {
	p := new(AuthSpec_Backend)
	*p = x
	return p
}

func (x AuthSpec_Backend) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthSpec_Backend) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_enumTypes[6].Descriptor()
}

func (AuthSpec_Backend) Type() protoreflect.EnumType {
	return &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_enumTypes[6]
}

func (x AuthSpec_Backend) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthSpec_Backend.Descriptor instead.
func (AuthSpec_Backend) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{22, 0}
}

type GatewayConfigSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revision     *v1.Revision          `protobuf:"bytes,1,opt,name=revision,proto3" json:"revision,omitempty"`
	Server       *ServerSpec           `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
	Management   *ManagementServerSpec `protobuf:"bytes,3,opt,name=management,proto3" json:"management,omitempty"`
	Relay        *RelayServerSpec      `protobuf:"bytes,4,opt,name=relay,proto3" json:"relay,omitempty"`
	Health       *HealthServerSpec     `protobuf:"bytes,5,opt,name=health,proto3" json:"health,omitempty"`
	Dashboard    *DashboardServerSpec  `protobuf:"bytes,6,opt,name=dashboard,proto3" json:"dashboard,omitempty"`
	Storage      *StorageSpec          `protobuf:"bytes,7,opt,name=storage,proto3" json:"storage,omitempty"`
	Certs        *CertsSpec            `protobuf:"bytes,8,opt,name=certs,proto3" json:"certs,omitempty"`
	Plugins      *PluginsSpec          `protobuf:"bytes,9,opt,name=plugins,proto3" json:"plugins,omitempty"`
	Keyring      *KeyringSpec          `protobuf:"bytes,10,opt,name=keyring,proto3" json:"keyring,omitempty"`
	Upgrades     *UpgradesSpec         `protobuf:"bytes,11,opt,name=upgrades,proto3" json:"upgrades,omitempty"`
	RateLimiting *RateLimitingSpec     `protobuf:"bytes,12,opt,name=rateLimiting,proto3" json:"rateLimiting,omitempty"`
	Auth         *AuthSpec             `protobuf:"bytes,13,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *GatewayConfigSpec) Reset() {
	*x = GatewayConfigSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayConfigSpec) ProtoMessage() {}

func (x *GatewayConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayConfigSpec.ProtoReflect.Descriptor instead.
func (*GatewayConfigSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{0}
}

func (x *GatewayConfigSpec) GetRevision() *v1.Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *GatewayConfigSpec) GetServer() *ServerSpec {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *GatewayConfigSpec) GetManagement() *ManagementServerSpec {
	if x != nil {
		return x.Management
	}
	return nil
}

func (x *GatewayConfigSpec) GetRelay() *RelayServerSpec {
	if x != nil {
		return x.Relay
	}
	return nil
}

func (x *GatewayConfigSpec) GetHealth() *HealthServerSpec {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *GatewayConfigSpec) GetDashboard() *DashboardServerSpec {
	if x != nil {
		return x.Dashboard
	}
	return nil
}

func (x *GatewayConfigSpec) GetStorage() *StorageSpec {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *GatewayConfigSpec) GetCerts() *CertsSpec {
	if x != nil {
		return x.Certs
	}
	return nil
}

func (x *GatewayConfigSpec) GetPlugins() *PluginsSpec {
	if x != nil {
		return x.Plugins
	}
	return nil
}

func (x *GatewayConfigSpec) GetKeyring() *KeyringSpec {
	if x != nil {
		return x.Keyring
	}
	return nil
}

func (x *GatewayConfigSpec) GetUpgrades() *UpgradesSpec {
	if x != nil {
		return x.Upgrades
	}
	return nil
}

func (x *GatewayConfigSpec) GetRateLimiting() *RateLimitingSpec {
	if x != nil {
		return x.RateLimiting
	}
	return nil
}

func (x *GatewayConfigSpec) GetAuth() *AuthSpec {
	if x != nil {
		return x.Auth
	}
	return nil
}

type ServerSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address and port to serve the gateway's internal http server on.
	HttpListenAddress *string `protobuf:"bytes,1,opt,name=httpListenAddress,proto3,oneof" json:"httpListenAddress,omitempty"`
	// Address and port to serve the gateway's external grpc server on.
	GrpcListenAddress *string `protobuf:"bytes,2,opt,name=grpcListenAddress,proto3,oneof" json:"grpcListenAddress,omitempty"`
	// The advertise address for the server.
	AdvertiseAddress *string `protobuf:"bytes,3,opt,name=advertiseAddress,proto3,oneof" json:"advertiseAddress,omitempty"`
}

func (x *ServerSpec) Reset() {
	*x = ServerSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerSpec) ProtoMessage() {}

func (x *ServerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerSpec.ProtoReflect.Descriptor instead.
func (*ServerSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{1}
}

func (x *ServerSpec) GetHttpListenAddress() string {
	if x != nil && x.HttpListenAddress != nil {
		return *x.HttpListenAddress
	}
	return ""
}

func (x *ServerSpec) GetGrpcListenAddress() string {
	if x != nil && x.GrpcListenAddress != nil {
		return *x.GrpcListenAddress
	}
	return ""
}

func (x *ServerSpec) GetAdvertiseAddress() string {
	if x != nil && x.AdvertiseAddress != nil {
		return *x.AdvertiseAddress
	}
	return ""
}

type ManagementServerSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address and port to serve the management http server on.
	HttpListenAddress *string `protobuf:"bytes,1,opt,name=httpListenAddress,proto3,oneof" json:"httpListenAddress,omitempty"`
	// Address and port to serve the management grpc server on.
	GrpcListenAddress *string `protobuf:"bytes,2,opt,name=grpcListenAddress,proto3,oneof" json:"grpcListenAddress,omitempty"`
	// The advertise address for the management server.
	// This is the address at which other gateway instances will be able to reach
	// this management server.
	AdvertiseAddress *string `protobuf:"bytes,3,opt,name=advertiseAddress,proto3,oneof" json:"advertiseAddress,omitempty"`
}

func (x *ManagementServerSpec) Reset() {
	*x = ManagementServerSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagementServerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagementServerSpec) ProtoMessage() {}

func (x *ManagementServerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagementServerSpec.ProtoReflect.Descriptor instead.
func (*ManagementServerSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{2}
}

func (x *ManagementServerSpec) GetHttpListenAddress() string {
	if x != nil && x.HttpListenAddress != nil {
		return *x.HttpListenAddress
	}
	return ""
}

func (x *ManagementServerSpec) GetGrpcListenAddress() string {
	if x != nil && x.GrpcListenAddress != nil {
		return *x.GrpcListenAddress
	}
	return ""
}

func (x *ManagementServerSpec) GetAdvertiseAddress() string {
	if x != nil && x.AdvertiseAddress != nil {
		return *x.AdvertiseAddress
	}
	return ""
}

type RelayServerSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address and port to serve the relay grpc server on.
	GrpcListenAddress *string `protobuf:"bytes,4,opt,name=grpcListenAddress,proto3,oneof" json:"grpcListenAddress,omitempty"`
	// The advertise address for the relay server.
	// This is the address at which other gateway instances will be able to reach
	// this relay server. Configured automatically by the manager if not set.
	AdvertiseAddress *string `protobuf:"bytes,5,opt,name=advertiseAddress,proto3,oneof" json:"advertiseAddress,omitempty"`
}

func (x *RelayServerSpec) Reset() {
	*x = RelayServerSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayServerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayServerSpec) ProtoMessage() {}

func (x *RelayServerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayServerSpec.ProtoReflect.Descriptor instead.
func (*RelayServerSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{3}
}

func (x *RelayServerSpec) GetGrpcListenAddress() string {
	if x != nil && x.GrpcListenAddress != nil {
		return *x.GrpcListenAddress
	}
	return ""
}

func (x *RelayServerSpec) GetAdvertiseAddress() string {
	if x != nil && x.AdvertiseAddress != nil {
		return *x.AdvertiseAddress
	}
	return ""
}

type HealthServerSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address and port to serve the gateway's internal health/metrics/profiling http server on.
	HttpListenAddress *string `protobuf:"bytes,1,opt,name=httpListenAddress,proto3,oneof" json:"httpListenAddress,omitempty"`
}

func (x *HealthServerSpec) Reset() {
	*x = HealthServerSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthServerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthServerSpec) ProtoMessage() {}

func (x *HealthServerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthServerSpec.ProtoReflect.Descriptor instead.
func (*HealthServerSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{4}
}

func (x *HealthServerSpec) GetHttpListenAddress() string {
	if x != nil && x.HttpListenAddress != nil {
		return *x.HttpListenAddress
	}
	return ""
}

type DashboardServerSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address and port to serve the web dashboard on.
	HttpListenAddress *string `protobuf:"bytes,1,opt,name=httpListenAddress,proto3,oneof" json:"httpListenAddress,omitempty"`
	// The advertise address for the dashboard server.
	AdvertiseAddress *string `protobuf:"bytes,2,opt,name=advertiseAddress,proto3,oneof" json:"advertiseAddress,omitempty"`
	// The hostname at which the dashboard is expected to be reachable.
	// This is required when using OpenID Connect authentication.
	Hostname *string `protobuf:"bytes,3,opt,name=hostname,proto3,oneof" json:"hostname,omitempty"`
	// List of trusted proxies for the dashboard's http server.
	TrustedProxies []string `protobuf:"bytes,4,rep,name=trustedProxies,proto3" json:"trustedProxies,omitempty"`
}

func (x *DashboardServerSpec) Reset() {
	*x = DashboardServerSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardServerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardServerSpec) ProtoMessage() {}

func (x *DashboardServerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardServerSpec.ProtoReflect.Descriptor instead.
func (*DashboardServerSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{5}
}

func (x *DashboardServerSpec) GetHttpListenAddress() string {
	if x != nil && x.HttpListenAddress != nil {
		return *x.HttpListenAddress
	}
	return ""
}

func (x *DashboardServerSpec) GetAdvertiseAddress() string {
	if x != nil && x.AdvertiseAddress != nil {
		return *x.AdvertiseAddress
	}
	return ""
}

func (x *DashboardServerSpec) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *DashboardServerSpec) GetTrustedProxies() []string {
	if x != nil {
		return x.TrustedProxies
	}
	return nil
}

type StorageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key-value storage backend.
	Backend   *StorageBackend `protobuf:"varint,1,opt,name=backend,proto3,enum=config.v1.StorageBackend,oneof" json:"backend,omitempty"`
	Etcd      *EtcdSpec       `protobuf:"bytes,2,opt,name=etcd,proto3" json:"etcd,omitempty"`
	JetStream *JetStreamSpec  `protobuf:"bytes,3,opt,name=jetStream,proto3" json:"jetStream,omitempty"`
}

func (x *StorageSpec) Reset() {
	*x = StorageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageSpec) ProtoMessage() {}

func (x *StorageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageSpec.ProtoReflect.Descriptor instead.
func (*StorageSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{6}
}

func (x *StorageSpec) GetBackend() StorageBackend {
	if x != nil && x.Backend != nil {
		return *x.Backend
	}
	return StorageBackend_Etcd
}

func (x *StorageSpec) GetEtcd() *EtcdSpec {
	if x != nil {
		return x.Etcd
	}
	return nil
}

func (x *StorageSpec) GetJetStream() *JetStreamSpec {
	if x != nil {
		return x.JetStream
	}
	return nil
}

type EtcdSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Etcd server endpoints.
	Endpoints []string `protobuf:"bytes,1,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// Etcd client certificate configuration.
	Certs *MTLSSpec `protobuf:"bytes,2,opt,name=certs,proto3" json:"certs,omitempty"`
}

func (x *EtcdSpec) Reset() {
	*x = EtcdSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtcdSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtcdSpec) ProtoMessage() {}

func (x *EtcdSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtcdSpec.ProtoReflect.Descriptor instead.
func (*EtcdSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{7}
}

func (x *EtcdSpec) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *EtcdSpec) GetCerts() *MTLSSpec {
	if x != nil {
		return x.Certs
	}
	return nil
}

type MTLSSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path to the server CA certificate. Mutually exclusive with serverCAData.
	ServerCA *string `protobuf:"bytes,1,opt,name=serverCA,proto3,oneof" json:"serverCA,omitempty"`
	// PEM encoded server CA certificate data. Mutually exclusive with serverCA.
	ServerCAData *string `protobuf:"bytes,2,opt,name=serverCAData,proto3,oneof" json:"serverCAData,omitempty"`
	// Path to the client CA certificate (not needed in all cases). Mutually exclusive with clientCAData.
	ClientCA *string `protobuf:"bytes,3,opt,name=clientCA,proto3,oneof" json:"clientCA,omitempty"`
	// PEM encoded client CA certificate data. Mutually exclusive with clientCA.
	ClientCAData *string `protobuf:"bytes,4,opt,name=clientCAData,proto3,oneof" json:"clientCAData,omitempty"`
	// Path to the certificate used for client-cert auth. Mutually exclusive with clientCertData.
	ClientCert *string `protobuf:"bytes,5,opt,name=clientCert,proto3,oneof" json:"clientCert,omitempty"`
	// PEM encoded client certificate data. Mutually exclusive with clientCert.
	ClientCertData *string `protobuf:"bytes,6,opt,name=clientCertData,proto3,oneof" json:"clientCertData,omitempty"`
	// Path to the private key used for client-cert auth. Mutually exclusive with clientKeyData.
	ClientKey *string `protobuf:"bytes,7,opt,name=clientKey,proto3,oneof" json:"clientKey,omitempty"`
	// PEM encoded client key data. Mutually exclusive with clientKey.
	ClientKeyData *string `protobuf:"bytes,8,opt,name=clientKeyData,proto3,oneof" json:"clientKeyData,omitempty"`
}

func (x *MTLSSpec) Reset() {
	*x = MTLSSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MTLSSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MTLSSpec) ProtoMessage() {}

func (x *MTLSSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MTLSSpec.ProtoReflect.Descriptor instead.
func (*MTLSSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{8}
}

func (x *MTLSSpec) GetServerCA() string {
	if x != nil && x.ServerCA != nil {
		return *x.ServerCA
	}
	return ""
}

func (x *MTLSSpec) GetServerCAData() string {
	if x != nil && x.ServerCAData != nil {
		return *x.ServerCAData
	}
	return ""
}

func (x *MTLSSpec) GetClientCA() string {
	if x != nil && x.ClientCA != nil {
		return *x.ClientCA
	}
	return ""
}

func (x *MTLSSpec) GetClientCAData() string {
	if x != nil && x.ClientCAData != nil {
		return *x.ClientCAData
	}
	return ""
}

func (x *MTLSSpec) GetClientCert() string {
	if x != nil && x.ClientCert != nil {
		return *x.ClientCert
	}
	return ""
}

func (x *MTLSSpec) GetClientCertData() string {
	if x != nil && x.ClientCertData != nil {
		return *x.ClientCertData
	}
	return ""
}

func (x *MTLSSpec) GetClientKey() string {
	if x != nil && x.ClientKey != nil {
		return *x.ClientKey
	}
	return ""
}

func (x *MTLSSpec) GetClientKeyData() string {
	if x != nil && x.ClientKeyData != nil {
		return *x.ClientKeyData
	}
	return ""
}

type JetStreamSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Jetstream server endpoint.
	Endpoint *string `protobuf:"bytes,1,opt,name=endpoint,proto3,oneof" json:"endpoint,omitempty"`
	// Path to the Jetstream nkey seed.
	NkeySeedPath *string `protobuf:"bytes,2,opt,name=nkeySeedPath,proto3,oneof" json:"nkeySeedPath,omitempty"`
}

func (x *JetStreamSpec) Reset() {
	*x = JetStreamSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JetStreamSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JetStreamSpec) ProtoMessage() {}

func (x *JetStreamSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JetStreamSpec.ProtoReflect.Descriptor instead.
func (*JetStreamSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{9}
}

func (x *JetStreamSpec) GetEndpoint() string {
	if x != nil && x.Endpoint != nil {
		return *x.Endpoint
	}
	return ""
}

func (x *JetStreamSpec) GetNkeySeedPath() string {
	if x != nil && x.NkeySeedPath != nil {
		return *x.NkeySeedPath
	}
	return ""
}

type CertsSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path to a PEM encoded CA certificate file. Mutually exclusive with caCertData.
	CaCert *string `protobuf:"bytes,1,opt,name=caCert,proto3,oneof" json:"caCert,omitempty"`
	// PEM encoded CA certificate data. Mutually exclusive with caCert.
	CaCertData *string `protobuf:"bytes,2,opt,name=caCertData,proto3,oneof" json:"caCertData,omitempty"`
	// Path to a PEM encoded server certificate file. Mutually exclusive with servingCertData.
	ServingCert *string `protobuf:"bytes,3,opt,name=servingCert,proto3,oneof" json:"servingCert,omitempty"`
	// PEM encoded server certificate data. Mutually exclusive with servingCert.
	ServingCertData *string `protobuf:"bytes,4,opt,name=servingCertData,proto3,oneof" json:"servingCertData,omitempty"`
	// Path to a PEM encoded server key file. Mutually exclusive with servingKeyData.
	ServingKey *string `protobuf:"bytes,5,opt,name=servingKey,proto3,oneof" json:"servingKey,omitempty"`
	// String containing PEM encoded server key data. Mutually exclusive with servingKey.
	ServingKeyData *string `protobuf:"bytes,6,opt,name=servingKeyData,proto3,oneof" json:"servingKeyData,omitempty"`
}

func (x *CertsSpec) Reset() {
	*x = CertsSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertsSpec) ProtoMessage() {}

func (x *CertsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertsSpec.ProtoReflect.Descriptor instead.
func (*CertsSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{10}
}

func (x *CertsSpec) GetCaCert() string {
	if x != nil && x.CaCert != nil {
		return *x.CaCert
	}
	return ""
}

func (x *CertsSpec) GetCaCertData() string {
	if x != nil && x.CaCertData != nil {
		return *x.CaCertData
	}
	return ""
}

func (x *CertsSpec) GetServingCert() string {
	if x != nil && x.ServingCert != nil {
		return *x.ServingCert
	}
	return ""
}

func (x *CertsSpec) GetServingCertData() string {
	if x != nil && x.ServingCertData != nil {
		return *x.ServingCertData
	}
	return ""
}

func (x *CertsSpec) GetServingKey() string {
	if x != nil && x.ServingKey != nil {
		return *x.ServingKey
	}
	return ""
}

func (x *CertsSpec) GetServingKeyData() string {
	if x != nil && x.ServingKeyData != nil {
		return *x.ServingKeyData
	}
	return ""
}

type PluginsSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Directory to search for plugin binaries.
	Dir *string `protobuf:"bytes,1,opt,name=dir,proto3,oneof" json:"dir,omitempty"`
	// Optional set of filters which can be used to prevent specific plugins
	// from being loaded.
	Filters *PluginFilters `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	// Plugin cache configuration.
	Cache *CacheSpec `protobuf:"bytes,4,opt,name=cache,proto3" json:"cache,omitempty"`
}

func (x *PluginsSpec) Reset() {
	*x = PluginsSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginsSpec) ProtoMessage() {}

func (x *PluginsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginsSpec.ProtoReflect.Descriptor instead.
func (*PluginsSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{11}
}

func (x *PluginsSpec) GetDir() string {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return ""
}

func (x *PluginsSpec) GetFilters() *PluginFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *PluginsSpec) GetCache() *CacheSpec {
	if x != nil {
		return x.Cache
	}
	return nil
}

type PluginFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of plugin go module paths not to load.
	Exclude []string `protobuf:"bytes,1,rep,name=exclude,proto3" json:"exclude,omitempty"`
}

func (x *PluginFilters) Reset() {
	*x = PluginFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginFilters) ProtoMessage() {}

func (x *PluginFilters) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginFilters.ProtoReflect.Descriptor instead.
func (*PluginFilters) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{12}
}

func (x *PluginFilters) GetExclude() []string {
	if x != nil {
		return x.Exclude
	}
	return nil
}

type CacheSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cache backend to use for storing plugin binaries and patches.
	Backend *CacheBackend `protobuf:"varint,2,opt,name=backend,proto3,enum=config.v1.CacheBackend,oneof" json:"backend,omitempty"`
	// Filesystem cache configuration. Required if backend is Filesystem.
	Filesystem *FilesystemCacheSpec `protobuf:"bytes,3,opt,name=filesystem,proto3" json:"filesystem,omitempty"`
}

func (x *CacheSpec) Reset() {
	*x = CacheSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheSpec) ProtoMessage() {}

func (x *CacheSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheSpec.ProtoReflect.Descriptor instead.
func (*CacheSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{13}
}

func (x *CacheSpec) GetBackend() CacheBackend {
	if x != nil && x.Backend != nil {
		return *x.Backend
	}
	return CacheBackend_Filesystem
}

func (x *CacheSpec) GetFilesystem() *FilesystemCacheSpec {
	if x != nil {
		return x.Filesystem
	}
	return nil
}

type FilesystemCacheSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Directory to store plugin binaries and patches in.
	Dir *string `protobuf:"bytes,1,opt,name=dir,proto3,oneof" json:"dir,omitempty"`
}

func (x *FilesystemCacheSpec) Reset() {
	*x = FilesystemCacheSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemCacheSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemCacheSpec) ProtoMessage() {}

func (x *FilesystemCacheSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemCacheSpec.ProtoReflect.Descriptor instead.
func (*FilesystemCacheSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{14}
}

func (x *FilesystemCacheSpec) GetDir() string {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return ""
}

type KeyringSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Directories to search for files containing runtime keys.
	// All files in these directories will be loaded into the keyring on
	// startup. Keys loaded in this way will not be persisted.
	RuntimeKeyDirs []string `protobuf:"bytes,1,rep,name=runtimeKeyDirs,proto3" json:"runtimeKeyDirs,omitempty"`
}

func (x *KeyringSpec) Reset() {
	*x = KeyringSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyringSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyringSpec) ProtoMessage() {}

func (x *KeyringSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyringSpec.ProtoReflect.Descriptor instead.
func (*KeyringSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{15}
}

func (x *KeyringSpec) GetRuntimeKeyDirs() []string {
	if x != nil {
		return x.RuntimeKeyDirs
	}
	return nil
}

type UpgradesSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agents  *AgentUpgradesSpec  `protobuf:"bytes,1,opt,name=agents,proto3,oneof" json:"agents,omitempty"`
	Plugins *PluginUpgradesSpec `protobuf:"bytes,2,opt,name=plugins,proto3,oneof" json:"plugins,omitempty"`
}

func (x *UpgradesSpec) Reset() {
	*x = UpgradesSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradesSpec) ProtoMessage() {}

func (x *UpgradesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradesSpec.ProtoReflect.Descriptor instead.
func (*UpgradesSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{16}
}

func (x *UpgradesSpec) GetAgents() *AgentUpgradesSpec {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *UpgradesSpec) GetPlugins() *PluginUpgradesSpec {
	if x != nil {
		return x.Plugins
	}
	return nil
}

type AgentUpgradesSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Agent upgrade driver to use.
	Driver *AgentUpgradesSpec_Driver `protobuf:"varint,1,opt,name=driver,proto3,enum=config.v1.AgentUpgradesSpec_Driver,oneof" json:"driver,omitempty"`
	// Kubernetes agent upgrade configuration.
	Kubernetes *KubernetesAgentUpgradeSpec `protobuf:"bytes,2,opt,name=kubernetes,proto3" json:"kubernetes,omitempty"`
}

func (x *AgentUpgradesSpec) Reset() {
	*x = AgentUpgradesSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentUpgradesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentUpgradesSpec) ProtoMessage() {}

func (x *AgentUpgradesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentUpgradesSpec.ProtoReflect.Descriptor instead.
func (*AgentUpgradesSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{17}
}

func (x *AgentUpgradesSpec) GetDriver() AgentUpgradesSpec_Driver {
	if x != nil && x.Driver != nil {
		return *x.Driver
	}
	return AgentUpgradesSpec_Noop
}

func (x *AgentUpgradesSpec) GetKubernetes() *KubernetesAgentUpgradeSpec {
	if x != nil {
		return x.Kubernetes
	}
	return nil
}

type PluginUpgradesSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Plugin upgrade driver to use.
	Driver *PluginUpgradesSpec_Driver `protobuf:"varint,1,opt,name=driver,proto3,enum=config.v1.PluginUpgradesSpec_Driver,oneof" json:"driver,omitempty"`
	// Binary plugin upgrade configuration.
	Binary *BinaryPluginUpgradeSpec `protobuf:"bytes,2,opt,name=binary,proto3" json:"binary,omitempty"`
}

func (x *PluginUpgradesSpec) Reset() {
	*x = PluginUpgradesSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginUpgradesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginUpgradesSpec) ProtoMessage() {}

func (x *PluginUpgradesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginUpgradesSpec.ProtoReflect.Descriptor instead.
func (*PluginUpgradesSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{18}
}

func (x *PluginUpgradesSpec) GetDriver() PluginUpgradesSpec_Driver {
	if x != nil && x.Driver != nil {
		return *x.Driver
	}
	return PluginUpgradesSpec_Noop
}

func (x *PluginUpgradesSpec) GetBinary() *BinaryPluginUpgradeSpec {
	if x != nil {
		return x.Binary
	}
	return nil
}

type BinaryPluginUpgradeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Patch engine to use for calculating plugin patches.
	PatchEngine *PatchEngine `protobuf:"varint,1,opt,name=patchEngine,proto3,enum=config.v1.PatchEngine,oneof" json:"patchEngine,omitempty"`
}

func (x *BinaryPluginUpgradeSpec) Reset() {
	*x = BinaryPluginUpgradeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryPluginUpgradeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryPluginUpgradeSpec) ProtoMessage() {}

func (x *BinaryPluginUpgradeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryPluginUpgradeSpec.ProtoReflect.Descriptor instead.
func (*BinaryPluginUpgradeSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{19}
}

func (x *BinaryPluginUpgradeSpec) GetPatchEngine() PatchEngine {
	if x != nil && x.PatchEngine != nil {
		return *x.PatchEngine
	}
	return PatchEngine_Bsdiff
}

type KubernetesAgentUpgradeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Agent image resolver to use.
	ImageResolver *KubernetesAgentUpgradeSpec_ImageResolver `protobuf:"varint,1,opt,name=imageResolver,proto3,enum=config.v1.KubernetesAgentUpgradeSpec_ImageResolver,oneof" json:"imageResolver,omitempty"`
	Namespace     *string                                   `protobuf:"bytes,2,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
	RepoOverride  *string                                   `protobuf:"bytes,3,opt,name=repoOverride,proto3,oneof" json:"repoOverride,omitempty"`
}

func (x *KubernetesAgentUpgradeSpec) Reset() {
	*x = KubernetesAgentUpgradeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesAgentUpgradeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesAgentUpgradeSpec) ProtoMessage() {}

func (x *KubernetesAgentUpgradeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesAgentUpgradeSpec.ProtoReflect.Descriptor instead.
func (*KubernetesAgentUpgradeSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{20}
}

func (x *KubernetesAgentUpgradeSpec) GetImageResolver() KubernetesAgentUpgradeSpec_ImageResolver {
	if x != nil && x.ImageResolver != nil {
		return *x.ImageResolver
	}
	return KubernetesAgentUpgradeSpec_Noop
}

func (x *KubernetesAgentUpgradeSpec) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *KubernetesAgentUpgradeSpec) GetRepoOverride() string {
	if x != nil && x.RepoOverride != nil {
		return *x.RepoOverride
	}
	return ""
}

type RateLimitingSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base event rate used for rate limiting agent connection attempts.
	Rate *float64 `protobuf:"fixed64,1,opt,name=rate,proto3,oneof" json:"rate,omitempty"`
	// Burst event rate.
	Burst *int32 `protobuf:"varint,2,opt,name=burst,proto3,oneof" json:"burst,omitempty"`
}

func (x *RateLimitingSpec) Reset() {
	*x = RateLimitingSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitingSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitingSpec) ProtoMessage() {}

func (x *RateLimitingSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitingSpec.ProtoReflect.Descriptor instead.
func (*RateLimitingSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{21}
}

func (x *RateLimitingSpec) GetRate() float64 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

func (x *RateLimitingSpec) GetBurst() int32 {
	if x != nil && x.Burst != nil {
		return *x.Burst
	}
	return 0
}

type AuthSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Auth backend to use.
	Backend AuthSpec_Backend `protobuf:"varint,1,opt,name=backend,proto3,enum=config.v1.AuthSpec_Backend" json:"backend,omitempty"`
	// Basic auth using a username and password.
	Basic *BasicAuthSpec `protobuf:"bytes,3,opt,name=basic,proto3" json:"basic,omitempty"`
	// OpenID Connect auth.
	Openid *OpenIDAuthSpec `protobuf:"bytes,2,opt,name=openid,proto3" json:"openid,omitempty"`
}

func (x *AuthSpec) Reset() {
	*x = AuthSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthSpec) ProtoMessage() {}

func (x *AuthSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthSpec.ProtoReflect.Descriptor instead.
func (*AuthSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{22}
}

func (x *AuthSpec) GetBackend() AuthSpec_Backend {
	if x != nil {
		return x.Backend
	}
	return AuthSpec_Basic
}

func (x *AuthSpec) GetBasic() *BasicAuthSpec {
	if x != nil {
		return x.Basic
	}
	return nil
}

func (x *AuthSpec) GetOpenid() *OpenIDAuthSpec {
	if x != nil {
		return x.Openid
	}
	return nil
}

type OpenIDAuthSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The OP's Issuer identifier. This must exactly match the issuer URL
	// obtained from the discovery endpoint, and will match the `iss' claim
	// in the ID Tokens issued by the OP.
	// The discovery endpoint consists of this URL concatenated with the
	// exact string `/.well-known/openid-configuration'.
	Issuer *string `protobuf:"bytes,1,opt,name=issuer,proto3,oneof" json:"issuer,omitempty"`
	// Optional PEM-encoded CA certificate data for the issuer.
	CaCertData *string `protobuf:"bytes,2,opt,name=caCertData,proto3,oneof" json:"caCertData,omitempty"`
	// The RP's client ID.
	ClientId *string `protobuf:"bytes,3,opt,name=clientId,proto3,oneof" json:"clientId,omitempty"`
	// The RP's client secret.
	ClientSecret *string `protobuf:"bytes,4,opt,name=clientSecret,proto3,oneof" json:"clientSecret,omitempty"`
	// IdentifyingClaim is the claim that will be used to identify the user
	// (e.g. "sub", "email", etc). Defaults to "sub".
	IdentifyingClaim *string `protobuf:"bytes,5,opt,name=identifyingClaim,proto3,oneof" json:"identifyingClaim,omitempty"`
	// Scope specifies optional requested permissions.
	Scopes []string `protobuf:"bytes,6,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *OpenIDAuthSpec) Reset() {
	*x = OpenIDAuthSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenIDAuthSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenIDAuthSpec) ProtoMessage() {}

func (x *OpenIDAuthSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenIDAuthSpec.ProtoReflect.Descriptor instead.
func (*OpenIDAuthSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{23}
}

func (x *OpenIDAuthSpec) GetIssuer() string {
	if x != nil && x.Issuer != nil {
		return *x.Issuer
	}
	return ""
}

func (x *OpenIDAuthSpec) GetCaCertData() string {
	if x != nil && x.CaCertData != nil {
		return *x.CaCertData
	}
	return ""
}

func (x *OpenIDAuthSpec) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *OpenIDAuthSpec) GetClientSecret() string {
	if x != nil && x.ClientSecret != nil {
		return *x.ClientSecret
	}
	return ""
}

func (x *OpenIDAuthSpec) GetIdentifyingClaim() string {
	if x != nil && x.IdentifyingClaim != nil {
		return *x.IdentifyingClaim
	}
	return ""
}

func (x *OpenIDAuthSpec) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type BasicAuthSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BasicAuthSpec) Reset() {
	*x = BasicAuthSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicAuthSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicAuthSpec) ProtoMessage() {}

func (x *BasicAuthSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicAuthSpec.ProtoReflect.Descriptor instead.
func (*BasicAuthSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{24}
}

var File_github_com_rancher_opni_pkg_config_v1_gateway_config_proto protoreflect.FileDescriptor

var file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65,
	0x6e, 0x2f, 0x63, 0x6c, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x08, 0x0a, 0x11,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x06, 0x8a, 0xc0, 0x0c, 0x02, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x05, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x09,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x09, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x42, 0x06, 0x8a, 0xc0, 0x0c, 0x02, 0x28, 0x01, 0x52, 0x07, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x63, 0x65, 0x72, 0x74, 0x73,
	0x12, 0x30, 0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x08, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x08, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x72, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x70, 0x65, 0x63, 0x42, 0x06, 0x8a,
	0xc0, 0x0c, 0x02, 0x28, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x3a, 0xe4, 0x02, 0xba, 0x48,
	0xe0, 0x02, 0x1a, 0xdd, 0x02, 0x0a, 0x1b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x2a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x20, 0x6d, 0x75, 0x73,
	0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x1a, 0x91,
	0x02, 0x5b, 0x20, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x68, 0x74, 0x74, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2c, 0x20, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2c, 0x20, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2c, 0x20, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2c, 0x20, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2c, 0x20, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2c, 0x20, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5d, 0x2e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x28, 0x61, 0x2c, 0x20, 0x21, 0x61, 0x2e, 0x65, 0x6e, 0x64, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x28, 0x27, 0x3a, 0x30, 0x27, 0x29, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x28, 0x29, 0x22, 0xda, 0x04, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x84, 0x01, 0x0a, 0x11, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x51, 0xba,
	0x48, 0x3c, 0xba, 0x01, 0x39, 0x0a, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x1a, 0x1b, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x28, 0x29, 0x8a, 0xc0,
	0x0c, 0x0e, 0x0a, 0x0c, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x3a, 0x38, 0x30, 0x38, 0x30,
	0x48, 0x00, 0x52, 0x11, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x84, 0x01, 0x0a, 0x11, 0x67, 0x72, 0x70,
	0x63, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x51, 0xba, 0x48, 0x3c, 0xba, 0x01, 0x39, 0x0a, 0x1a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x1b, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x69,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x28, 0x29, 0x8a, 0xc0, 0x0c, 0x0e, 0x0a, 0x0c, 0x30, 0x2e, 0x30, 0x2e, 0x30,
	0x2e, 0x30, 0x3a, 0x39, 0x30, 0x39, 0x30, 0x48, 0x01, 0x52, 0x11, 0x67, 0x72, 0x70, 0x63, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0xfc, 0x01, 0x0a, 0x10, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0xca, 0x01, 0xba, 0x48, 0xc0,
	0x01, 0xba, 0x01, 0x3c, 0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x1a, 0x1b, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x28, 0x29,
	0xba, 0x01, 0x7e, 0x0a, 0x22, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20,
	0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x7a, 0x65, 0x72, 0x6f, 0x20,
	0x70, 0x6f, 0x72, 0x74, 0x1a, 0x2b, 0x21, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x65, 0x6e, 0x64, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x28, 0x27, 0x3a, 0x30, 0x27, 0x29, 0x20, 0x26, 0x26, 0x20, 0x21, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x65, 0x6e, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x27, 0x3a, 0x27,
	0x29, 0x8a, 0xc0, 0x0c, 0x02, 0x28, 0x01, 0x48, 0x02, 0x52, 0x10, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0xde, 0x04, 0x0a, 0x14, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x83, 0x01, 0x0a, 0x11, 0x68, 0x74, 0x74,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0xba, 0x48, 0x3a, 0xba, 0x01, 0x37, 0x0a, 0x18, 0x6d, 0x67,
	0x6d, 0x74, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x1b, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x69, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x28, 0x29, 0x8a, 0xc0, 0x0c, 0x0f, 0x0a, 0x0d, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x30,
	0x3a, 0x31, 0x31, 0x30, 0x38, 0x30, 0x48, 0x00, 0x52, 0x11, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x83,
	0x01, 0x0a, 0x11, 0x67, 0x72, 0x70, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0xba, 0x48, 0x3a, 0xba,
	0x01, 0x37, 0x0a, 0x18, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x1b, 0x74, 0x68,
	0x69, 0x73, 0x2e, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x28, 0x29, 0x8a, 0xc0, 0x0c, 0x0f, 0x0a, 0x0d, 0x30,
	0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x3a, 0x31, 0x31, 0x30, 0x39, 0x30, 0x48, 0x01, 0x52, 0x11,
	0x67, 0x72, 0x70, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x88, 0x01, 0x01, 0x12, 0xf8, 0x01, 0x0a, 0x10, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0xc6, 0x01, 0xba, 0x48, 0xbc, 0x01, 0xba, 0x01, 0x3a, 0x0a, 0x1b, 0x6d, 0x67, 0x6d, 0x74, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x1b, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x69, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x28, 0x29, 0xba, 0x01, 0x7c, 0x0a, 0x20, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x74,
	0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x7a, 0x65, 0x72, 0x6f,
	0x20, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x2b, 0x21, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x65, 0x6e, 0x64,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x27, 0x3a, 0x30, 0x27, 0x29, 0x20, 0x26, 0x26, 0x20, 0x21,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x65, 0x6e, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x27, 0x3a,
	0x27, 0x29, 0x8a, 0xc0, 0x0c, 0x02, 0x28, 0x01, 0x48, 0x02, 0x52, 0x10, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0xc0, 0x03, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x84, 0x01, 0x0a, 0x11, 0x67, 0x72, 0x70, 0x63, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x51, 0xba, 0x48, 0x3b, 0xba, 0x01, 0x38, 0x0a, 0x19, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x1a, 0x1b, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x28, 0x29,
	0x8a, 0xc0, 0x0c, 0x0f, 0x0a, 0x0d, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x3a, 0x31, 0x31,
	0x31, 0x39, 0x30, 0x48, 0x00, 0x52, 0x11, 0x67, 0x72, 0x70, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0xfa, 0x01, 0x0a, 0x10,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0xc8, 0x01, 0xba, 0x48, 0xbe, 0x01, 0xba, 0x01, 0x3b,
	0x0a, 0x1c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x1b,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x28, 0x29, 0xba, 0x01, 0x7d, 0x0a, 0x21,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x2b, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x20, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61,
	0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x7a, 0x65, 0x72, 0x6f, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x2b,
	0x21, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x65, 0x6e, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x27,
	0x3a, 0x30, 0x27, 0x29, 0x20, 0x26, 0x26, 0x20, 0x21, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x65, 0x6e,
	0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x27, 0x3a, 0x27, 0x29, 0x8a, 0xc0, 0x0c, 0x02, 0x28,
	0x01, 0x48, 0x01, 0x52, 0x10, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x84, 0x01, 0x0a, 0x11, 0x68, 0x74, 0x74,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x51, 0xba, 0x48, 0x3c, 0xba, 0x01, 0x39, 0x0a, 0x1a, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x1b, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x69,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x28, 0x29, 0x8a, 0xc0, 0x0c, 0x0e, 0x0a, 0x0c, 0x30, 0x2e, 0x30, 0x2e, 0x30,
	0x2e, 0x30, 0x3a, 0x38, 0x30, 0x38, 0x36, 0x48, 0x00, 0x52, 0x11, 0x68, 0x74, 0x74, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x90, 0x05, 0x0a, 0x13, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x88, 0x01,
	0x0a, 0x11, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x55, 0xba, 0x48, 0x3f, 0xba, 0x01,
	0x3c, 0x0a, 0x1d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x1a, 0x1b, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x28, 0x29, 0x8a, 0xc0, 0x0c,
	0x0f, 0x0a, 0x0d, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x3a, 0x31, 0x32, 0x30, 0x38, 0x30,
	0x48, 0x00, 0x52, 0x11, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x83, 0x02, 0x0a, 0x10, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0xd1, 0x01, 0xba, 0x48, 0xc7, 0x01, 0xba, 0x01, 0x3f, 0x0a, 0x20, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a,
	0x1b, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x28, 0x29, 0xba, 0x01, 0x81, 0x01,
	0x0a, 0x25, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20,
	0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x7a, 0x65, 0x72, 0x6f, 0x20,
	0x70, 0x6f, 0x72, 0x74, 0x1a, 0x2b, 0x21, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x65, 0x6e, 0x64, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x28, 0x27, 0x3a, 0x30, 0x27, 0x29, 0x20, 0x26, 0x26, 0x20, 0x21, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x65, 0x6e, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x27, 0x3a, 0x27,
	0x29, 0x8a, 0xc0, 0x0c, 0x02, 0x28, 0x01, 0x48, 0x01, 0x52, 0x10, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x68, 0x01, 0x48, 0x02, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x5d, 0xba, 0x48, 0x5a, 0x92, 0x01, 0x57, 0x22, 0x55, 0xba, 0x01, 0x52, 0x0a, 0x0a,
	0x69, 0x70, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x12, 0x22, 0x6d, 0x75, 0x73, 0x74,
	0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x49, 0x50, 0x20, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x43, 0x49, 0x44, 0x52, 0x1a, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x69, 0x73, 0x49, 0x70, 0x28, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x69, 0x73, 0x49, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x28, 0x29,
	0x52, 0x0e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc9, 0x03, 0x0a, 0x0b, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4c, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x42, 0x12, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x8a, 0xc0,
	0x0c, 0x06, 0x0a, 0x04, 0x45, 0x74, 0x63, 0x64, 0x48, 0x00, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x04, 0x65, 0x74, 0x63, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x74, 0x63, 0x64, 0x53, 0x70, 0x65, 0x63, 0x42, 0x1f, 0xba, 0x48, 0x1c, 0xda, 0x01,
	0x19, 0x0a, 0x04, 0x65, 0x74, 0x63, 0x64, 0x1a, 0x11, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x52, 0x04, 0x65, 0x74, 0x63, 0x64,
	0x12, 0x5c, 0x0a, 0x09, 0x6a, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x4a, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x42, 0x24, 0xba,
	0x48, 0x21, 0xda, 0x01, 0x1e, 0x0a, 0x09, 0x6a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x1a, 0x11, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x20, 0x21,
	0x3d, 0x20, 0x31, 0x52, 0x09, 0x6a, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x3a, 0xb7,
	0x01, 0xba, 0x48, 0xb3, 0x01, 0x1a, 0xb0, 0x01, 0x0a, 0x1a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x64, 0x12, 0x3d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x20, 0x6d,
	0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x73, 0x65, 0x74, 0x1a, 0x53, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x20, 0x26, 0x26, 0x20, 0x68, 0x61, 0x73, 0x28, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x65, 0x74, 0x63, 0x64, 0x29, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x28, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x20, 0x3d, 0x3d, 0x20, 0x31,
	0x20, 0x26, 0x26, 0x20, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6a, 0x65, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x29, 0x29, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x22, 0x66, 0x0a, 0x08, 0x45, 0x74, 0x63, 0x64, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x2f, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x11, 0xba, 0x48, 0x0e, 0x92, 0x01, 0x0b, 0x08, 0x01, 0x18, 0x01, 0x22,
	0x05, 0x72, 0x03, 0x90, 0x01, 0x01, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x29, 0x0a, 0x05, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x54, 0x4c,
	0x53, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x63, 0x65, 0x72, 0x74, 0x73, 0x22, 0x9f, 0x0b, 0x0a,
	0x08, 0x4d, 0x54, 0x4c, 0x53, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x41, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x41, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x41, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x35, 0xba, 0x48, 0x2c, 0xba, 0x01, 0x29, 0x0a, 0x13, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x12, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x78, 0x35, 0x30, 0x39, 0x49, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x28,
	0x29, 0x8a, 0xc0, 0x0c, 0x02, 0x18, 0x01, 0x48, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x41, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x41, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x41, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x0c, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x41, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x35, 0xba, 0x48, 0x2c, 0xba, 0x01, 0x29, 0x0a, 0x13, 0x78, 0x35, 0x30, 0x39, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x12,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x78, 0x35, 0x30, 0x39, 0x49, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x28, 0x29, 0x8a, 0xc0, 0x0c, 0x02, 0x18, 0x01, 0x48, 0x03, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x41, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x64, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xba, 0x48, 0x2e, 0xba, 0x01, 0x2b,
	0x0a, 0x15, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x12, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x78, 0x35,
	0x30, 0x39, 0x49, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x28, 0x29, 0x8a, 0xc0, 0x0c, 0x02, 0x18,
	0x01, 0x48, 0x05, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x34, 0xba, 0x48, 0x2b, 0xba, 0x01, 0x28, 0x0a, 0x13, 0x70, 0x65, 0x6d, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x11, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x70, 0x65, 0x6d, 0x49, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x28, 0x29,
	0x8a, 0xc0, 0x0c, 0x02, 0x18, 0x01, 0x48, 0x07, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x3a, 0x83, 0x06, 0xba, 0x48, 0xff,
	0x05, 0x1a, 0x8e, 0x01, 0x0a, 0x22, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6d, 0x75, 0x74,
	0x75, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x63, 0x61, 0x12, 0x37, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x41, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x41, 0x44, 0x61, 0x74, 0x61, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6d,
	0x75, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x1a, 0x2f, 0x21, 0x28, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x41, 0x29, 0x20, 0x26, 0x26, 0x20, 0x68, 0x61, 0x73, 0x28, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x41, 0x44, 0x61, 0x74, 0x61,
	0x29, 0x29, 0x1a, 0x8e, 0x01, 0x0a, 0x22, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6d, 0x75,
	0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x61, 0x12, 0x37, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x41, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x41, 0x44, 0x61, 0x74, 0x61, 0x20, 0x61, 0x72, 0x65, 0x20,
	0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x76, 0x65, 0x1a, 0x2f, 0x21, 0x28, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x41, 0x29, 0x20, 0x26, 0x26, 0x20, 0x68, 0x61, 0x73, 0x28,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x41, 0x44, 0x61, 0x74,
	0x61, 0x29, 0x29, 0x1a, 0x98, 0x01, 0x0a, 0x24, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6d,
	0x75, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x65, 0x72, 0x74, 0x12, 0x3b, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x1a, 0x33, 0x21, 0x28, 0x68, 0x61, 0x73,
	0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x29, 0x20, 0x26, 0x26, 0x20, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x29, 0x29, 0x1a, 0x93,
	0x01, 0x0a, 0x23, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c,
	0x6c, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x20, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6d,
	0x75, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x1a, 0x31, 0x21, 0x28, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x29, 0x20, 0x26, 0x26, 0x20, 0x68, 0x61, 0x73, 0x28,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x29, 0x29, 0x1a, 0xa9, 0x01, 0x0a, 0x19, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x1a, 0x8b, 0x01, 0x28, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x29, 0x20, 0x26,
	0x26, 0x20, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x41, 0x44, 0x61, 0x74, 0x61, 0x29, 0x29, 0x3f, 0x20, 0x78, 0x35, 0x30, 0x39, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x29, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x28, 0x78, 0x35, 0x30,
	0x39, 0x50, 0x61, 0x72, 0x73, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x41, 0x44, 0x61, 0x74, 0x61, 0x29, 0x29, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x41, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x41, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x41, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x41, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x8c,
	0x01, 0x0a, 0x0d, 0x4a, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x2c, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0x90, 0x01, 0x01, 0x48,
	0x00, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x0c, 0x6e, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x48, 0x01, 0x52, 0x0c,
	0x6e, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6e, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x22, 0xe4, 0x08,
	0x0a, 0x09, 0x43, 0x65, 0x72, 0x74, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x06, 0x63,
	0x61, 0x43, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x61, 0x43, 0x65, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x0a, 0x63, 0x61, 0x43, 0x65,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xba, 0x48,
	0x2a, 0xba, 0x01, 0x27, 0x0a, 0x11, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x63, 0x61, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x12, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x78, 0x35,
	0x30, 0x39, 0x49, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x28, 0x29, 0x8a, 0xc0, 0x0c, 0x02, 0x18,
	0x01, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x67, 0x0a, 0x0f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x38, 0xba, 0x48, 0x2f, 0xba, 0x01, 0x2c, 0x0a, 0x16, 0x78, 0x35, 0x30, 0x39,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x12, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x78, 0x35, 0x30, 0x39, 0x49, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x28, 0x29, 0x8a, 0xc0, 0x0c, 0x02, 0x18, 0x01, 0x48, 0x03, 0x52, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e,
	0x67, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x35, 0xba, 0x48, 0x2c, 0xba, 0x01, 0x29, 0x0a, 0x14, 0x70, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x11, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x70, 0x65, 0x6d, 0x49, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x28, 0x29,
	0x8a, 0xc0, 0x0c, 0x02, 0x18, 0x01, 0x48, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e,
	0x67, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x3a, 0xe6, 0x04, 0xba, 0x48,
	0xe2, 0x04, 0x1a, 0x80, 0x01, 0x0a, 0x1c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6d, 0x75,
	0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x5f, 0x63, 0x61, 0x12, 0x33, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x20, 0x63, 0x61, 0x43, 0x65,
	0x72, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x1a, 0x2b, 0x21, 0x28, 0x68, 0x61, 0x73, 0x28,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x29, 0x20, 0x26, 0x26, 0x20,
	0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x29, 0x29, 0x1a, 0x9d, 0x01, 0x0a, 0x25, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x5f, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x63, 0x65, 0x72, 0x74, 0x12,
	0x3d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x43,
	0x65, 0x72, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x43,
	0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6d, 0x75, 0x74, 0x75,
	0x61, 0x6c, 0x6c, 0x79, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x1a, 0x35,
	0x21, 0x28, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x29, 0x20, 0x26, 0x26, 0x20, 0x68, 0x61, 0x73, 0x28, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x29, 0x29, 0x1a, 0x98, 0x01, 0x0a, 0x24, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x5f, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x6b, 0x65, 0x79, 0x12, 0x3b,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x4b, 0x65,
	0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x6c,
	0x79, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x1a, 0x33, 0x21, 0x28, 0x68,
	0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x29, 0x20, 0x26, 0x26, 0x20, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x29, 0x29,
	0x1a, 0xa1, 0x01, 0x0a, 0x13, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x1a, 0x89, 0x01, 0x28, 0x68, 0x61, 0x73, 0x28,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x29, 0x20, 0x26, 0x26, 0x20, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x29, 0x29, 0x3f, 0x20,
	0x78, 0x35, 0x30, 0x39, 0x50, 0x61, 0x72, 0x73, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x29, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x28, 0x78, 0x35, 0x30, 0x39, 0x50, 0x61, 0x72, 0x73, 0x65, 0x28, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x29, 0x29, 0x3a, 0x20,
	0x74, 0x72, 0x75, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x4b, 0x65,
	0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xd4, 0x02, 0x0a, 0x0b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x21, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x8a, 0xc0, 0x0c, 0x17, 0x0a, 0x15, 0x2f,
	0x76, 0x61, 0x72, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x03, 0x64, 0x69, 0x72, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x3a, 0xa2,
	0x01, 0xba, 0x48, 0x9e, 0x01, 0x1a, 0x9b, 0x01, 0x0a, 0x12, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x64, 0x69, 0x72, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x3d, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x64, 0x69, 0x72, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72, 0x20, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20,
	0x62, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x1a, 0x46, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x20,
	0x3d, 0x3d, 0x20, 0x30, 0x20, 0x3f, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x64, 0x69, 0x72,
	0x20, 0x21, 0x3d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x64, 0x69, 0x72, 0x20, 0x3a, 0x20, 0x74,
	0x72, 0x75, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x64, 0x69, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x0d,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x6f, 0x0a,
	0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x55,
	0xba, 0x48, 0x52, 0x92, 0x01, 0x4f, 0x22, 0x4d, 0xba, 0x01, 0x4a, 0x0a, 0x0e, 0x67, 0x6f, 0x5f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x6d, 0x75, 0x73,
	0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x67, 0x6f, 0x20,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x74, 0x68, 0x1a, 0x18, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x28, 0x29, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x22, 0xd0,
	0x01, 0x0a, 0x09, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x50, 0x0a, 0x07,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x42, 0x18, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x8a, 0xc0, 0x0c, 0x0c, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x48, 0x00, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x65,
	0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x42, 0x25, 0xba, 0x48, 0x22, 0xda, 0x01, 0x1f, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x1a, 0x11, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x22, 0x5c, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3d, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x8a, 0xc0, 0x0c,
	0x1c, 0x0a, 0x1a, 0x2f, 0x76, 0x61, 0x72, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x6f, 0x70, 0x6e, 0x69,
	0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x48, 0x00, 0x52,
	0x03, 0x64, 0x69, 0x72, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x64, 0x69, 0x72, 0x22,
	0x3f, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x30,
	0x0a, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01,
	0x52, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x72, 0x73,
	0x22, 0x9e, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x48,
	0x00, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x07,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x48, 0x01, 0x52, 0x07,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x22, 0xe5, 0x01, 0x0a, 0x11, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x42, 0x18, 0xba, 0x48,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x8a, 0xc0, 0x0c, 0x0c, 0x0a, 0x0a, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x22, 0x22, 0x0a, 0x06, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6f, 0x70, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x10, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x22, 0xd4, 0x01, 0x0a, 0x12, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x57, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x42, 0x14, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x8a, 0xc0, 0x0c, 0x08, 0x0a, 0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x06,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x06, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x22, 0x1e, 0x0a, 0x06, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6f, 0x70, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x10, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x22, 0x7c, 0x0a, 0x17, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x51, 0x0a, 0x0b, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x12, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02,
	0x10, 0x01, 0x8a, 0xc0, 0x0c, 0x06, 0x0a, 0x04, 0x5a, 0x73, 0x74, 0x64, 0x48, 0x00, 0x52, 0x0b,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x22, 0xbe,
	0x02, 0x0a, 0x1a, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x78, 0x0a,
	0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x42, 0x18, 0xba, 0x48, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x8a, 0xc0, 0x0c, 0x0c, 0x0a, 0x0a, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x72, 0x65,
	0x70, 0x6f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x22, 0x29, 0x0a, 0x0d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6f, 0x70, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x10, 0x01, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22,
	0x6f, 0x0a, 0x10, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x23, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x0a, 0x8a, 0xc0, 0x0c, 0x06, 0x0a, 0x04, 0x31, 0x30, 0x2e, 0x30, 0x48, 0x00, 0x52,
	0x04, 0x72, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x05, 0x62, 0x75, 0x72, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x8a, 0xc0, 0x0c, 0x04, 0x0a, 0x02, 0x35,
	0x30, 0x48, 0x01, 0x52, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74,
	0x22, 0xa0, 0x02, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4a, 0x0a,
	0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x42, 0x13, 0xba, 0x48, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x8a, 0xc0, 0x0c, 0x07, 0x0a, 0x05, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x50, 0x0a, 0x05, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x53, 0x70,
	0x65, 0x63, 0x42, 0x20, 0xba, 0x48, 0x1d, 0xda, 0x01, 0x1a, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x1a, 0x11, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x20,
	0x21, 0x3d, 0x20, 0x30, 0x52, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63, 0x12, 0x54, 0x0a, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x70, 0x65, 0x63, 0x42, 0x21, 0xba, 0x48, 0x1e, 0xda, 0x01, 0x1b, 0x0a, 0x06,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x1a, 0x11, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x20, 0x21, 0x3d, 0x20, 0x31, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x64, 0x22, 0x20, 0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x09, 0x0a, 0x05,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x44, 0x10, 0x01, 0x22, 0x83, 0x04, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x70, 0x65, 0x63, 0x12, 0x32, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x48, 0x12, 0xc8, 0x01, 0x01, 0x72, 0x0d,
	0x3a, 0x08, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x90, 0x01, 0x01, 0x48, 0x00, 0x52,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x0a, 0x63, 0x61,
	0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36,
	0xba, 0x48, 0x33, 0xba, 0x01, 0x30, 0x0a, 0x1a, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x5f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x12, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x78, 0x35, 0x30, 0x39, 0x49, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x28, 0x29, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x48, 0x02, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x8a, 0xc0,
	0x0c, 0x02, 0x18, 0x01, 0x48, 0x03, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0f, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x8a, 0xc0, 0x0c, 0x05, 0x0a, 0x03, 0x73,
	0x75, 0x62, 0x48, 0x04, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x69, 0x6e,
	0x67, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x71, 0x0a, 0x06, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x59, 0xba, 0x48, 0x56, 0xba, 0x01,
	0x4b, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1a, 0x27, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64,
	0x27, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x1a, 0x17, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x28, 0x27, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x27, 0x29, 0xc8, 0x01, 0x01, 0x92,
	0x01, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x61, 0x43, 0x65,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x79, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x22, 0x0f, 0x0a, 0x0d, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x53, 0x70, 0x65, 0x63, 0x2a, 0x29, 0x0a, 0x0e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x08, 0x0a, 0x04,
	0x45, 0x74, 0x63, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4a, 0x65, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x10, 0x01, 0x2a, 0x23, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x73, 0x64, 0x69, 0x66, 0x66, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x5a, 0x73, 0x74, 0x64, 0x10, 0x01, 0x2a, 0x1e, 0x0a, 0x0c, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x00, 0x42, 0x38, 0x82, 0xc0, 0x0c, 0x04,
	0x08, 0x01, 0x18, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescOnce sync.Once
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescData = file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDesc
)

func file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescGZIP() []byte {
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescOnce.Do(func() {
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescData)
	})
	return file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDescData
}

var file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_goTypes = []interface{}{
	(StorageBackend)(0),                           // 0: config.v1.StorageBackend
	(PatchEngine)(0),                              // 1: config.v1.PatchEngine
	(CacheBackend)(0),                             // 2: config.v1.CacheBackend
	(AgentUpgradesSpec_Driver)(0),                 // 3: config.v1.AgentUpgradesSpec.Driver
	(PluginUpgradesSpec_Driver)(0),                // 4: config.v1.PluginUpgradesSpec.Driver
	(KubernetesAgentUpgradeSpec_ImageResolver)(0), // 5: config.v1.KubernetesAgentUpgradeSpec.ImageResolver
	(AuthSpec_Backend)(0),                         // 6: config.v1.AuthSpec.Backend
	(*GatewayConfigSpec)(nil),                     // 7: config.v1.GatewayConfigSpec
	(*ServerSpec)(nil),                            // 8: config.v1.ServerSpec
	(*ManagementServerSpec)(nil),                  // 9: config.v1.ManagementServerSpec
	(*RelayServerSpec)(nil),                       // 10: config.v1.RelayServerSpec
	(*HealthServerSpec)(nil),                      // 11: config.v1.HealthServerSpec
	(*DashboardServerSpec)(nil),                   // 12: config.v1.DashboardServerSpec
	(*StorageSpec)(nil),                           // 13: config.v1.StorageSpec
	(*EtcdSpec)(nil),                              // 14: config.v1.EtcdSpec
	(*MTLSSpec)(nil),                              // 15: config.v1.MTLSSpec
	(*JetStreamSpec)(nil),                         // 16: config.v1.JetStreamSpec
	(*CertsSpec)(nil),                             // 17: config.v1.CertsSpec
	(*PluginsSpec)(nil),                           // 18: config.v1.PluginsSpec
	(*PluginFilters)(nil),                         // 19: config.v1.PluginFilters
	(*CacheSpec)(nil),                             // 20: config.v1.CacheSpec
	(*FilesystemCacheSpec)(nil),                   // 21: config.v1.FilesystemCacheSpec
	(*KeyringSpec)(nil),                           // 22: config.v1.KeyringSpec
	(*UpgradesSpec)(nil),                          // 23: config.v1.UpgradesSpec
	(*AgentUpgradesSpec)(nil),                     // 24: config.v1.AgentUpgradesSpec
	(*PluginUpgradesSpec)(nil),                    // 25: config.v1.PluginUpgradesSpec
	(*BinaryPluginUpgradeSpec)(nil),               // 26: config.v1.BinaryPluginUpgradeSpec
	(*KubernetesAgentUpgradeSpec)(nil),            // 27: config.v1.KubernetesAgentUpgradeSpec
	(*RateLimitingSpec)(nil),                      // 28: config.v1.RateLimitingSpec
	(*AuthSpec)(nil),                              // 29: config.v1.AuthSpec
	(*OpenIDAuthSpec)(nil),                        // 30: config.v1.OpenIDAuthSpec
	(*BasicAuthSpec)(nil),                         // 31: config.v1.BasicAuthSpec
	(*v1.Revision)(nil),                           // 32: core.Revision
}
var file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_depIdxs = []int32{
	32, // 0: config.v1.GatewayConfigSpec.revision:type_name -> core.Revision
	8,  // 1: config.v1.GatewayConfigSpec.server:type_name -> config.v1.ServerSpec
	9,  // 2: config.v1.GatewayConfigSpec.management:type_name -> config.v1.ManagementServerSpec
	10, // 3: config.v1.GatewayConfigSpec.relay:type_name -> config.v1.RelayServerSpec
	11, // 4: config.v1.GatewayConfigSpec.health:type_name -> config.v1.HealthServerSpec
	12, // 5: config.v1.GatewayConfigSpec.dashboard:type_name -> config.v1.DashboardServerSpec
	13, // 6: config.v1.GatewayConfigSpec.storage:type_name -> config.v1.StorageSpec
	17, // 7: config.v1.GatewayConfigSpec.certs:type_name -> config.v1.CertsSpec
	18, // 8: config.v1.GatewayConfigSpec.plugins:type_name -> config.v1.PluginsSpec
	22, // 9: config.v1.GatewayConfigSpec.keyring:type_name -> config.v1.KeyringSpec
	23, // 10: config.v1.GatewayConfigSpec.upgrades:type_name -> config.v1.UpgradesSpec
	28, // 11: config.v1.GatewayConfigSpec.rateLimiting:type_name -> config.v1.RateLimitingSpec
	29, // 12: config.v1.GatewayConfigSpec.auth:type_name -> config.v1.AuthSpec
	0,  // 13: config.v1.StorageSpec.backend:type_name -> config.v1.StorageBackend
	14, // 14: config.v1.StorageSpec.etcd:type_name -> config.v1.EtcdSpec
	16, // 15: config.v1.StorageSpec.jetStream:type_name -> config.v1.JetStreamSpec
	15, // 16: config.v1.EtcdSpec.certs:type_name -> config.v1.MTLSSpec
	19, // 17: config.v1.PluginsSpec.filters:type_name -> config.v1.PluginFilters
	20, // 18: config.v1.PluginsSpec.cache:type_name -> config.v1.CacheSpec
	2,  // 19: config.v1.CacheSpec.backend:type_name -> config.v1.CacheBackend
	21, // 20: config.v1.CacheSpec.filesystem:type_name -> config.v1.FilesystemCacheSpec
	24, // 21: config.v1.UpgradesSpec.agents:type_name -> config.v1.AgentUpgradesSpec
	25, // 22: config.v1.UpgradesSpec.plugins:type_name -> config.v1.PluginUpgradesSpec
	3,  // 23: config.v1.AgentUpgradesSpec.driver:type_name -> config.v1.AgentUpgradesSpec.Driver
	27, // 24: config.v1.AgentUpgradesSpec.kubernetes:type_name -> config.v1.KubernetesAgentUpgradeSpec
	4,  // 25: config.v1.PluginUpgradesSpec.driver:type_name -> config.v1.PluginUpgradesSpec.Driver
	26, // 26: config.v1.PluginUpgradesSpec.binary:type_name -> config.v1.BinaryPluginUpgradeSpec
	1,  // 27: config.v1.BinaryPluginUpgradeSpec.patchEngine:type_name -> config.v1.PatchEngine
	5,  // 28: config.v1.KubernetesAgentUpgradeSpec.imageResolver:type_name -> config.v1.KubernetesAgentUpgradeSpec.ImageResolver
	6,  // 29: config.v1.AuthSpec.backend:type_name -> config.v1.AuthSpec.Backend
	31, // 30: config.v1.AuthSpec.basic:type_name -> config.v1.BasicAuthSpec
	30, // 31: config.v1.AuthSpec.openid:type_name -> config.v1.OpenIDAuthSpec
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_init() }
func file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_init() {
	if File_github_com_rancher_opni_pkg_config_v1_gateway_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayConfigSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagementServerSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayServerSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthServerSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardServerSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtcdSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MTLSSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JetStreamSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertsSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginsSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemCacheSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyringSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradesSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentUpgradesSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginUpgradesSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryPluginUpgradeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesAgentUpgradeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitingSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenIDAuthSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicAuthSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes[23].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_goTypes,
		DependencyIndexes: file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_depIdxs,
		EnumInfos:         file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_enumTypes,
		MessageInfos:      file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_msgTypes,
	}.Build()
	File_github_com_rancher_opni_pkg_config_v1_gateway_config_proto = out.File
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_rawDesc = nil
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_goTypes = nil
	file_github_com_rancher_opni_pkg_config_v1_gateway_config_proto_depIdxs = nil
}
