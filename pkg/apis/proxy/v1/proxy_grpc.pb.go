// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/pkg/apis/proxy/v1/proxy.proto

package v1

import (
	context "context"
	v1 "github.com/rancher/opni/pkg/apis/core/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RegisterProxy_Endpoint_FullMethodName    = "/proxy.RegisterProxy/Endpoint"
	RegisterProxy_AuthHeaders_FullMethodName = "/proxy.RegisterProxy/AuthHeaders"
)

// RegisterProxyClient is the client API for RegisterProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterProxyClient interface {
	Endpoint(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProxyEndpoint, error)
	AuthHeaders(ctx context.Context, in *v1.ReferenceList, opts ...grpc.CallOption) (*HeaderResponse, error)
}

type registerProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterProxyClient(cc grpc.ClientConnInterface) RegisterProxyClient {
	return &registerProxyClient{cc}
}

func (c *registerProxyClient) Endpoint(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProxyEndpoint, error) {
	out := new(ProxyEndpoint)
	err := c.cc.Invoke(ctx, RegisterProxy_Endpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerProxyClient) AuthHeaders(ctx context.Context, in *v1.ReferenceList, opts ...grpc.CallOption) (*HeaderResponse, error) {
	out := new(HeaderResponse)
	err := c.cc.Invoke(ctx, RegisterProxy_AuthHeaders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterProxyServer is the server API for RegisterProxy service.
// All implementations should embed UnimplementedRegisterProxyServer
// for forward compatibility
type RegisterProxyServer interface {
	Endpoint(context.Context, *emptypb.Empty) (*ProxyEndpoint, error)
	AuthHeaders(context.Context, *v1.ReferenceList) (*HeaderResponse, error)
}

// UnimplementedRegisterProxyServer should be embedded to have forward compatible implementations.
type UnimplementedRegisterProxyServer struct {
}

func (UnimplementedRegisterProxyServer) Endpoint(context.Context, *emptypb.Empty) (*ProxyEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Endpoint not implemented")
}
func (UnimplementedRegisterProxyServer) AuthHeaders(context.Context, *v1.ReferenceList) (*HeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthHeaders not implemented")
}

// UnsafeRegisterProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterProxyServer will
// result in compilation errors.
type UnsafeRegisterProxyServer interface {
	mustEmbedUnimplementedRegisterProxyServer()
}

func RegisterRegisterProxyServer(s grpc.ServiceRegistrar, srv RegisterProxyServer) {
	s.RegisterService(&RegisterProxy_ServiceDesc, srv)
}

func _RegisterProxy_Endpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterProxyServer).Endpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterProxy_Endpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterProxyServer).Endpoint(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterProxy_AuthHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ReferenceList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterProxyServer).AuthHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterProxy_AuthHeaders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterProxyServer).AuthHeaders(ctx, req.(*v1.ReferenceList))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterProxy_ServiceDesc is the grpc.ServiceDesc for RegisterProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegisterProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.RegisterProxy",
	HandlerType: (*RegisterProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Endpoint",
			Handler:    _RegisterProxy_Endpoint_Handler,
		},
		{
			MethodName: "AuthHeaders",
			Handler:    _RegisterProxy_AuthHeaders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/pkg/apis/proxy/v1/proxy.proto",
}
