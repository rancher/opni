// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v1.0.0
// source: github.com/rancher/opni/plugins/logging/pkg/apis/loggingadmin/loggingadmin.proto

package loggingadmin

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v1 "k8s.io/api/core/v1"
	resource "k8s.io/apimachinery/pkg/api/resource"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OpensearchCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalURL string `protobuf:"bytes,1,opt,name=ExternalURL,proto3" json:"ExternalURL,omitempty"`
	// +optional
	NodePools     []*OpensearchNodeDetails `protobuf:"bytes,2,rep,name=NodePools,proto3" json:"NodePools,omitempty"`
	Dashboards    *DashboardsDetails       `protobuf:"bytes,3,opt,name=Dashboards,proto3,oneof" json:"Dashboards,omitempty"`
	DataRetention *string                  `protobuf:"bytes,4,opt,name=DataRetention,proto3,oneof" json:"DataRetention,omitempty"`
}

func (x *OpensearchCluster) Reset() {
	*x = OpensearchCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpensearchCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpensearchCluster) ProtoMessage() {}

func (x *OpensearchCluster) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpensearchCluster.ProtoReflect.Descriptor instead.
func (*OpensearchCluster) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{0}
}

func (x *OpensearchCluster) GetExternalURL() string {
	if x != nil {
		return x.ExternalURL
	}
	return ""
}

func (x *OpensearchCluster) GetNodePools() []*OpensearchNodeDetails {
	if x != nil {
		return x.NodePools
	}
	return nil
}

func (x *OpensearchCluster) GetDashboards() *DashboardsDetails {
	if x != nil {
		return x.Dashboards
	}
	return nil
}

func (x *OpensearchCluster) GetDataRetention() string {
	if x != nil && x.DataRetention != nil {
		return *x.DataRetention
	}
	return ""
}

type DataPersistence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled      *bool   `protobuf:"varint,1,opt,name=Enabled,proto3,oneof" json:"Enabled,omitempty"`
	StorageClass *string `protobuf:"bytes,2,opt,name=StorageClass,proto3,oneof" json:"StorageClass,omitempty"`
}

func (x *DataPersistence) Reset() {
	*x = DataPersistence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPersistence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPersistence) ProtoMessage() {}

func (x *DataPersistence) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPersistence.ProtoReflect.Descriptor instead.
func (*DataPersistence) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{1}
}

func (x *DataPersistence) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *DataPersistence) GetStorageClass() string {
	if x != nil && x.StorageClass != nil {
		return *x.StorageClass
	}
	return ""
}

type CPUResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *resource.Quantity `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	Limit   *resource.Quantity `protobuf:"bytes,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *CPUResource) Reset() {
	*x = CPUResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUResource) ProtoMessage() {}

func (x *CPUResource) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUResource.ProtoReflect.Descriptor instead.
func (*CPUResource) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{2}
}

func (x *CPUResource) GetRequest() *resource.Quantity {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *CPUResource) GetLimit() *resource.Quantity {
	if x != nil {
		return x.Limit
	}
	return nil
}

type OpensearchNodeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string             `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Replicas           *int32             `protobuf:"varint,2,opt,name=Replicas,proto3,oneof" json:"Replicas,omitempty"`
	DiskSize           *resource.Quantity `protobuf:"bytes,3,opt,name=DiskSize,proto3" json:"DiskSize,omitempty"`
	MemoryLimit        *resource.Quantity `protobuf:"bytes,4,opt,name=MemoryLimit,proto3" json:"MemoryLimit,omitempty"`
	CPUResources       *CPUResource       `protobuf:"bytes,5,opt,name=CPUResources,proto3,oneof" json:"CPUResources,omitempty"`
	EnableAntiAffinity *bool              `protobuf:"varint,6,opt,name=EnableAntiAffinity,proto3,oneof" json:"EnableAntiAffinity,omitempty"`
	NodeSelector       map[string]string  `protobuf:"bytes,7,rep,name=NodeSelector,proto3" json:"NodeSelector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tolerations        []*v1.Toleration   `protobuf:"bytes,8,rep,name=Tolerations,proto3" json:"Tolerations,omitempty"`
	Roles              []string           `protobuf:"bytes,9,rep,name=Roles,proto3" json:"Roles,omitempty"`
	Persistence        *DataPersistence   `protobuf:"bytes,10,opt,name=Persistence,proto3,oneof" json:"Persistence,omitempty"`
}

func (x *OpensearchNodeDetails) Reset() {
	*x = OpensearchNodeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpensearchNodeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpensearchNodeDetails) ProtoMessage() {}

func (x *OpensearchNodeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpensearchNodeDetails.ProtoReflect.Descriptor instead.
func (*OpensearchNodeDetails) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{3}
}

func (x *OpensearchNodeDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OpensearchNodeDetails) GetReplicas() int32 {
	if x != nil && x.Replicas != nil {
		return *x.Replicas
	}
	return 0
}

func (x *OpensearchNodeDetails) GetDiskSize() *resource.Quantity {
	if x != nil {
		return x.DiskSize
	}
	return nil
}

func (x *OpensearchNodeDetails) GetMemoryLimit() *resource.Quantity {
	if x != nil {
		return x.MemoryLimit
	}
	return nil
}

func (x *OpensearchNodeDetails) GetCPUResources() *CPUResource {
	if x != nil {
		return x.CPUResources
	}
	return nil
}

func (x *OpensearchNodeDetails) GetEnableAntiAffinity() bool {
	if x != nil && x.EnableAntiAffinity != nil {
		return *x.EnableAntiAffinity
	}
	return false
}

func (x *OpensearchNodeDetails) GetNodeSelector() map[string]string {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *OpensearchNodeDetails) GetTolerations() []*v1.Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

func (x *OpensearchNodeDetails) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *OpensearchNodeDetails) GetPersistence() *DataPersistence {
	if x != nil {
		return x.Persistence
	}
	return nil
}

type DashboardsDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled   *bool                    `protobuf:"varint,1,opt,name=Enabled,proto3,oneof" json:"Enabled,omitempty"`
	Replicas  *int32                   `protobuf:"varint,2,opt,name=Replicas,proto3,oneof" json:"Replicas,omitempty"`
	Resources *v1.ResourceRequirements `protobuf:"bytes,3,opt,name=Resources,proto3,oneof" json:"Resources,omitempty"`
}

func (x *DashboardsDetails) Reset() {
	*x = DashboardsDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardsDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardsDetails) ProtoMessage() {}

func (x *DashboardsDetails) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardsDetails.ProtoReflect.Descriptor instead.
func (*DashboardsDetails) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{4}
}

func (x *DashboardsDetails) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *DashboardsDetails) GetReplicas() int32 {
	if x != nil && x.Replicas != nil {
		return *x.Replicas
	}
	return 0
}

func (x *DashboardsDetails) GetResources() *v1.ResourceRequirements {
	if x != nil {
		return x.Resources
	}
	return nil
}

var File_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto protoreflect.FileDescriptor

var file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_rawDesc = []byte{
	0x0a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0c, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x34, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x02, 0x0a,
	0x11, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x52,
	0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x55, 0x52, 0x4c, 0x12, 0x41, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x09, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0a,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x0f, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x07,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x22, 0x9d, 0x01, 0x0a, 0x0b, 0x43, 0x50, 0x55, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x48, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0xe2, 0x05, 0x0a, 0x15, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x4a, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x50, 0x0a, 0x0b,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x0b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x42,
	0x0a, 0x0c, 0x43, 0x50, 0x55, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x50, 0x55, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x01, 0x52, 0x0c, 0x43, 0x50, 0x55, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6e, 0x74, 0x69,
	0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02,
	0x52, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x03,
	0x52, 0x0b, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x1a, 0x3f, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x43, 0x50, 0x55, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x11, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x07,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x08, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x09,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x02, 0x52, 0x09, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x32, 0xd7, 0x02, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x12, 0x69, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1f, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x17,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a,
	0x10, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x77, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x1a, 0x10, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72,
	0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_rawDescOnce sync.Once
	file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_rawDescData = file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_rawDesc
)

func file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_rawDescGZIP() []byte {
	file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_rawDescOnce.Do(func() {
		file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_rawDescData)
	})
	return file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_rawDescData
}

var file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_goTypes = []interface{}{
	(*OpensearchCluster)(nil),       // 0: loggingadmin.OpensearchCluster
	(*DataPersistence)(nil),         // 1: loggingadmin.DataPersistence
	(*CPUResource)(nil),             // 2: loggingadmin.CPUResource
	(*OpensearchNodeDetails)(nil),   // 3: loggingadmin.OpensearchNodeDetails
	(*DashboardsDetails)(nil),       // 4: loggingadmin.DashboardsDetails
	nil,                             // 5: loggingadmin.OpensearchNodeDetails.NodeSelectorEntry
	(*resource.Quantity)(nil),       // 6: k8s.io.apimachinery.pkg.api.resource.Quantity
	(*v1.Toleration)(nil),           // 7: k8s.io.api.core.v1.Toleration
	(*v1.ResourceRequirements)(nil), // 8: k8s.io.api.core.v1.ResourceRequirements
	(*emptypb.Empty)(nil),           // 9: google.protobuf.Empty
}
var file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_depIdxs = []int32{
	3,  // 0: loggingadmin.OpensearchCluster.NodePools:type_name -> loggingadmin.OpensearchNodeDetails
	4,  // 1: loggingadmin.OpensearchCluster.Dashboards:type_name -> loggingadmin.DashboardsDetails
	6,  // 2: loggingadmin.CPUResource.Request:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	6,  // 3: loggingadmin.CPUResource.Limit:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	6,  // 4: loggingadmin.OpensearchNodeDetails.DiskSize:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	6,  // 5: loggingadmin.OpensearchNodeDetails.MemoryLimit:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	2,  // 6: loggingadmin.OpensearchNodeDetails.CPUResources:type_name -> loggingadmin.CPUResource
	5,  // 7: loggingadmin.OpensearchNodeDetails.NodeSelector:type_name -> loggingadmin.OpensearchNodeDetails.NodeSelectorEntry
	7,  // 8: loggingadmin.OpensearchNodeDetails.Tolerations:type_name -> k8s.io.api.core.v1.Toleration
	1,  // 9: loggingadmin.OpensearchNodeDetails.Persistence:type_name -> loggingadmin.DataPersistence
	8,  // 10: loggingadmin.DashboardsDetails.Resources:type_name -> k8s.io.api.core.v1.ResourceRequirements
	9,  // 11: loggingadmin.LoggingAdmin.GetOpensearchCluster:input_type -> google.protobuf.Empty
	9,  // 12: loggingadmin.LoggingAdmin.DeleteOpensearchCluster:input_type -> google.protobuf.Empty
	0,  // 13: loggingadmin.LoggingAdmin.CreateOrUpdateOpensearchCluster:input_type -> loggingadmin.OpensearchCluster
	0,  // 14: loggingadmin.LoggingAdmin.GetOpensearchCluster:output_type -> loggingadmin.OpensearchCluster
	9,  // 15: loggingadmin.LoggingAdmin.DeleteOpensearchCluster:output_type -> google.protobuf.Empty
	9,  // 16: loggingadmin.LoggingAdmin.CreateOrUpdateOpensearchCluster:output_type -> google.protobuf.Empty
	14, // [14:17] is the sub-list for method output_type
	11, // [11:14] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() {
	file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_init()
}
func file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_init() {
	if File_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpensearchCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPersistence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpensearchNodeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardsDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_goTypes,
		DependencyIndexes: file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_depIdxs,
		MessageInfos:      file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_msgTypes,
	}.Build()
	File_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto = out.File
	file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_rawDesc = nil
	file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_goTypes = nil
	file_github_com_rancher_opni_plugins_logging_pkg_apis_loggingadmin_loggingadmin_proto_depIdxs = nil
}
