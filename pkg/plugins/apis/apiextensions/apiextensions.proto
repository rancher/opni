syntax = "proto3";
option go_package = "github.com/rancher/opni/pkg/plugins/apis/apiextensions";

import "google/protobuf/descriptor.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";

package apiextensions;

service ManagementAPIExtension {
  rpc Descriptors(google.protobuf.Empty) returns (ServiceDescriptorProtoList);
}

service HTTPAPIExtension {
  rpc Configure(CertConfig) returns (HTTPAPIExtensionConfig);
}

service StreamAPIExtension {
  // rpc Services(google.protobuf.Empty) returns (ServiceDescriptorList);
}

service UnaryAPIExtension {
  rpc UnaryDescriptor(google.protobuf.Empty) returns (google.protobuf.ServiceDescriptorProto);
}

message CertConfig {
  string ca = 1;
  string caData = 2;
  string cert = 3;
  string certData = 4;
  string key = 5;
  string keyData = 6;
  bool insecure = 7;
}

message HTTPAPIExtensionConfig {
  string httpAddr = 1;
  repeated RouteInfo routes = 2;
}

message ServiceDescriptor {
  google.protobuf.ServiceDescriptorProto serviceDescriptor = 1;
  ServiceOptions options = 2;
}

message ServiceOptions {
  // If set, the service will only be available to clusters that have this
  // capability.
  string requireCapability = 1;
}

message ServiceDescriptorList {
  repeated ServiceDescriptor items = 2;
}

message ServiceDescriptorProtoList {
  repeated google.protobuf.ServiceDescriptorProto items = 1;
}

message RouteInfo {
	string method = 1;
	string path = 2;
}
