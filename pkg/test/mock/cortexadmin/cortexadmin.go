// Code generated by MockGen. DO NOT EDIT.
// Source: plugins/metrics/apis/cortexadmin/cortexadmin_grpc.pb.go

// Package mock_cortexadmin is a generated GoMock package.
package mock_cortexadmin

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cortexadmin "github.com/rancher/opni/plugins/metrics/apis/cortexadmin"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockCortexAdminClient is a mock of CortexAdminClient interface.
type MockCortexAdminClient struct {
	ctrl     *gomock.Controller
	recorder *MockCortexAdminClientMockRecorder
}

// MockCortexAdminClientMockRecorder is the mock recorder for MockCortexAdminClient.
type MockCortexAdminClientMockRecorder struct {
	mock *MockCortexAdminClient
}

// NewMockCortexAdminClient creates a new mock instance.
func NewMockCortexAdminClient(ctrl *gomock.Controller) *MockCortexAdminClient {
	mock := &MockCortexAdminClient{ctrl: ctrl}
	mock.recorder = &MockCortexAdminClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCortexAdminClient) EXPECT() *MockCortexAdminClientMockRecorder {
	return m.recorder
}

// AllUserStats mocks base method.
func (m *MockCortexAdminClient) AllUserStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*cortexadmin.UserIDStatsList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllUserStats", varargs...)
	ret0, _ := ret[0].(*cortexadmin.UserIDStatsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllUserStats indicates an expected call of AllUserStats.
func (mr *MockCortexAdminClientMockRecorder) AllUserStats(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllUserStats", reflect.TypeOf((*MockCortexAdminClient)(nil).AllUserStats), varargs...)
}

// DeleteRule mocks base method.
func (m *MockCortexAdminClient) DeleteRule(ctx context.Context, in *cortexadmin.DeleteRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRule", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRule indicates an expected call of DeleteRule.
func (mr *MockCortexAdminClientMockRecorder) DeleteRule(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRule", reflect.TypeOf((*MockCortexAdminClient)(nil).DeleteRule), varargs...)
}

// ExtractRawSeries mocks base method.
func (m *MockCortexAdminClient) ExtractRawSeries(ctx context.Context, in *cortexadmin.MatcherRequest, opts ...grpc.CallOption) (*cortexadmin.QueryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExtractRawSeries", varargs...)
	ret0, _ := ret[0].(*cortexadmin.QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractRawSeries indicates an expected call of ExtractRawSeries.
func (mr *MockCortexAdminClientMockRecorder) ExtractRawSeries(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractRawSeries", reflect.TypeOf((*MockCortexAdminClient)(nil).ExtractRawSeries), varargs...)
}

// FlushBlocks mocks base method.
func (m *MockCortexAdminClient) FlushBlocks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FlushBlocks", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlushBlocks indicates an expected call of FlushBlocks.
func (mr *MockCortexAdminClientMockRecorder) FlushBlocks(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushBlocks", reflect.TypeOf((*MockCortexAdminClient)(nil).FlushBlocks), varargs...)
}

// GetCortexConfig mocks base method.
func (m *MockCortexAdminClient) GetCortexConfig(ctx context.Context, in *cortexadmin.ConfigRequest, opts ...grpc.CallOption) (*cortexadmin.ConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCortexConfig", varargs...)
	ret0, _ := ret[0].(*cortexadmin.ConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCortexConfig indicates an expected call of GetCortexConfig.
func (mr *MockCortexAdminClientMockRecorder) GetCortexConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCortexConfig", reflect.TypeOf((*MockCortexAdminClient)(nil).GetCortexConfig), varargs...)
}

// GetCortexStatus mocks base method.
func (m *MockCortexAdminClient) GetCortexStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*cortexadmin.CortexStatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCortexStatus", varargs...)
	ret0, _ := ret[0].(*cortexadmin.CortexStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCortexStatus indicates an expected call of GetCortexStatus.
func (mr *MockCortexAdminClientMockRecorder) GetCortexStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCortexStatus", reflect.TypeOf((*MockCortexAdminClient)(nil).GetCortexStatus), varargs...)
}

// GetMetricLabelSets mocks base method.
func (m *MockCortexAdminClient) GetMetricLabelSets(ctx context.Context, in *cortexadmin.LabelRequest, opts ...grpc.CallOption) (*cortexadmin.MetricLabels, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetricLabelSets", varargs...)
	ret0, _ := ret[0].(*cortexadmin.MetricLabels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricLabelSets indicates an expected call of GetMetricLabelSets.
func (mr *MockCortexAdminClientMockRecorder) GetMetricLabelSets(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricLabelSets", reflect.TypeOf((*MockCortexAdminClient)(nil).GetMetricLabelSets), varargs...)
}

// GetMetricMetadata mocks base method.
func (m *MockCortexAdminClient) GetMetricMetadata(ctx context.Context, in *cortexadmin.MetricMetadataRequest, opts ...grpc.CallOption) (*cortexadmin.MetricMetadata, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetricMetadata", varargs...)
	ret0, _ := ret[0].(*cortexadmin.MetricMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricMetadata indicates an expected call of GetMetricMetadata.
func (mr *MockCortexAdminClientMockRecorder) GetMetricMetadata(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricMetadata", reflect.TypeOf((*MockCortexAdminClient)(nil).GetMetricMetadata), varargs...)
}

// GetRule mocks base method.
func (m *MockCortexAdminClient) GetRule(ctx context.Context, in *cortexadmin.GetRuleRequest, opts ...grpc.CallOption) (*cortexadmin.QueryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRule", varargs...)
	ret0, _ := ret[0].(*cortexadmin.QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRule indicates an expected call of GetRule.
func (mr *MockCortexAdminClientMockRecorder) GetRule(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRule", reflect.TypeOf((*MockCortexAdminClient)(nil).GetRule), varargs...)
}

// GetSeriesMetrics mocks base method.
func (m *MockCortexAdminClient) GetSeriesMetrics(ctx context.Context, in *cortexadmin.SeriesRequest, opts ...grpc.CallOption) (*cortexadmin.SeriesInfoList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSeriesMetrics", varargs...)
	ret0, _ := ret[0].(*cortexadmin.SeriesInfoList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeriesMetrics indicates an expected call of GetSeriesMetrics.
func (mr *MockCortexAdminClientMockRecorder) GetSeriesMetrics(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeriesMetrics", reflect.TypeOf((*MockCortexAdminClient)(nil).GetSeriesMetrics), varargs...)
}

// ListRules mocks base method.
func (m *MockCortexAdminClient) ListRules(ctx context.Context, in *cortexadmin.ListRulesRequest, opts ...grpc.CallOption) (*cortexadmin.ListRulesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRules", varargs...)
	ret0, _ := ret[0].(*cortexadmin.ListRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRules indicates an expected call of ListRules.
func (mr *MockCortexAdminClientMockRecorder) ListRules(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRules", reflect.TypeOf((*MockCortexAdminClient)(nil).ListRules), varargs...)
}

// LoadRules mocks base method.
func (m *MockCortexAdminClient) LoadRules(ctx context.Context, in *cortexadmin.LoadRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadRules", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadRules indicates an expected call of LoadRules.
func (mr *MockCortexAdminClientMockRecorder) LoadRules(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadRules", reflect.TypeOf((*MockCortexAdminClient)(nil).LoadRules), varargs...)
}

// Query mocks base method.
func (m *MockCortexAdminClient) Query(ctx context.Context, in *cortexadmin.QueryRequest, opts ...grpc.CallOption) (*cortexadmin.QueryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*cortexadmin.QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockCortexAdminClientMockRecorder) Query(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockCortexAdminClient)(nil).Query), varargs...)
}

// QueryRange mocks base method.
func (m *MockCortexAdminClient) QueryRange(ctx context.Context, in *cortexadmin.QueryRangeRequest, opts ...grpc.CallOption) (*cortexadmin.QueryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRange", varargs...)
	ret0, _ := ret[0].(*cortexadmin.QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRange indicates an expected call of QueryRange.
func (mr *MockCortexAdminClientMockRecorder) QueryRange(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRange", reflect.TypeOf((*MockCortexAdminClient)(nil).QueryRange), varargs...)
}

// WriteMetrics mocks base method.
func (m *MockCortexAdminClient) WriteMetrics(ctx context.Context, in *cortexadmin.WriteRequest, opts ...grpc.CallOption) (*cortexadmin.WriteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteMetrics", varargs...)
	ret0, _ := ret[0].(*cortexadmin.WriteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteMetrics indicates an expected call of WriteMetrics.
func (mr *MockCortexAdminClientMockRecorder) WriteMetrics(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMetrics", reflect.TypeOf((*MockCortexAdminClient)(nil).WriteMetrics), varargs...)
}

// MockCortexAdminServer is a mock of CortexAdminServer interface.
type MockCortexAdminServer struct {
	ctrl     *gomock.Controller
	recorder *MockCortexAdminServerMockRecorder
}

// MockCortexAdminServerMockRecorder is the mock recorder for MockCortexAdminServer.
type MockCortexAdminServerMockRecorder struct {
	mock *MockCortexAdminServer
}

// NewMockCortexAdminServer creates a new mock instance.
func NewMockCortexAdminServer(ctrl *gomock.Controller) *MockCortexAdminServer {
	mock := &MockCortexAdminServer{ctrl: ctrl}
	mock.recorder = &MockCortexAdminServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCortexAdminServer) EXPECT() *MockCortexAdminServerMockRecorder {
	return m.recorder
}

// AllUserStats mocks base method.
func (m *MockCortexAdminServer) AllUserStats(arg0 context.Context, arg1 *emptypb.Empty) (*cortexadmin.UserIDStatsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllUserStats", arg0, arg1)
	ret0, _ := ret[0].(*cortexadmin.UserIDStatsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllUserStats indicates an expected call of AllUserStats.
func (mr *MockCortexAdminServerMockRecorder) AllUserStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllUserStats", reflect.TypeOf((*MockCortexAdminServer)(nil).AllUserStats), arg0, arg1)
}

// DeleteRule mocks base method.
func (m *MockCortexAdminServer) DeleteRule(arg0 context.Context, arg1 *cortexadmin.DeleteRuleRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRule", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRule indicates an expected call of DeleteRule.
func (mr *MockCortexAdminServerMockRecorder) DeleteRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRule", reflect.TypeOf((*MockCortexAdminServer)(nil).DeleteRule), arg0, arg1)
}

// ExtractRawSeries mocks base method.
func (m *MockCortexAdminServer) ExtractRawSeries(arg0 context.Context, arg1 *cortexadmin.MatcherRequest) (*cortexadmin.QueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractRawSeries", arg0, arg1)
	ret0, _ := ret[0].(*cortexadmin.QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractRawSeries indicates an expected call of ExtractRawSeries.
func (mr *MockCortexAdminServerMockRecorder) ExtractRawSeries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractRawSeries", reflect.TypeOf((*MockCortexAdminServer)(nil).ExtractRawSeries), arg0, arg1)
}

// FlushBlocks mocks base method.
func (m *MockCortexAdminServer) FlushBlocks(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushBlocks", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlushBlocks indicates an expected call of FlushBlocks.
func (mr *MockCortexAdminServerMockRecorder) FlushBlocks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushBlocks", reflect.TypeOf((*MockCortexAdminServer)(nil).FlushBlocks), arg0, arg1)
}

// GetCortexConfig mocks base method.
func (m *MockCortexAdminServer) GetCortexConfig(arg0 context.Context, arg1 *cortexadmin.ConfigRequest) (*cortexadmin.ConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCortexConfig", arg0, arg1)
	ret0, _ := ret[0].(*cortexadmin.ConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCortexConfig indicates an expected call of GetCortexConfig.
func (mr *MockCortexAdminServerMockRecorder) GetCortexConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCortexConfig", reflect.TypeOf((*MockCortexAdminServer)(nil).GetCortexConfig), arg0, arg1)
}

// GetCortexStatus mocks base method.
func (m *MockCortexAdminServer) GetCortexStatus(arg0 context.Context, arg1 *emptypb.Empty) (*cortexadmin.CortexStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCortexStatus", arg0, arg1)
	ret0, _ := ret[0].(*cortexadmin.CortexStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCortexStatus indicates an expected call of GetCortexStatus.
func (mr *MockCortexAdminServerMockRecorder) GetCortexStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCortexStatus", reflect.TypeOf((*MockCortexAdminServer)(nil).GetCortexStatus), arg0, arg1)
}

// GetMetricLabelSets mocks base method.
func (m *MockCortexAdminServer) GetMetricLabelSets(arg0 context.Context, arg1 *cortexadmin.LabelRequest) (*cortexadmin.MetricLabels, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricLabelSets", arg0, arg1)
	ret0, _ := ret[0].(*cortexadmin.MetricLabels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricLabelSets indicates an expected call of GetMetricLabelSets.
func (mr *MockCortexAdminServerMockRecorder) GetMetricLabelSets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricLabelSets", reflect.TypeOf((*MockCortexAdminServer)(nil).GetMetricLabelSets), arg0, arg1)
}

// GetMetricMetadata mocks base method.
func (m *MockCortexAdminServer) GetMetricMetadata(arg0 context.Context, arg1 *cortexadmin.MetricMetadataRequest) (*cortexadmin.MetricMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricMetadata", arg0, arg1)
	ret0, _ := ret[0].(*cortexadmin.MetricMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricMetadata indicates an expected call of GetMetricMetadata.
func (mr *MockCortexAdminServerMockRecorder) GetMetricMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricMetadata", reflect.TypeOf((*MockCortexAdminServer)(nil).GetMetricMetadata), arg0, arg1)
}

// GetRule mocks base method.
func (m *MockCortexAdminServer) GetRule(arg0 context.Context, arg1 *cortexadmin.GetRuleRequest) (*cortexadmin.QueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRule", arg0, arg1)
	ret0, _ := ret[0].(*cortexadmin.QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRule indicates an expected call of GetRule.
func (mr *MockCortexAdminServerMockRecorder) GetRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRule", reflect.TypeOf((*MockCortexAdminServer)(nil).GetRule), arg0, arg1)
}

// GetSeriesMetrics mocks base method.
func (m *MockCortexAdminServer) GetSeriesMetrics(arg0 context.Context, arg1 *cortexadmin.SeriesRequest) (*cortexadmin.SeriesInfoList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeriesMetrics", arg0, arg1)
	ret0, _ := ret[0].(*cortexadmin.SeriesInfoList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeriesMetrics indicates an expected call of GetSeriesMetrics.
func (mr *MockCortexAdminServerMockRecorder) GetSeriesMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeriesMetrics", reflect.TypeOf((*MockCortexAdminServer)(nil).GetSeriesMetrics), arg0, arg1)
}

// ListRules mocks base method.
func (m *MockCortexAdminServer) ListRules(arg0 context.Context, arg1 *cortexadmin.ListRulesRequest) (*cortexadmin.ListRulesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRules", arg0, arg1)
	ret0, _ := ret[0].(*cortexadmin.ListRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRules indicates an expected call of ListRules.
func (mr *MockCortexAdminServerMockRecorder) ListRules(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRules", reflect.TypeOf((*MockCortexAdminServer)(nil).ListRules), arg0, arg1)
}

// LoadRules mocks base method.
func (m *MockCortexAdminServer) LoadRules(arg0 context.Context, arg1 *cortexadmin.LoadRuleRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadRules", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadRules indicates an expected call of LoadRules.
func (mr *MockCortexAdminServerMockRecorder) LoadRules(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadRules", reflect.TypeOf((*MockCortexAdminServer)(nil).LoadRules), arg0, arg1)
}

// Query mocks base method.
func (m *MockCortexAdminServer) Query(arg0 context.Context, arg1 *cortexadmin.QueryRequest) (*cortexadmin.QueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1)
	ret0, _ := ret[0].(*cortexadmin.QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockCortexAdminServerMockRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockCortexAdminServer)(nil).Query), arg0, arg1)
}

// QueryRange mocks base method.
func (m *MockCortexAdminServer) QueryRange(arg0 context.Context, arg1 *cortexadmin.QueryRangeRequest) (*cortexadmin.QueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRange", arg0, arg1)
	ret0, _ := ret[0].(*cortexadmin.QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRange indicates an expected call of QueryRange.
func (mr *MockCortexAdminServerMockRecorder) QueryRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRange", reflect.TypeOf((*MockCortexAdminServer)(nil).QueryRange), arg0, arg1)
}

// WriteMetrics mocks base method.
func (m *MockCortexAdminServer) WriteMetrics(arg0 context.Context, arg1 *cortexadmin.WriteRequest) (*cortexadmin.WriteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMetrics", arg0, arg1)
	ret0, _ := ret[0].(*cortexadmin.WriteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteMetrics indicates an expected call of WriteMetrics.
func (mr *MockCortexAdminServerMockRecorder) WriteMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMetrics", reflect.TypeOf((*MockCortexAdminServer)(nil).WriteMetrics), arg0, arg1)
}

// mustEmbedUnimplementedCortexAdminServer mocks base method.
func (m *MockCortexAdminServer) mustEmbedUnimplementedCortexAdminServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCortexAdminServer")
}

// mustEmbedUnimplementedCortexAdminServer indicates an expected call of mustEmbedUnimplementedCortexAdminServer.
func (mr *MockCortexAdminServerMockRecorder) mustEmbedUnimplementedCortexAdminServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCortexAdminServer", reflect.TypeOf((*MockCortexAdminServer)(nil).mustEmbedUnimplementedCortexAdminServer))
}

// MockUnsafeCortexAdminServer is a mock of UnsafeCortexAdminServer interface.
type MockUnsafeCortexAdminServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCortexAdminServerMockRecorder
}

// MockUnsafeCortexAdminServerMockRecorder is the mock recorder for MockUnsafeCortexAdminServer.
type MockUnsafeCortexAdminServerMockRecorder struct {
	mock *MockUnsafeCortexAdminServer
}

// NewMockUnsafeCortexAdminServer creates a new mock instance.
func NewMockUnsafeCortexAdminServer(ctrl *gomock.Controller) *MockUnsafeCortexAdminServer {
	mock := &MockUnsafeCortexAdminServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCortexAdminServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCortexAdminServer) EXPECT() *MockUnsafeCortexAdminServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCortexAdminServer mocks base method.
func (m *MockUnsafeCortexAdminServer) mustEmbedUnimplementedCortexAdminServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCortexAdminServer")
}

// mustEmbedUnimplementedCortexAdminServer indicates an expected call of mustEmbedUnimplementedCortexAdminServer.
func (mr *MockUnsafeCortexAdminServerMockRecorder) mustEmbedUnimplementedCortexAdminServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCortexAdminServer", reflect.TypeOf((*MockUnsafeCortexAdminServer)(nil).mustEmbedUnimplementedCortexAdminServer))
}
