syntax = "proto3";
option go_package = "github.com/rancher/opni/pkg/apis/alerting/v1";

import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "google/api/http.proto";
import "google/api/annotations.proto";
import "google/rpc/status.proto";


import "github.com/rancher/opni/pkg/apis/core/v1/core.proto";
import "github.com/rancher/opni/pkg/apis/alerting/v1/alerting.proto";

package alerting;

// -------- CRUD for alerting conditions -------
service AlertConditions {
    rpc CreateAlertCondition(AlertCondition) returns (core.Reference) {
    option (google.api.http) = {
      post : "/configure"
      body : "*"
    };
  }

  rpc GetAlertCondition(core.Reference) returns (AlertCondition) {
    option (google.api.http) = {
      post : "/list/{id}"
      body : "*"
    };
  }

  rpc ListAlertConditions(ListAlertConditionRequest)
      returns (AlertConditionList) {
    option (google.api.http) = {
      get : "/list"
    };
  }

  rpc UpdateAlertCondition(UpdateAlertConditionRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put : "/configure"
      body : "*"
    };
  }

  rpc ListAlertConditionChoices(AlertDetailChoicesRequest)
      returns (ListAlertTypeDetails) {
      option (google.api.http) = {
        post : "/choices"
    };
  }

  rpc DeleteAlertCondition(core.Reference) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/configure"
    };
  }

  rpc AlertConditionStatus(core.Reference) returns (AlertStatusResponse) {
    option (google.api.http) = {
      post : "/status/{id}"
    };
  }

  rpc CloneTo(CloneToRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/clone"
      body : "*"
    };
  }

  //  can only active silence when alert is in firing state (limitation of alertmanager)
  rpc ActivateSilence(SilenceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/silences"
      body : "*"
    };
  }
  // id corresponds to conditionId
  rpc DeactivateSilence(core.Reference) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/silences"
    };
  }

  rpc Timeline(TimelineRequest) returns (TimelineResponse) {
    option (google.api.http) = {
      post : "/timeline"
    };
  }
}