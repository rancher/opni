syntax = "proto3";
option go_package = "github.com/rancher/opni/pkg/plugins/topology/pkg/apis/orchestrator";


import "google/protobuf/empty.proto";
import "google/api/http.proto";
import "google/api/annotations.proto";
import "github.com/rancher/opni/pkg/apis/core/v1/core.proto";

package orchestrator;

service TopologyOrchestrator {
    rpc GetClusterStatus(google.protobuf.Empty) returns (InstallStatus){
        option (google.api.http) = {
            get: "/cluster/status"
        };
    }


   rpc PutGraph(TopologyGraph) returns (google.protobuf.Empty) {
    option(google.api.http) = {
        post: "/topology/object"
        body: "*"
    };
   }

   rpc GetGraph(core.Reference) returns (TopologyGraph) {
    option(google.api.http) = {
        get: "/topology/object/{id}"
    };
   }
}

message TopologyGraph {
    core.Reference id = 1;
    bytes data = 2;
    GraphRepr repr = 3;
}

enum GraphRepr {
    None = 0;
    KubectlGraph = 1; 
}

enum InstallState {
    Unknown = 0;
    NotInstalled = 1;
    Updating = 2;
    Installed = 3;
    Uninstalling = 4;
}

message InstallStatus {
    InstallState state = 1;
    string version = 2;
    map<string, string> metadata = 3;
}