// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v1.0.0
// source: github.com/rancher/opni/pkg/apis/storage/v1/storage.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StorageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backend    string                 `protobuf:"bytes,1,opt,name=backend,proto3" json:"backend,omitempty"`
	S3         *S3StorageSpec         `protobuf:"bytes,2,opt,name=s3,proto3" json:"s3,omitempty"`
	Gcs        *GCSStorageSpec        `protobuf:"bytes,3,opt,name=gcs,proto3" json:"gcs,omitempty"`
	Azure      *AzureStorageSpec      `protobuf:"bytes,4,opt,name=azure,proto3" json:"azure,omitempty"`
	Swift      *SwiftStorageSpec      `protobuf:"bytes,5,opt,name=swift,proto3" json:"swift,omitempty"`
	Filesystem *FilesystemStorageSpec `protobuf:"bytes,6,opt,name=filesystem,proto3" json:"filesystem,omitempty"`
}

func (x *StorageSpec) Reset() {
	*x = StorageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageSpec) ProtoMessage() {}

func (x *StorageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageSpec.ProtoReflect.Descriptor instead.
func (*StorageSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_rawDescGZIP(), []int{0}
}

func (x *StorageSpec) GetBackend() string {
	if x != nil {
		return x.Backend
	}
	return ""
}

func (x *StorageSpec) GetS3() *S3StorageSpec {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *StorageSpec) GetGcs() *GCSStorageSpec {
	if x != nil {
		return x.Gcs
	}
	return nil
}

func (x *StorageSpec) GetAzure() *AzureStorageSpec {
	if x != nil {
		return x.Azure
	}
	return nil
}

func (x *StorageSpec) GetSwift() *SwiftStorageSpec {
	if x != nil {
		return x.Swift
	}
	return nil
}

func (x *StorageSpec) GetFilesystem() *FilesystemStorageSpec {
	if x != nil {
		return x.Filesystem
	}
	return nil
}

type S3StorageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The S3 bucket endpoint. It could be an AWS S3 endpoint listed at
	// https://docs.aws.amazon.com/general/latest/gr/s3.html or the address of an
	// S3-compatible service in hostname:port format.
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// S3 region. If unset, the client will issue a S3 GetBucketLocation API call
	// to autodetect it.
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// S3 bucket name
	BucketName string `protobuf:"bytes,3,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	// S3 secret access key
	SecretAccessKey string `protobuf:"bytes,4,opt,name=secretAccessKey,proto3" json:"secretAccessKey,omitempty"`
	// S3 access key ID
	AccessKeyID string `protobuf:"bytes,5,opt,name=accessKeyID,proto3" json:"accessKeyID,omitempty"`
	// If enabled, use http:// for the S3 endpoint instead of https://. This could
	// be useful in local dev/test environments while using an S3-compatible
	// backend storage, like Minio.
	Insecure bool `protobuf:"varint,6,opt,name=insecure,proto3" json:"insecure,omitempty"`
	// The signature version to use for authenticating against S3.
	// Supported values are: v4, v2
	SignatureVersion string      `protobuf:"bytes,7,opt,name=signatureVersion,proto3" json:"signatureVersion,omitempty"`
	Sse              *SSEConfig  `protobuf:"bytes,8,opt,name=sse,proto3" json:"sse,omitempty"`
	Http             *HTTPConfig `protobuf:"bytes,9,opt,name=http,proto3" json:"http,omitempty"`
}

func (x *S3StorageSpec) Reset() {
	*x = S3StorageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3StorageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3StorageSpec) ProtoMessage() {}

func (x *S3StorageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3StorageSpec.ProtoReflect.Descriptor instead.
func (*S3StorageSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_rawDescGZIP(), []int{1}
}

func (x *S3StorageSpec) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *S3StorageSpec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *S3StorageSpec) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *S3StorageSpec) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *S3StorageSpec) GetAccessKeyID() string {
	if x != nil {
		return x.AccessKeyID
	}
	return ""
}

func (x *S3StorageSpec) GetInsecure() bool {
	if x != nil {
		return x.Insecure
	}
	return false
}

func (x *S3StorageSpec) GetSignatureVersion() string {
	if x != nil {
		return x.SignatureVersion
	}
	return ""
}

func (x *S3StorageSpec) GetSse() *SSEConfig {
	if x != nil {
		return x.Sse
	}
	return nil
}

func (x *S3StorageSpec) GetHttp() *HTTPConfig {
	if x != nil {
		return x.Http
	}
	return nil
}

type SSEConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable AWS Server Side Encryption. Supported values: SSE-KMS, SSE-S3
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// KMS Key ID used to encrypt objects in S3
	KmsKeyID string `protobuf:"bytes,2,opt,name=kmsKeyID,proto3" json:"kmsKeyID,omitempty"`
	// KMS Encryption Context used for object encryption. It expects a JSON formatted string.
	KmsEncryptionContext string `protobuf:"bytes,3,opt,name=kmsEncryptionContext,proto3" json:"kmsEncryptionContext,omitempty"`
}

func (x *SSEConfig) Reset() {
	*x = SSEConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSEConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSEConfig) ProtoMessage() {}

func (x *SSEConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSEConfig.ProtoReflect.Descriptor instead.
func (*SSEConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_rawDescGZIP(), []int{2}
}

func (x *SSEConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SSEConfig) GetKmsKeyID() string {
	if x != nil {
		return x.KmsKeyID
	}
	return ""
}

func (x *SSEConfig) GetKmsEncryptionContext() string {
	if x != nil {
		return x.KmsEncryptionContext
	}
	return ""
}

type HTTPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time an idle connection will remain idle before closing.
	IdleConnTimeout *durationpb.Duration `protobuf:"bytes,1,opt,name=idleConnTimeout,proto3" json:"idleConnTimeout,omitempty"`
	// The amount of time the client will wait for a servers response headers.
	ResponseHeaderTimeout *durationpb.Duration `protobuf:"bytes,2,opt,name=responseHeaderTimeout,proto3" json:"responseHeaderTimeout,omitempty"`
	// If the client connects via HTTPS and this option is enabled, the client will accept any certificate and hostname.
	InsecureSkipVerify bool `protobuf:"varint,3,opt,name=insecureSkipVerify,proto3" json:"insecureSkipVerify,omitempty"`
	// Maximum time to wait for a TLS handshake. 0 means no limit.
	TlsHandshakeTimeout *durationpb.Duration `protobuf:"bytes,4,opt,name=tlsHandshakeTimeout,proto3" json:"tlsHandshakeTimeout,omitempty"`
	// The time to wait for a server's first response headers after fully writing the request headers if the request has an Expect header. 0 to send the request body immediately.
	ExpectContinueTimeout *durationpb.Duration `protobuf:"bytes,5,opt,name=expectContinueTimeout,proto3" json:"expectContinueTimeout,omitempty"`
	// Maximum number of idle (keep-alive) connections across all hosts. 0 means no limit.
	MaxIdleConns int32 `protobuf:"varint,6,opt,name=maxIdleConns,proto3" json:"maxIdleConns,omitempty"`
	// Maximum number of idle (keep-alive) connections to keep per-host. If 0, a built-in default value is used.
	MaxIdleConnsPerHost int32 `protobuf:"varint,7,opt,name=maxIdleConnsPerHost,proto3" json:"maxIdleConnsPerHost,omitempty"`
	// Maximum number of connections per host. 0 means no limit.
	MaxConnsPerHost int32 `protobuf:"varint,8,opt,name=maxConnsPerHost,proto3" json:"maxConnsPerHost,omitempty"`
}

func (x *HTTPConfig) Reset() {
	*x = HTTPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPConfig) ProtoMessage() {}

func (x *HTTPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPConfig.ProtoReflect.Descriptor instead.
func (*HTTPConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_rawDescGZIP(), []int{3}
}

func (x *HTTPConfig) GetIdleConnTimeout() *durationpb.Duration {
	if x != nil {
		return x.IdleConnTimeout
	}
	return nil
}

func (x *HTTPConfig) GetResponseHeaderTimeout() *durationpb.Duration {
	if x != nil {
		return x.ResponseHeaderTimeout
	}
	return nil
}

func (x *HTTPConfig) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

func (x *HTTPConfig) GetTlsHandshakeTimeout() *durationpb.Duration {
	if x != nil {
		return x.TlsHandshakeTimeout
	}
	return nil
}

func (x *HTTPConfig) GetExpectContinueTimeout() *durationpb.Duration {
	if x != nil {
		return x.ExpectContinueTimeout
	}
	return nil
}

func (x *HTTPConfig) GetMaxIdleConns() int32 {
	if x != nil {
		return x.MaxIdleConns
	}
	return 0
}

func (x *HTTPConfig) GetMaxIdleConnsPerHost() int32 {
	if x != nil {
		return x.MaxIdleConnsPerHost
	}
	return 0
}

func (x *HTTPConfig) GetMaxConnsPerHost() int32 {
	if x != nil {
		return x.MaxConnsPerHost
	}
	return 0
}

type GCSStorageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GCS bucket name
	BucketName string `protobuf:"bytes,1,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	// JSON representing either a Google Developers Console client_credentials.json file
	// or a Google Developers service account key file. If empty, fallback to Google default logic.
	ServiceAccount string `protobuf:"bytes,2,opt,name=serviceAccount,proto3" json:"serviceAccount,omitempty"`
}

func (x *GCSStorageSpec) Reset() {
	*x = GCSStorageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCSStorageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCSStorageSpec) ProtoMessage() {}

func (x *GCSStorageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCSStorageSpec.ProtoReflect.Descriptor instead.
func (*GCSStorageSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_rawDescGZIP(), []int{4}
}

func (x *GCSStorageSpec) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *GCSStorageSpec) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

type AzureStorageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Azure storage account name
	StorageAccountName string `protobuf:"bytes,1,opt,name=storageAccountName,proto3" json:"storageAccountName,omitempty"`
	// Azure storage account key
	StorageAccountKey string `protobuf:"bytes,2,opt,name=storageAccountKey,proto3" json:"storageAccountKey,omitempty"`
	// Azure storage container name
	ContainerName string `protobuf:"bytes,3,opt,name=containerName,proto3" json:"containerName,omitempty"`
	// Azure storage endpoint suffix without schema. The account name will be
	// prefixed to this value to create the FQDN
	Endpoint string `protobuf:"bytes,4,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Number of retries for recoverable errors
	MaxRetries int32 `protobuf:"varint,5,opt,name=maxRetries,proto3" json:"maxRetries,omitempty"`
	// Azure storage MSI resource. Either this or account key must be set.
	MsiResource string `protobuf:"bytes,6,opt,name=msiResource,proto3" json:"msiResource,omitempty"`
	// Azure storage MSI resource managed identity client Id. If not supplied system assigned identity is used
	UserAssignedID string      `protobuf:"bytes,7,opt,name=userAssignedID,proto3" json:"userAssignedID,omitempty"`
	Http           *HTTPConfig `protobuf:"bytes,8,opt,name=http,proto3" json:"http,omitempty"`
}

func (x *AzureStorageSpec) Reset() {
	*x = AzureStorageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureStorageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureStorageSpec) ProtoMessage() {}

func (x *AzureStorageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureStorageSpec.ProtoReflect.Descriptor instead.
func (*AzureStorageSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_rawDescGZIP(), []int{5}
}

func (x *AzureStorageSpec) GetStorageAccountName() string {
	if x != nil {
		return x.StorageAccountName
	}
	return ""
}

func (x *AzureStorageSpec) GetStorageAccountKey() string {
	if x != nil {
		return x.StorageAccountKey
	}
	return ""
}

func (x *AzureStorageSpec) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *AzureStorageSpec) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *AzureStorageSpec) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *AzureStorageSpec) GetMsiResource() string {
	if x != nil {
		return x.MsiResource
	}
	return ""
}

func (x *AzureStorageSpec) GetUserAssignedID() string {
	if x != nil {
		return x.UserAssignedID
	}
	return ""
}

func (x *AzureStorageSpec) GetHttp() *HTTPConfig {
	if x != nil {
		return x.Http
	}
	return nil
}

type SwiftStorageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OpenStack Swift authentication API version. 0 to autodetect.
	AuthVersion int32 `protobuf:"varint,1,opt,name=authVersion,proto3" json:"authVersion,omitempty"`
	// OpenStack Swift authentication URL.
	AuthURL string `protobuf:"bytes,2,opt,name=authURL,proto3" json:"authURL,omitempty"`
	// OpenStack Swift username.
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// OpenStack Swift user's domain name.
	UserDomainName string `protobuf:"bytes,4,opt,name=userDomainName,proto3" json:"userDomainName,omitempty"`
	// OpenStack Swift user's domain ID.
	UserDomainID string `protobuf:"bytes,5,opt,name=userDomainID,proto3" json:"userDomainID,omitempty"`
	// OpenStack Swift user ID.
	UserID string `protobuf:"bytes,6,opt,name=userID,proto3" json:"userID,omitempty"`
	// OpenStack Swift API key.
	Password string `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	// OpenStack Swift user's domain ID.
	DomainID string `protobuf:"bytes,8,opt,name=domainID,proto3" json:"domainID,omitempty"`
	// OpenStack Swift user's domain name.
	DomainName string `protobuf:"bytes,9,opt,name=domainName,proto3" json:"domainName,omitempty"`
	// OpenStack Swift project ID (v2,v3 auth only).
	ProjectID string `protobuf:"bytes,10,opt,name=projectID,proto3" json:"projectID,omitempty"`
	// OpenStack Swift project name (v2,v3 auth only).
	ProjectName string `protobuf:"bytes,11,opt,name=projectName,proto3" json:"projectName,omitempty"`
	// ID of the OpenStack Swift project's domain (v3 auth only), only needed
	// if it differs the from user domain.
	ProjectDomainID string `protobuf:"bytes,12,opt,name=projectDomainID,proto3" json:"projectDomainID,omitempty"`
	// Name of the OpenStack Swift project's domain (v3 auth only), only needed
	// if it differs from the user domain.
	ProjectDomainName string `protobuf:"bytes,13,opt,name=projectDomainName,proto3" json:"projectDomainName,omitempty"`
	// OpenStack Swift Region to use (v2,v3 auth only).
	RegionName string `protobuf:"bytes,14,opt,name=regionName,proto3" json:"regionName,omitempty"`
	// Name of the OpenStack Swift container to use. The container must already
	// exist.
	ContainerName string `protobuf:"bytes,15,opt,name=containerName,proto3" json:"containerName,omitempty"`
	// Max number of times to retry failed requests.
	MaxRetries int32 `protobuf:"varint,16,opt,name=maxRetries,proto3" json:"maxRetries,omitempty"`
	// Time after which a connection attempt is aborted.
	ConnectTimeout *durationpb.Duration `protobuf:"bytes,17,opt,name=connectTimeout,proto3" json:"connectTimeout,omitempty"`
	// Time after which an idle request is aborted. The timeout watchdog is reset
	// each time some data is received, so the timeout triggers after X time no
	// data is received on a request.
	RequestTimeout *durationpb.Duration `protobuf:"bytes,18,opt,name=requestTimeout,proto3" json:"requestTimeout,omitempty"`
}

func (x *SwiftStorageSpec) Reset() {
	*x = SwiftStorageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwiftStorageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwiftStorageSpec) ProtoMessage() {}

func (x *SwiftStorageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwiftStorageSpec.ProtoReflect.Descriptor instead.
func (*SwiftStorageSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_rawDescGZIP(), []int{6}
}

func (x *SwiftStorageSpec) GetAuthVersion() int32 {
	if x != nil {
		return x.AuthVersion
	}
	return 0
}

func (x *SwiftStorageSpec) GetAuthURL() string {
	if x != nil {
		return x.AuthURL
	}
	return ""
}

func (x *SwiftStorageSpec) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SwiftStorageSpec) GetUserDomainName() string {
	if x != nil {
		return x.UserDomainName
	}
	return ""
}

func (x *SwiftStorageSpec) GetUserDomainID() string {
	if x != nil {
		return x.UserDomainID
	}
	return ""
}

func (x *SwiftStorageSpec) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SwiftStorageSpec) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SwiftStorageSpec) GetDomainID() string {
	if x != nil {
		return x.DomainID
	}
	return ""
}

func (x *SwiftStorageSpec) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *SwiftStorageSpec) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *SwiftStorageSpec) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *SwiftStorageSpec) GetProjectDomainID() string {
	if x != nil {
		return x.ProjectDomainID
	}
	return ""
}

func (x *SwiftStorageSpec) GetProjectDomainName() string {
	if x != nil {
		return x.ProjectDomainName
	}
	return ""
}

func (x *SwiftStorageSpec) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *SwiftStorageSpec) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *SwiftStorageSpec) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *SwiftStorageSpec) GetConnectTimeout() *durationpb.Duration {
	if x != nil {
		return x.ConnectTimeout
	}
	return nil
}

func (x *SwiftStorageSpec) GetRequestTimeout() *durationpb.Duration {
	if x != nil {
		return x.RequestTimeout
	}
	return nil
}

type FilesystemStorageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Local filesystem storage directory.
	Directory string `protobuf:"bytes,1,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *FilesystemStorageSpec) Reset() {
	*x = FilesystemStorageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemStorageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemStorageSpec) ProtoMessage() {}

func (x *FilesystemStorageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemStorageSpec.ProtoReflect.Descriptor instead.
func (*FilesystemStorageSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_rawDescGZIP(), []int{7}
}

func (x *FilesystemStorageSpec) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

var File_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto protoreflect.FileDescriptor

var file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_rawDesc = []byte{
	0x0a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x02, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x26,
	0x0a, 0x02, 0x73, 0x33, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x02, 0x73, 0x33, 0x12, 0x29, 0x0a, 0x03, 0x67, 0x63, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x43,
	0x53, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x03, 0x67, 0x63,
	0x73, 0x12, 0x2f, 0x0a, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x61, 0x7a, 0x75,
	0x72, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x77, 0x69, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x77, 0x69, 0x66,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x73, 0x77,
	0x69, 0x66, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x22, 0xc6, 0x02, 0x0a, 0x0d, 0x53, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x03, 0x73, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x53, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03,
	0x73, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x22, 0x6f, 0x0a, 0x09,
	0x53, 0x53, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6b, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6b, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x6b, 0x6d, 0x73,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6b, 0x6d, 0x73, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xf0, 0x03,
	0x0a, 0x0a, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x0a, 0x0f,
	0x69, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x69, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x4f, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x6b,
	0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x12, 0x4b, 0x0a, 0x13, 0x74, 0x6c, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61,
	0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x74, 0x6c, 0x73, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x4f, 0x0a, 0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x50,
	0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e,
	0x6e, 0x73, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74,
	0x22, 0x58, 0x0a, 0x0e, 0x47, 0x43, 0x53, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc5, 0x02, 0x0a, 0x10, 0x41,
	0x7a, 0x75, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x2e, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x73, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x73, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x04, 0x68, 0x74, 0x74,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x68, 0x74,
	0x74, 0x70, 0x22, 0xaa, 0x05, 0x0a, 0x10, 0x53, 0x77, 0x69, 0x66, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x75,
	0x74, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x74,
	0x68, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68,
	0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x41, 0x0a, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0x35, 0x0a, 0x15, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e,
	0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_rawDescOnce sync.Once
	file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_rawDescData = file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_rawDesc
)

func file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_rawDescGZIP() []byte {
	file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_rawDescOnce.Do(func() {
		file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_rawDescData)
	})
	return file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_rawDescData
}

var file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_goTypes = []interface{}{
	(*StorageSpec)(nil),           // 0: storage.StorageSpec
	(*S3StorageSpec)(nil),         // 1: storage.S3StorageSpec
	(*SSEConfig)(nil),             // 2: storage.SSEConfig
	(*HTTPConfig)(nil),            // 3: storage.HTTPConfig
	(*GCSStorageSpec)(nil),        // 4: storage.GCSStorageSpec
	(*AzureStorageSpec)(nil),      // 5: storage.AzureStorageSpec
	(*SwiftStorageSpec)(nil),      // 6: storage.SwiftStorageSpec
	(*FilesystemStorageSpec)(nil), // 7: storage.FilesystemStorageSpec
	(*durationpb.Duration)(nil),   // 8: google.protobuf.Duration
}
var file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_depIdxs = []int32{
	1,  // 0: storage.StorageSpec.s3:type_name -> storage.S3StorageSpec
	4,  // 1: storage.StorageSpec.gcs:type_name -> storage.GCSStorageSpec
	5,  // 2: storage.StorageSpec.azure:type_name -> storage.AzureStorageSpec
	6,  // 3: storage.StorageSpec.swift:type_name -> storage.SwiftStorageSpec
	7,  // 4: storage.StorageSpec.filesystem:type_name -> storage.FilesystemStorageSpec
	2,  // 5: storage.S3StorageSpec.sse:type_name -> storage.SSEConfig
	3,  // 6: storage.S3StorageSpec.http:type_name -> storage.HTTPConfig
	8,  // 7: storage.HTTPConfig.idleConnTimeout:type_name -> google.protobuf.Duration
	8,  // 8: storage.HTTPConfig.responseHeaderTimeout:type_name -> google.protobuf.Duration
	8,  // 9: storage.HTTPConfig.tlsHandshakeTimeout:type_name -> google.protobuf.Duration
	8,  // 10: storage.HTTPConfig.expectContinueTimeout:type_name -> google.protobuf.Duration
	3,  // 11: storage.AzureStorageSpec.http:type_name -> storage.HTTPConfig
	8,  // 12: storage.SwiftStorageSpec.connectTimeout:type_name -> google.protobuf.Duration
	8,  // 13: storage.SwiftStorageSpec.requestTimeout:type_name -> google.protobuf.Duration
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_init() }
func file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_init() {
	if File_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3StorageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSEConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCSStorageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureStorageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwiftStorageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemStorageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_goTypes,
		DependencyIndexes: file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_depIdxs,
		MessageInfos:      file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_msgTypes,
	}.Build()
	File_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto = out.File
	file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_rawDesc = nil
	file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_goTypes = nil
	file_github_com_rancher_opni_pkg_apis_storage_v1_storage_proto_depIdxs = nil
}
