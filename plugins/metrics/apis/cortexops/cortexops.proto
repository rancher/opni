syntax = "proto3";

package cortexops;

import "github.com/rancher/opni/internal/codegen/cli/cli.proto";
import "github.com/rancher/opni/internal/cortex/config/compactor/compactor.proto";
import "github.com/rancher/opni/internal/cortex/config/querier/querier.proto";
import "github.com/rancher/opni/internal/cortex/config/runtimeconfig/runtimeconfig.proto";
import "github.com/rancher/opni/internal/cortex/config/validation/limits.proto";
import "github.com/rancher/opni/pkg/apis/core/v1/core.proto";
import "github.com/rancher/opni/pkg/apis/storage/v1/storage.proto";
import "github.com/rancher/opni/pkg/plugins/driverutil/dryrun.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/rancher/opni/plugins/metrics/apis/cortexops";
option (cli.generator) = {
  generate:          true
  generate_deepcopy: true
};

// The CortexOps service contains setup and configuration lifecycle actions for the managed Cortex cluster.
service CortexOps {
  option (cli.command_group) = {
    use: "ops"
  };

  // Returns the default implementation-specific configuration, or one previously set.
  // If a default configuration was previously set using SetDefaultConfiguration, it
  // returns that configuration. Otherwise, returns implementation-specific defaults.
  // An optional revision argument can be provided to get a specific historical
  // version of the configuration instead of the current configuration.
  rpc GetDefaultConfiguration(GetRequest) returns (CapabilityBackendConfigSpec) {
    option (cli.command) = {
      use:          "config get-default"
      enable_hooks: true
    };
    option (google.api.http) = {
      get: "/configuration/default"
    };
  }

  // Sets the default configuration that will be used as the base for future configuration changes.
  // If no custom default configuration is set using this method,
  // implementation-specific defaults may be chosen.
  // If all fields are unset, this will clear any previously-set default configuration
  // and revert back to the implementation-specific defaults.
  //
  // This API is different from the SetConfiguration API, and should not be necessary
  // for most use cases. It can be used in situations where an additional persistence
  // layer that is not driver-specific is desired.
  rpc SetDefaultConfiguration(CapabilityBackendConfigSpec) returns (google.protobuf.Empty) {
    option (cli.command) = {
      use:         "config set-default"
      granularity: EditMessage
    };
    option (google.api.http) = {
      put:  "/configuration/default"
      body: "*"
    };
  }

  // Resets the default configuration to the implementation-specific defaults.
  // If a custom default configuration was previously set using SetDefaultConfiguration,
  // this will clear it and revert back to the implementation-specific defaults.
  // Otherwise, this will have no effect.
  rpc ResetDefaultConfiguration(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (cli.command) = {
      use: "config reset-default"
    };
    option (google.api.http) = {
      delete: "/configuration/default"
    };
  }

  // Gets the current configuration of the managed Cortex cluster.
  // An optional revision argument can be provided to get a specific historical
  // version of the configuration instead of the current configuration.
  rpc GetConfiguration(GetRequest) returns (CapabilityBackendConfigSpec) {
    option (cli.command) = {
      use:          "config get"
      enable_hooks: true
    };
    option (google.api.http) = {
      get: "/configuration"
    };
  }

  // Updates the configuration of the managed Cortex cluster to match the provided configuration.
  // If the cluster is not installed, it will be configured, but remain disabled.
  // Otherwise, the already-installed cluster will be reconfigured.
  // The provided configuration will be merged with the default configuration
  // by directly overwriting fields. Slices and maps are overwritten and not combined.
  // Subsequent calls to this API will merge inputs with the current configuration,
  // not the default configuration.
  // When updating an existing configuration, the revision number in the updated configuration
  // must match the revision number of the existing configuration, otherwise a conflict
  // error will be returned. The timestamp field of the revision is ignored.
  //
  // Note: some fields may contain secrets. The placeholder value "***" can be used to
  // keep an existing secret when updating the cluster configuration.
  rpc SetConfiguration(CapabilityBackendConfigSpec) returns (google.protobuf.Empty) {
    option (cli.command) = {
      use:          "config set"
      enable_hooks: true
      granularity:  EditMessage
    };
    option (google.api.http) = {
      put:  "/configuration"
      body: "*"
    };
  }

  // Resets the configuration of the managed Cortex cluster to the current default configuration.
  // The value of "enabled" will be preserved if it is set.
  rpc ResetConfiguration(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (cli.command) = {
      use: "config reset"
    };
    option (google.api.http) = {
      delete: "/configuration"
    };
  }

  // Gets the current status of the managed Cortex cluster.
  // The status includes the current install state, version, and metadata. If
  // the cluster is in the process of being reconfigured or uninstalled, it will
  // be reflected in the install state.
  // No guarantees are made about the contents of the metadata field; its
  // contents are strictly informational.
  rpc Status(google.protobuf.Empty) returns (InstallStatus) {
    option (cli.command) = {
      use: "status";
    };
    option (google.api.http) = {
      get: "/status"
    };
  }

  // Installs the managed Cortex cluster.
  // The cluster will be installed using the current configuration, or the
  // default configuration if none is explicitly set.
  rpc Install(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (cli.command) = {
      use: "install";
    };
    option (google.api.http) = {
      post: "/install"
    };
  }

  // Uninstalls the managed Cortex cluster.
  // Implementation details including error handling and system state requirements
  // are left to the cluster driver, and this API makes no guarantees about
  // the state of the cluster after the call completes (regardless of success).
  rpc Uninstall(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (cli.command) = {
      use: "uninstall";
    };
    option (google.api.http) = {
      post: "/uninstall"
    };
  }

  // Returns a static list of presets that can be used as a base for configuring the managed Cortex cluster.
  // There are several ways to use the presets, depending
  // on the desired behavior:
  // 1. Set the default configuration to a preset spec, then use SetConfiguration
  //    to fill in any additional required fields (credentials, etc)
  // 2. Add the required fields to the default configuration, then use
  //    SetConfiguration with a preset spec.
  // 3. Leave the default configuration as-is, and use SetConfiguration with a
  //    preset spec plus the required fields.
  rpc ListPresets(google.protobuf.Empty) returns (PresetList) {
    option (cli.command) = {
      use: "presets list"
    };
    option (google.api.http) = {
      get: "/presets"
    };
  }

  // Show what changes would be made to a configuration without saving them.
  // The request expects an action, target, and spec to be provided. These
  // correspond roughly to the other APIs in this service.
  //
  // Configuring DryRunRequest:
  // - Use the Active target for the SetConfiguration API, and the Default target
  //   for the SetDefaultConfiguration API. Install and Uninstall actions do not
  //   require a target.
  // - Only the Set action requires a spec to be provided.
  //
  // Notes:
  // - When DryRun is used on Install or Uninstall requests, the response will
  //   contain modifications to the 'enabled' field only. This field is read-only
  //   in the Set* APIs.
  // - To validate the current configuration but keep it unchanged, use the
  //   Set action with an empty spec.
  // - Configurations returned by DryRun will always have an empty revision field.
  rpc DryRun(DryRunRequest) returns (DryRunResponse) {
    option (cli.command).skip = true;
    option (google.api.http) = {
      post: "/dry-run"
      body: "*"
    };
  }

  // Returns a list of past revisions of the configuration, for either the
  // active or default configuration depending on the specified target.
  // The entries are ordered from oldest to newest, where the last entry is
  // the current configuration.
  rpc ConfigurationHistory(ConfigurationHistoryRequest) returns (ConfigurationHistoryResponse) {
    option (cli.command) = {
      use: "config history"
    };
    option (google.api.http) = {
      get: "/configuration/history"
    };
  }
}

enum InstallState {
  Unknown      = 0;
  NotInstalled = 1;
  Updating     = 2;
  Installed    = 3;
  Uninstalling = 4;
}

message InstallStatus {
  InstallState        state    = 1;
  string              version  = 2;
  map<string, string> metadata = 3;
}

message CapabilityBackendConfigSpec {
  optional bool           enabled         = 1 [(cli.flag).skip = true];
  core.Revision           revision        = 2 [(cli.flag).skip = true];
  CortexWorkloadsConfig   cortexWorkloads = 4;
  CortexApplicationConfig cortexConfig    = 5;
  GrafanaConfig           grafana         = 9;
}

message CortexWorkloadsConfig {
  map<string, CortexWorkloadSpec> targets = 1 [(cli.flag).skip = true];
}

message CortexWorkloadSpec {
  optional int32  replicas  = 1;
  repeated string extraArgs = 2;
}

message CortexApplicationConfig {
  validation.Limits limits = 1 [(cli.flag_set) = {
    default: {
      [type.googleapis.com/validation.Limits]: {
        // these are static overrides to the upstream defaults
        compactor_blocks_retention_period: {seconds: 2592000} /* 30 days */
        ingestion_rate: 600000
        ingestion_burst_size: 1000000
      }
    }
  }];
  runtimeconfig.RuntimeConfigValues runtime_config = 2;
  compactor.Config                  compactor      = 3;
  querier.Config                    querier        = 4;
  storage.Config                    storage        = 5;
  optional string                   log_level      = 6 [(cli.flag).default = "debug"];
}

message GrafanaConfig {
  // Whether to deploy a managed Grafana instance.
  optional bool enabled = 1 [(cli.flag).default = "false"];

  // The version of Grafana to deploy.
  optional string version = 2 [(cli.flag).default = "latest"];

  optional string hostname = 3;
}

message PresetList {
  repeated Preset items = 1;
}

message Preset {
  core.Reference              id       = 1;
  PresetMetadata              metadata = 2;
  CapabilityBackendConfigSpec spec     = 3;
}

message PresetMetadata {
  // A display name for the preset.
  string displayName = 1;
  // Longer description of the preset.
  string description = 2;
  // Optional list of messages that should be displayed to the user when the
  // preset is used (determined at the client's discretion).
  // For example, this may contain additional information about requirements
  // or next steps that the user should be aware of.
  repeated string notes = 3;
}

message DryRunRequest {
  driverutil.Target           target = 1;
  driverutil.Action           action = 2;
  CapabilityBackendConfigSpec spec   = 3;
}

message ValidationError {
  enum Severity {
    Unknown = 0;
    Warning = 1;
    Error   = 2;
  }
  Severity severity = 1;
  string   message  = 2;
}

message DryRunResponse {
  CapabilityBackendConfigSpec current          = 1;
  CapabilityBackendConfigSpec modified         = 2;
  repeated ValidationError    validationErrors = 3;
}

message GetRequest {
  // If set, will return the config at the specified revision instead of
  // the current config.
  // This revision value can be obtained from the revision field of a
  // CapabilityBackendConfigSpec, either from GetConfiguration/GetDefaultConfiguration
  // or from one of the history entries returned by ConfigurationHistory.
  core.Revision revision = 1 [(cli.flag_set).no_prefix = true];
}

message ConfigurationHistoryRequest {
  // The configuration type to return history for.
  driverutil.Target target = 1;

  // If set, will include the values of the configuration in the response.
  // Otherwise, only the revision field of each entry will be populated.
  bool includeValues = 2 [(cli.flag).default = "true"];
}

message ConfigurationHistoryResponse {
  repeated CapabilityBackendConfigSpec entries = 1;
}
