// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/plugins/modeltraining/pkg/modeltraining/modeltraining.proto

package modeltraining

import (
	context "context"
	v1 "github.com/rancher/opni/pkg/apis/core/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModelTrainingClient is the client API for ModelTraining service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelTrainingClient interface {
	TrainModel(ctx context.Context, in *WorkloadInfoList, opts ...grpc.CallOption) (*v1.Reference, error)
	WorkloadLogCount(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*WorkloadInfoList, error)
	GetModelStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ModelStatus, error)
	GetModelTrainingParameters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ModelTrainingParametersList, error)
	GpuPresentCluster(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GPUInfoList, error)
}

type modelTrainingClient struct {
	cc grpc.ClientConnInterface
}

func NewModelTrainingClient(cc grpc.ClientConnInterface) ModelTrainingClient {
	return &modelTrainingClient{cc}
}

func (c *modelTrainingClient) TrainModel(ctx context.Context, in *WorkloadInfoList, opts ...grpc.CallOption) (*v1.Reference, error) {
	out := new(v1.Reference)
	err := c.cc.Invoke(ctx, "/modeltraining.ModelTraining/TrainModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelTrainingClient) WorkloadLogCount(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*WorkloadInfoList, error) {
	out := new(WorkloadInfoList)
	err := c.cc.Invoke(ctx, "/modeltraining.ModelTraining/WorkloadLogCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelTrainingClient) GetModelStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ModelStatus, error) {
	out := new(ModelStatus)
	err := c.cc.Invoke(ctx, "/modeltraining.ModelTraining/GetModelStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelTrainingClient) GetModelTrainingParameters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ModelTrainingParametersList, error) {
	out := new(ModelTrainingParametersList)
	err := c.cc.Invoke(ctx, "/modeltraining.ModelTraining/GetModelTrainingParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelTrainingClient) GpuPresentCluster(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GPUInfoList, error) {
	out := new(GPUInfoList)
	err := c.cc.Invoke(ctx, "/modeltraining.ModelTraining/GpuPresentCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelTrainingServer is the server API for ModelTraining service.
// All implementations must embed UnimplementedModelTrainingServer
// for forward compatibility
type ModelTrainingServer interface {
	TrainModel(context.Context, *WorkloadInfoList) (*v1.Reference, error)
	WorkloadLogCount(context.Context, *v1.Reference) (*WorkloadInfoList, error)
	GetModelStatus(context.Context, *emptypb.Empty) (*ModelStatus, error)
	GetModelTrainingParameters(context.Context, *emptypb.Empty) (*ModelTrainingParametersList, error)
	GpuPresentCluster(context.Context, *emptypb.Empty) (*GPUInfoList, error)
	mustEmbedUnimplementedModelTrainingServer()
}

// UnimplementedModelTrainingServer must be embedded to have forward compatible implementations.
type UnimplementedModelTrainingServer struct {
}

func (UnimplementedModelTrainingServer) TrainModel(context.Context, *WorkloadInfoList) (*v1.Reference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainModel not implemented")
}
func (UnimplementedModelTrainingServer) WorkloadLogCount(context.Context, *v1.Reference) (*WorkloadInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkloadLogCount not implemented")
}
func (UnimplementedModelTrainingServer) GetModelStatus(context.Context, *emptypb.Empty) (*ModelStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelStatus not implemented")
}
func (UnimplementedModelTrainingServer) GetModelTrainingParameters(context.Context, *emptypb.Empty) (*ModelTrainingParametersList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelTrainingParameters not implemented")
}
func (UnimplementedModelTrainingServer) GpuPresentCluster(context.Context, *emptypb.Empty) (*GPUInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GpuPresentCluster not implemented")
}
func (UnimplementedModelTrainingServer) mustEmbedUnimplementedModelTrainingServer() {}

// UnsafeModelTrainingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelTrainingServer will
// result in compilation errors.
type UnsafeModelTrainingServer interface {
	mustEmbedUnimplementedModelTrainingServer()
}

func RegisterModelTrainingServer(s grpc.ServiceRegistrar, srv ModelTrainingServer) {
	s.RegisterService(&ModelTraining_ServiceDesc, srv)
}

func _ModelTraining_TrainModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadInfoList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelTrainingServer).TrainModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modeltraining.ModelTraining/TrainModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelTrainingServer).TrainModel(ctx, req.(*WorkloadInfoList))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelTraining_WorkloadLogCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelTrainingServer).WorkloadLogCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modeltraining.ModelTraining/WorkloadLogCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelTrainingServer).WorkloadLogCount(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelTraining_GetModelStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelTrainingServer).GetModelStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modeltraining.ModelTraining/GetModelStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelTrainingServer).GetModelStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelTraining_GetModelTrainingParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelTrainingServer).GetModelTrainingParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modeltraining.ModelTraining/GetModelTrainingParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelTrainingServer).GetModelTrainingParameters(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelTraining_GpuPresentCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelTrainingServer).GpuPresentCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modeltraining.ModelTraining/GpuPresentCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelTrainingServer).GpuPresentCluster(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelTraining_ServiceDesc is the grpc.ServiceDesc for ModelTraining service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelTraining_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "modeltraining.ModelTraining",
	HandlerType: (*ModelTrainingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TrainModel",
			Handler:    _ModelTraining_TrainModel_Handler,
		},
		{
			MethodName: "WorkloadLogCount",
			Handler:    _ModelTraining_WorkloadLogCount_Handler,
		},
		{
			MethodName: "GetModelStatus",
			Handler:    _ModelTraining_GetModelStatus_Handler,
		},
		{
			MethodName: "GetModelTrainingParameters",
			Handler:    _ModelTraining_GetModelTrainingParameters_Handler,
		},
		{
			MethodName: "GpuPresentCluster",
			Handler:    _ModelTraining_GpuPresentCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/plugins/modeltraining/pkg/modeltraining/modeltraining.proto",
}
