// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/storage/stores.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"
	time "time"

	v1 "github.com/rancher/opni/pkg/apis/core/v1"
	keyring "github.com/rancher/opni/pkg/keyring"
	storage "github.com/rancher/opni/pkg/storage"
	lock "github.com/rancher/opni/pkg/storage/lock"
	gomock "go.uber.org/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBackend) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockBackendMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBackend)(nil).Close))
}

// CreateCluster mocks base method.
func (m *MockBackend) CreateCluster(ctx context.Context, cluster *v1.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", ctx, cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockBackendMockRecorder) CreateCluster(ctx, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockBackend)(nil).CreateCluster), ctx, cluster)
}

// CreateRoleBinding mocks base method.
func (m *MockBackend) CreateRoleBinding(arg0 context.Context, arg1 *v1.RoleBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoleBinding", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoleBinding indicates an expected call of CreateRoleBinding.
func (mr *MockBackendMockRecorder) CreateRoleBinding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoleBinding", reflect.TypeOf((*MockBackend)(nil).CreateRoleBinding), arg0, arg1)
}

// CreateToken mocks base method.
func (m *MockBackend) CreateToken(ctx context.Context, ttl time.Duration, opts ...storage.TokenCreateOption) (*v1.BootstrapToken, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, ttl}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateToken", varargs...)
	ret0, _ := ret[0].(*v1.BootstrapToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockBackendMockRecorder) CreateToken(ctx, ttl interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, ttl}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockBackend)(nil).CreateToken), varargs...)
}

// DeleteCluster mocks base method.
func (m *MockBackend) DeleteCluster(ctx context.Context, ref *v1.Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", ctx, ref)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockBackendMockRecorder) DeleteCluster(ctx, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockBackend)(nil).DeleteCluster), ctx, ref)
}

// DeleteRoleBinding mocks base method.
func (m *MockBackend) DeleteRoleBinding(arg0 context.Context, arg1 *v1.Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleBinding", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleBinding indicates an expected call of DeleteRoleBinding.
func (mr *MockBackendMockRecorder) DeleteRoleBinding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleBinding", reflect.TypeOf((*MockBackend)(nil).DeleteRoleBinding), arg0, arg1)
}

// DeleteToken mocks base method.
func (m *MockBackend) DeleteToken(ctx context.Context, ref *v1.Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", ctx, ref)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockBackendMockRecorder) DeleteToken(ctx, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockBackend)(nil).DeleteToken), ctx, ref)
}

// GetCluster mocks base method.
func (m *MockBackend) GetCluster(ctx context.Context, ref *v1.Reference) (*v1.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", ctx, ref)
	ret0, _ := ret[0].(*v1.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockBackendMockRecorder) GetCluster(ctx, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockBackend)(nil).GetCluster), ctx, ref)
}

// GetRoleBinding mocks base method.
func (m *MockBackend) GetRoleBinding(arg0 context.Context, arg1 *v1.Reference) (*v1.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleBinding", arg0, arg1)
	ret0, _ := ret[0].(*v1.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleBinding indicates an expected call of GetRoleBinding.
func (mr *MockBackendMockRecorder) GetRoleBinding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleBinding", reflect.TypeOf((*MockBackend)(nil).GetRoleBinding), arg0, arg1)
}

// GetToken mocks base method.
func (m *MockBackend) GetToken(ctx context.Context, ref *v1.Reference) (*v1.BootstrapToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", ctx, ref)
	ret0, _ := ret[0].(*v1.BootstrapToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockBackendMockRecorder) GetToken(ctx, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockBackend)(nil).GetToken), ctx, ref)
}

// KeyValueStore mocks base method.
func (m *MockBackend) KeyValueStore(namespace string) storage.KeyValueStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyValueStore", namespace)
	ret0, _ := ret[0].(storage.KeyValueStore)
	return ret0
}

// KeyValueStore indicates an expected call of KeyValueStore.
func (mr *MockBackendMockRecorder) KeyValueStore(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyValueStore", reflect.TypeOf((*MockBackend)(nil).KeyValueStore), namespace)
}

// KeyringStore mocks base method.
func (m *MockBackend) KeyringStore(namespace string, ref *v1.Reference) storage.KeyringStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyringStore", namespace, ref)
	ret0, _ := ret[0].(storage.KeyringStore)
	return ret0
}

// KeyringStore indicates an expected call of KeyringStore.
func (mr *MockBackendMockRecorder) KeyringStore(namespace, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyringStore", reflect.TypeOf((*MockBackend)(nil).KeyringStore), namespace, ref)
}

// ListClusters mocks base method.
func (m *MockBackend) ListClusters(ctx context.Context, matchLabels *v1.LabelSelector, matchOptions v1.MatchOptions) (*v1.ClusterList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", ctx, matchLabels, matchOptions)
	ret0, _ := ret[0].(*v1.ClusterList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockBackendMockRecorder) ListClusters(ctx, matchLabels, matchOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockBackend)(nil).ListClusters), ctx, matchLabels, matchOptions)
}

// ListRoleBindings mocks base method.
func (m *MockBackend) ListRoleBindings(arg0 context.Context) (*v1.RoleBindingList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoleBindings", arg0)
	ret0, _ := ret[0].(*v1.RoleBindingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoleBindings indicates an expected call of ListRoleBindings.
func (mr *MockBackendMockRecorder) ListRoleBindings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoleBindings", reflect.TypeOf((*MockBackend)(nil).ListRoleBindings), arg0)
}

// ListTokens mocks base method.
func (m *MockBackend) ListTokens(ctx context.Context) ([]*v1.BootstrapToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTokens", ctx)
	ret0, _ := ret[0].([]*v1.BootstrapToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTokens indicates an expected call of ListTokens.
func (mr *MockBackendMockRecorder) ListTokens(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTokens", reflect.TypeOf((*MockBackend)(nil).ListTokens), ctx)
}

// UpdateCluster mocks base method.
func (m *MockBackend) UpdateCluster(ctx context.Context, ref *v1.Reference, mutator storage.ClusterMutator) (*v1.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", ctx, ref, mutator)
	ret0, _ := ret[0].(*v1.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockBackendMockRecorder) UpdateCluster(ctx, ref, mutator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockBackend)(nil).UpdateCluster), ctx, ref, mutator)
}

// UpdateRoleBinding mocks base method.
func (m *MockBackend) UpdateRoleBinding(ctx context.Context, ref *v1.Reference, mutator storage.RoleBindingMutator) (*v1.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoleBinding", ctx, ref, mutator)
	ret0, _ := ret[0].(*v1.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoleBinding indicates an expected call of UpdateRoleBinding.
func (mr *MockBackendMockRecorder) UpdateRoleBinding(ctx, ref, mutator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleBinding", reflect.TypeOf((*MockBackend)(nil).UpdateRoleBinding), ctx, ref, mutator)
}

// UpdateToken mocks base method.
func (m *MockBackend) UpdateToken(ctx context.Context, ref *v1.Reference, mutator storage.TokenMutator) (*v1.BootstrapToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateToken", ctx, ref, mutator)
	ret0, _ := ret[0].(*v1.BootstrapToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateToken indicates an expected call of UpdateToken.
func (mr *MockBackendMockRecorder) UpdateToken(ctx, ref, mutator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToken", reflect.TypeOf((*MockBackend)(nil).UpdateToken), ctx, ref, mutator)
}

// WatchCluster mocks base method.
func (m *MockBackend) WatchCluster(ctx context.Context, cluster *v1.Cluster) (<-chan storage.WatchEvent[*v1.Cluster], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchCluster", ctx, cluster)
	ret0, _ := ret[0].(<-chan storage.WatchEvent[*v1.Cluster])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchCluster indicates an expected call of WatchCluster.
func (mr *MockBackendMockRecorder) WatchCluster(ctx, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchCluster", reflect.TypeOf((*MockBackend)(nil).WatchCluster), ctx, cluster)
}

// WatchClusters mocks base method.
func (m *MockBackend) WatchClusters(ctx context.Context, known []*v1.Cluster) (<-chan storage.WatchEvent[*v1.Cluster], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchClusters", ctx, known)
	ret0, _ := ret[0].(<-chan storage.WatchEvent[*v1.Cluster])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchClusters indicates an expected call of WatchClusters.
func (mr *MockBackendMockRecorder) WatchClusters(ctx, known interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchClusters", reflect.TypeOf((*MockBackend)(nil).WatchClusters), ctx, known)
}

// MockTokenStore is a mock of TokenStore interface.
type MockTokenStore struct {
	ctrl     *gomock.Controller
	recorder *MockTokenStoreMockRecorder
}

// MockTokenStoreMockRecorder is the mock recorder for MockTokenStore.
type MockTokenStoreMockRecorder struct {
	mock *MockTokenStore
}

// NewMockTokenStore creates a new mock instance.
func NewMockTokenStore(ctrl *gomock.Controller) *MockTokenStore {
	mock := &MockTokenStore{ctrl: ctrl}
	mock.recorder = &MockTokenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenStore) EXPECT() *MockTokenStoreMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockTokenStore) CreateToken(ctx context.Context, ttl time.Duration, opts ...storage.TokenCreateOption) (*v1.BootstrapToken, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, ttl}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateToken", varargs...)
	ret0, _ := ret[0].(*v1.BootstrapToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockTokenStoreMockRecorder) CreateToken(ctx, ttl interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, ttl}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockTokenStore)(nil).CreateToken), varargs...)
}

// DeleteToken mocks base method.
func (m *MockTokenStore) DeleteToken(ctx context.Context, ref *v1.Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", ctx, ref)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockTokenStoreMockRecorder) DeleteToken(ctx, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockTokenStore)(nil).DeleteToken), ctx, ref)
}

// GetToken mocks base method.
func (m *MockTokenStore) GetToken(ctx context.Context, ref *v1.Reference) (*v1.BootstrapToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", ctx, ref)
	ret0, _ := ret[0].(*v1.BootstrapToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockTokenStoreMockRecorder) GetToken(ctx, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockTokenStore)(nil).GetToken), ctx, ref)
}

// ListTokens mocks base method.
func (m *MockTokenStore) ListTokens(ctx context.Context) ([]*v1.BootstrapToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTokens", ctx)
	ret0, _ := ret[0].([]*v1.BootstrapToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTokens indicates an expected call of ListTokens.
func (mr *MockTokenStoreMockRecorder) ListTokens(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTokens", reflect.TypeOf((*MockTokenStore)(nil).ListTokens), ctx)
}

// UpdateToken mocks base method.
func (m *MockTokenStore) UpdateToken(ctx context.Context, ref *v1.Reference, mutator storage.TokenMutator) (*v1.BootstrapToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateToken", ctx, ref, mutator)
	ret0, _ := ret[0].(*v1.BootstrapToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateToken indicates an expected call of UpdateToken.
func (mr *MockTokenStoreMockRecorder) UpdateToken(ctx, ref, mutator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToken", reflect.TypeOf((*MockTokenStore)(nil).UpdateToken), ctx, ref, mutator)
}

// MockClusterStore is a mock of ClusterStore interface.
type MockClusterStore struct {
	ctrl     *gomock.Controller
	recorder *MockClusterStoreMockRecorder
}

// MockClusterStoreMockRecorder is the mock recorder for MockClusterStore.
type MockClusterStoreMockRecorder struct {
	mock *MockClusterStore
}

// NewMockClusterStore creates a new mock instance.
func NewMockClusterStore(ctrl *gomock.Controller) *MockClusterStore {
	mock := &MockClusterStore{ctrl: ctrl}
	mock.recorder = &MockClusterStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterStore) EXPECT() *MockClusterStoreMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method.
func (m *MockClusterStore) CreateCluster(ctx context.Context, cluster *v1.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", ctx, cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockClusterStoreMockRecorder) CreateCluster(ctx, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockClusterStore)(nil).CreateCluster), ctx, cluster)
}

// DeleteCluster mocks base method.
func (m *MockClusterStore) DeleteCluster(ctx context.Context, ref *v1.Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", ctx, ref)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockClusterStoreMockRecorder) DeleteCluster(ctx, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockClusterStore)(nil).DeleteCluster), ctx, ref)
}

// GetCluster mocks base method.
func (m *MockClusterStore) GetCluster(ctx context.Context, ref *v1.Reference) (*v1.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", ctx, ref)
	ret0, _ := ret[0].(*v1.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockClusterStoreMockRecorder) GetCluster(ctx, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockClusterStore)(nil).GetCluster), ctx, ref)
}

// ListClusters mocks base method.
func (m *MockClusterStore) ListClusters(ctx context.Context, matchLabels *v1.LabelSelector, matchOptions v1.MatchOptions) (*v1.ClusterList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", ctx, matchLabels, matchOptions)
	ret0, _ := ret[0].(*v1.ClusterList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockClusterStoreMockRecorder) ListClusters(ctx, matchLabels, matchOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockClusterStore)(nil).ListClusters), ctx, matchLabels, matchOptions)
}

// UpdateCluster mocks base method.
func (m *MockClusterStore) UpdateCluster(ctx context.Context, ref *v1.Reference, mutator storage.ClusterMutator) (*v1.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", ctx, ref, mutator)
	ret0, _ := ret[0].(*v1.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockClusterStoreMockRecorder) UpdateCluster(ctx, ref, mutator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockClusterStore)(nil).UpdateCluster), ctx, ref, mutator)
}

// WatchCluster mocks base method.
func (m *MockClusterStore) WatchCluster(ctx context.Context, cluster *v1.Cluster) (<-chan storage.WatchEvent[*v1.Cluster], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchCluster", ctx, cluster)
	ret0, _ := ret[0].(<-chan storage.WatchEvent[*v1.Cluster])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchCluster indicates an expected call of WatchCluster.
func (mr *MockClusterStoreMockRecorder) WatchCluster(ctx, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchCluster", reflect.TypeOf((*MockClusterStore)(nil).WatchCluster), ctx, cluster)
}

// WatchClusters mocks base method.
func (m *MockClusterStore) WatchClusters(ctx context.Context, known []*v1.Cluster) (<-chan storage.WatchEvent[*v1.Cluster], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchClusters", ctx, known)
	ret0, _ := ret[0].(<-chan storage.WatchEvent[*v1.Cluster])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchClusters indicates an expected call of WatchClusters.
func (mr *MockClusterStoreMockRecorder) WatchClusters(ctx, known interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchClusters", reflect.TypeOf((*MockClusterStore)(nil).WatchClusters), ctx, known)
}

// MockRoleBindingStore is a mock of RoleBindingStore interface.
type MockRoleBindingStore struct {
	ctrl     *gomock.Controller
	recorder *MockRoleBindingStoreMockRecorder
}

// MockRoleBindingStoreMockRecorder is the mock recorder for MockRoleBindingStore.
type MockRoleBindingStoreMockRecorder struct {
	mock *MockRoleBindingStore
}

// NewMockRoleBindingStore creates a new mock instance.
func NewMockRoleBindingStore(ctrl *gomock.Controller) *MockRoleBindingStore {
	mock := &MockRoleBindingStore{ctrl: ctrl}
	mock.recorder = &MockRoleBindingStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleBindingStore) EXPECT() *MockRoleBindingStoreMockRecorder {
	return m.recorder
}

// CreateRoleBinding mocks base method.
func (m *MockRoleBindingStore) CreateRoleBinding(arg0 context.Context, arg1 *v1.RoleBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoleBinding", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoleBinding indicates an expected call of CreateRoleBinding.
func (mr *MockRoleBindingStoreMockRecorder) CreateRoleBinding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoleBinding", reflect.TypeOf((*MockRoleBindingStore)(nil).CreateRoleBinding), arg0, arg1)
}

// DeleteRoleBinding mocks base method.
func (m *MockRoleBindingStore) DeleteRoleBinding(arg0 context.Context, arg1 *v1.Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleBinding", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleBinding indicates an expected call of DeleteRoleBinding.
func (mr *MockRoleBindingStoreMockRecorder) DeleteRoleBinding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleBinding", reflect.TypeOf((*MockRoleBindingStore)(nil).DeleteRoleBinding), arg0, arg1)
}

// GetRoleBinding mocks base method.
func (m *MockRoleBindingStore) GetRoleBinding(arg0 context.Context, arg1 *v1.Reference) (*v1.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleBinding", arg0, arg1)
	ret0, _ := ret[0].(*v1.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleBinding indicates an expected call of GetRoleBinding.
func (mr *MockRoleBindingStoreMockRecorder) GetRoleBinding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleBinding", reflect.TypeOf((*MockRoleBindingStore)(nil).GetRoleBinding), arg0, arg1)
}

// ListRoleBindings mocks base method.
func (m *MockRoleBindingStore) ListRoleBindings(arg0 context.Context) (*v1.RoleBindingList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoleBindings", arg0)
	ret0, _ := ret[0].(*v1.RoleBindingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoleBindings indicates an expected call of ListRoleBindings.
func (mr *MockRoleBindingStoreMockRecorder) ListRoleBindings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoleBindings", reflect.TypeOf((*MockRoleBindingStore)(nil).ListRoleBindings), arg0)
}

// UpdateRoleBinding mocks base method.
func (m *MockRoleBindingStore) UpdateRoleBinding(ctx context.Context, ref *v1.Reference, mutator storage.RoleBindingMutator) (*v1.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoleBinding", ctx, ref, mutator)
	ret0, _ := ret[0].(*v1.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoleBinding indicates an expected call of UpdateRoleBinding.
func (mr *MockRoleBindingStoreMockRecorder) UpdateRoleBinding(ctx, ref, mutator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleBinding", reflect.TypeOf((*MockRoleBindingStore)(nil).UpdateRoleBinding), ctx, ref, mutator)
}

// MockKeyringStore is a mock of KeyringStore interface.
type MockKeyringStore struct {
	ctrl     *gomock.Controller
	recorder *MockKeyringStoreMockRecorder
}

// MockKeyringStoreMockRecorder is the mock recorder for MockKeyringStore.
type MockKeyringStoreMockRecorder struct {
	mock *MockKeyringStore
}

// NewMockKeyringStore creates a new mock instance.
func NewMockKeyringStore(ctrl *gomock.Controller) *MockKeyringStore {
	mock := &MockKeyringStore{ctrl: ctrl}
	mock.recorder = &MockKeyringStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyringStore) EXPECT() *MockKeyringStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockKeyringStore) Delete(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKeyringStoreMockRecorder) Delete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKeyringStore)(nil).Delete), ctx)
}

// Get mocks base method.
func (m *MockKeyringStore) Get(ctx context.Context) (keyring.Keyring, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].(keyring.Keyring)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKeyringStoreMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeyringStore)(nil).Get), ctx)
}

// Put mocks base method.
func (m *MockKeyringStore) Put(ctx context.Context, keyring keyring.Keyring) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, keyring)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockKeyringStoreMockRecorder) Put(ctx, keyring interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockKeyringStore)(nil).Put), ctx, keyring)
}

// MockKeyRevision is a mock of KeyRevision interface.
type MockKeyRevision[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockKeyRevisionMockRecorder[T]
}

// MockKeyRevisionMockRecorder is the mock recorder for MockKeyRevision.
type MockKeyRevisionMockRecorder[T any] struct {
	mock *MockKeyRevision[T]
}

// NewMockKeyRevision creates a new mock instance.
func NewMockKeyRevision[T any](ctrl *gomock.Controller) *MockKeyRevision[T] {
	mock := &MockKeyRevision[T]{ctrl: ctrl}
	mock.recorder = &MockKeyRevisionMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyRevision[T]) EXPECT() *MockKeyRevisionMockRecorder[T] {
	return m.recorder
}

// Key mocks base method.
func (m *MockKeyRevision[T]) Key() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockKeyRevisionMockRecorder[T]) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockKeyRevision[T])(nil).Key))
}

// Revision mocks base method.
func (m *MockKeyRevision[T]) Revision() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revision")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Revision indicates an expected call of Revision.
func (mr *MockKeyRevisionMockRecorder[T]) Revision() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revision", reflect.TypeOf((*MockKeyRevision[T])(nil).Revision))
}

// SetKey mocks base method.
func (m *MockKeyRevision[T]) SetKey(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetKey", arg0)
}

// SetKey indicates an expected call of SetKey.
func (mr *MockKeyRevisionMockRecorder[T]) SetKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKey", reflect.TypeOf((*MockKeyRevision[T])(nil).SetKey), arg0)
}

// Timestamp mocks base method.
func (m *MockKeyRevision[T]) Timestamp() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timestamp")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Timestamp indicates an expected call of Timestamp.
func (mr *MockKeyRevisionMockRecorder[T]) Timestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timestamp", reflect.TypeOf((*MockKeyRevision[T])(nil).Timestamp))
}

// Value mocks base method.
func (m *MockKeyRevision[T]) Value() T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(T)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockKeyRevisionMockRecorder[T]) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockKeyRevision[T])(nil).Value))
}

// MockKeyValueStoreT is a mock of KeyValueStoreT interface.
type MockKeyValueStoreT[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockKeyValueStoreTMockRecorder[T]
}

// MockKeyValueStoreTMockRecorder is the mock recorder for MockKeyValueStoreT.
type MockKeyValueStoreTMockRecorder[T any] struct {
	mock *MockKeyValueStoreT[T]
}

// NewMockKeyValueStoreT creates a new mock instance.
func NewMockKeyValueStoreT[T any](ctrl *gomock.Controller) *MockKeyValueStoreT[T] {
	mock := &MockKeyValueStoreT[T]{ctrl: ctrl}
	mock.recorder = &MockKeyValueStoreTMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyValueStoreT[T]) EXPECT() *MockKeyValueStoreTMockRecorder[T] {
	return m.recorder
}

// Delete mocks base method.
func (m *MockKeyValueStoreT[T]) Delete(ctx context.Context, key string, opts ...storage.DeleteOpt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKeyValueStoreTMockRecorder[T]) Delete(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKeyValueStoreT[T])(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockKeyValueStoreT[T]) Get(ctx context.Context, key string, opts ...storage.GetOpt) (T, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKeyValueStoreTMockRecorder[T]) Get(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeyValueStoreT[T])(nil).Get), varargs...)
}

// History mocks base method.
func (m *MockKeyValueStoreT[T]) History(ctx context.Context, key string, opts ...storage.HistoryOpt) ([]storage.KeyRevision[T], error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "History", varargs...)
	ret0, _ := ret[0].([]storage.KeyRevision[T])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// History indicates an expected call of History.
func (mr *MockKeyValueStoreTMockRecorder[T]) History(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "History", reflect.TypeOf((*MockKeyValueStoreT[T])(nil).History), varargs...)
}

// ListKeys mocks base method.
func (m *MockKeyValueStoreT[T]) ListKeys(ctx context.Context, prefix string, opts ...storage.ListOpt) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, prefix}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKeys", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeys indicates an expected call of ListKeys.
func (mr *MockKeyValueStoreTMockRecorder[T]) ListKeys(ctx, prefix interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, prefix}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockKeyValueStoreT[T])(nil).ListKeys), varargs...)
}

// Put mocks base method.
func (m *MockKeyValueStoreT[T]) Put(ctx context.Context, key string, value T, opts ...storage.PutOpt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key, value}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockKeyValueStoreTMockRecorder[T]) Put(ctx, key, value interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key, value}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockKeyValueStoreT[T])(nil).Put), varargs...)
}

// Watch mocks base method.
func (m *MockKeyValueStoreT[T]) Watch(ctx context.Context, key string, opts ...storage.WatchOpt) (<-chan storage.WatchEvent[storage.KeyRevision[T]], error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(<-chan storage.WatchEvent[storage.KeyRevision[T]])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockKeyValueStoreTMockRecorder[T]) Watch(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockKeyValueStoreT[T])(nil).Watch), varargs...)
}

// MockValueStoreT is a mock of ValueStoreT interface.
type MockValueStoreT[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockValueStoreTMockRecorder[T]
}

// MockValueStoreTMockRecorder is the mock recorder for MockValueStoreT.
type MockValueStoreTMockRecorder[T any] struct {
	mock *MockValueStoreT[T]
}

// NewMockValueStoreT creates a new mock instance.
func NewMockValueStoreT[T any](ctrl *gomock.Controller) *MockValueStoreT[T] {
	mock := &MockValueStoreT[T]{ctrl: ctrl}
	mock.recorder = &MockValueStoreTMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValueStoreT[T]) EXPECT() *MockValueStoreTMockRecorder[T] {
	return m.recorder
}

// Delete mocks base method.
func (m *MockValueStoreT[T]) Delete(ctx context.Context, opts ...storage.DeleteOpt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockValueStoreTMockRecorder[T]) Delete(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockValueStoreT[T])(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockValueStoreT[T]) Get(ctx context.Context, opts ...storage.GetOpt) (T, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockValueStoreTMockRecorder[T]) Get(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockValueStoreT[T])(nil).Get), varargs...)
}

// History mocks base method.
func (m *MockValueStoreT[T]) History(ctx context.Context, opts ...storage.HistoryOpt) ([]storage.KeyRevision[T], error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "History", varargs...)
	ret0, _ := ret[0].([]storage.KeyRevision[T])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// History indicates an expected call of History.
func (mr *MockValueStoreTMockRecorder[T]) History(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "History", reflect.TypeOf((*MockValueStoreT[T])(nil).History), varargs...)
}

// Put mocks base method.
func (m *MockValueStoreT[T]) Put(ctx context.Context, value T, opts ...storage.PutOpt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, value}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockValueStoreTMockRecorder[T]) Put(ctx, value interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, value}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockValueStoreT[T])(nil).Put), varargs...)
}

// Watch mocks base method.
func (m *MockValueStoreT[T]) Watch(ctx context.Context, opts ...storage.WatchOpt) (<-chan storage.WatchEvent[storage.KeyRevision[T]], error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(<-chan storage.WatchEvent[storage.KeyRevision[T]])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockValueStoreTMockRecorder[T]) Watch(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockValueStoreT[T])(nil).Watch), varargs...)
}

// MockKeyringStoreBroker is a mock of KeyringStoreBroker interface.
type MockKeyringStoreBroker struct {
	ctrl     *gomock.Controller
	recorder *MockKeyringStoreBrokerMockRecorder
}

// MockKeyringStoreBrokerMockRecorder is the mock recorder for MockKeyringStoreBroker.
type MockKeyringStoreBrokerMockRecorder struct {
	mock *MockKeyringStoreBroker
}

// NewMockKeyringStoreBroker creates a new mock instance.
func NewMockKeyringStoreBroker(ctrl *gomock.Controller) *MockKeyringStoreBroker {
	mock := &MockKeyringStoreBroker{ctrl: ctrl}
	mock.recorder = &MockKeyringStoreBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyringStoreBroker) EXPECT() *MockKeyringStoreBrokerMockRecorder {
	return m.recorder
}

// KeyringStore mocks base method.
func (m *MockKeyringStoreBroker) KeyringStore(namespace string, ref *v1.Reference) storage.KeyringStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyringStore", namespace, ref)
	ret0, _ := ret[0].(storage.KeyringStore)
	return ret0
}

// KeyringStore indicates an expected call of KeyringStore.
func (mr *MockKeyringStoreBrokerMockRecorder) KeyringStore(namespace, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyringStore", reflect.TypeOf((*MockKeyringStoreBroker)(nil).KeyringStore), namespace, ref)
}

// MockKeyValueStoreBroker is a mock of KeyValueStoreBroker interface.
type MockKeyValueStoreBroker struct {
	ctrl     *gomock.Controller
	recorder *MockKeyValueStoreBrokerMockRecorder
}

// MockKeyValueStoreBrokerMockRecorder is the mock recorder for MockKeyValueStoreBroker.
type MockKeyValueStoreBrokerMockRecorder struct {
	mock *MockKeyValueStoreBroker
}

// NewMockKeyValueStoreBroker creates a new mock instance.
func NewMockKeyValueStoreBroker(ctrl *gomock.Controller) *MockKeyValueStoreBroker {
	mock := &MockKeyValueStoreBroker{ctrl: ctrl}
	mock.recorder = &MockKeyValueStoreBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyValueStoreBroker) EXPECT() *MockKeyValueStoreBrokerMockRecorder {
	return m.recorder
}

// KeyValueStore mocks base method.
func (m *MockKeyValueStoreBroker) KeyValueStore(namespace string) storage.KeyValueStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyValueStore", namespace)
	ret0, _ := ret[0].(storage.KeyValueStore)
	return ret0
}

// KeyValueStore indicates an expected call of KeyValueStore.
func (mr *MockKeyValueStoreBrokerMockRecorder) KeyValueStore(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyValueStore", reflect.TypeOf((*MockKeyValueStoreBroker)(nil).KeyValueStore), namespace)
}

// MockKeyValueStoreTBroker is a mock of KeyValueStoreTBroker interface.
type MockKeyValueStoreTBroker[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockKeyValueStoreTBrokerMockRecorder[T]
}

// MockKeyValueStoreTBrokerMockRecorder is the mock recorder for MockKeyValueStoreTBroker.
type MockKeyValueStoreTBrokerMockRecorder[T any] struct {
	mock *MockKeyValueStoreTBroker[T]
}

// NewMockKeyValueStoreTBroker creates a new mock instance.
func NewMockKeyValueStoreTBroker[T any](ctrl *gomock.Controller) *MockKeyValueStoreTBroker[T] {
	mock := &MockKeyValueStoreTBroker[T]{ctrl: ctrl}
	mock.recorder = &MockKeyValueStoreTBrokerMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyValueStoreTBroker[T]) EXPECT() *MockKeyValueStoreTBrokerMockRecorder[T] {
	return m.recorder
}

// KeyValueStore mocks base method.
func (m *MockKeyValueStoreTBroker[T]) KeyValueStore(namespace string) storage.KeyValueStoreT[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyValueStore", namespace)
	ret0, _ := ret[0].(storage.KeyValueStoreT[T])
	return ret0
}

// KeyValueStore indicates an expected call of KeyValueStore.
func (mr *MockKeyValueStoreTBrokerMockRecorder[T]) KeyValueStore(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyValueStore", reflect.TypeOf((*MockKeyValueStoreTBroker[T])(nil).KeyValueStore), namespace)
}

// MockLockManagerBroker is a mock of LockManagerBroker interface.
type MockLockManagerBroker struct {
	ctrl     *gomock.Controller
	recorder *MockLockManagerBrokerMockRecorder
}

// MockLockManagerBrokerMockRecorder is the mock recorder for MockLockManagerBroker.
type MockLockManagerBrokerMockRecorder struct {
	mock *MockLockManagerBroker
}

// NewMockLockManagerBroker creates a new mock instance.
func NewMockLockManagerBroker(ctrl *gomock.Controller) *MockLockManagerBroker {
	mock := &MockLockManagerBroker{ctrl: ctrl}
	mock.recorder = &MockLockManagerBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockManagerBroker) EXPECT() *MockLockManagerBrokerMockRecorder {
	return m.recorder
}

// LockManager mocks base method.
func (m *MockLockManagerBroker) LockManager(namespace string) storage.LockManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockManager", namespace)
	ret0, _ := ret[0].(storage.LockManager)
	return ret0
}

// LockManager indicates an expected call of LockManager.
func (mr *MockLockManagerBrokerMockRecorder) LockManager(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockManager", reflect.TypeOf((*MockLockManagerBroker)(nil).LockManager), namespace)
}

// MockSubjectAccessCapableStore is a mock of SubjectAccessCapableStore interface.
type MockSubjectAccessCapableStore struct {
	ctrl     *gomock.Controller
	recorder *MockSubjectAccessCapableStoreMockRecorder
}

// MockSubjectAccessCapableStoreMockRecorder is the mock recorder for MockSubjectAccessCapableStore.
type MockSubjectAccessCapableStoreMockRecorder struct {
	mock *MockSubjectAccessCapableStore
}

// NewMockSubjectAccessCapableStore creates a new mock instance.
func NewMockSubjectAccessCapableStore(ctrl *gomock.Controller) *MockSubjectAccessCapableStore {
	mock := &MockSubjectAccessCapableStore{ctrl: ctrl}
	mock.recorder = &MockSubjectAccessCapableStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubjectAccessCapableStore) EXPECT() *MockSubjectAccessCapableStoreMockRecorder {
	return m.recorder
}

// GetRole mocks base method.
func (m *MockSubjectAccessCapableStore) GetRole(ctx context.Context, ref *v1.Reference) (*v1.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx, ref)
	ret0, _ := ret[0].(*v1.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockSubjectAccessCapableStoreMockRecorder) GetRole(ctx, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockSubjectAccessCapableStore)(nil).GetRole), ctx, ref)
}

// ListClusters mocks base method.
func (m *MockSubjectAccessCapableStore) ListClusters(ctx context.Context, matchLabels *v1.LabelSelector, matchOptions v1.MatchOptions) (*v1.ClusterList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", ctx, matchLabels, matchOptions)
	ret0, _ := ret[0].(*v1.ClusterList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockSubjectAccessCapableStoreMockRecorder) ListClusters(ctx, matchLabels, matchOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockSubjectAccessCapableStore)(nil).ListClusters), ctx, matchLabels, matchOptions)
}

// ListRoleBindings mocks base method.
func (m *MockSubjectAccessCapableStore) ListRoleBindings(ctx context.Context) (*v1.RoleBindingList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoleBindings", ctx)
	ret0, _ := ret[0].(*v1.RoleBindingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoleBindings indicates an expected call of ListRoleBindings.
func (mr *MockSubjectAccessCapableStoreMockRecorder) ListRoleBindings(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoleBindings", reflect.TypeOf((*MockSubjectAccessCapableStore)(nil).ListRoleBindings), ctx)
}

// MockLock is a mock of Lock interface.
type MockLock struct {
	ctrl     *gomock.Controller
	recorder *MockLockMockRecorder
}

// MockLockMockRecorder is the mock recorder for MockLock.
type MockLockMockRecorder struct {
	mock *MockLock
}

// NewMockLock creates a new mock instance.
func NewMockLock(ctrl *gomock.Controller) *MockLock {
	mock := &MockLock{ctrl: ctrl}
	mock.recorder = &MockLockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLock) EXPECT() *MockLockMockRecorder {
	return m.recorder
}

// Key mocks base method.
func (m *MockLock) Key() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockLockMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockLock)(nil).Key))
}

// Lock mocks base method.
func (m *MockLock) Lock() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock")
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock.
func (mr *MockLockMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockLock)(nil).Lock))
}

// TryLock mocks base method.
func (m *MockLock) TryLock() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryLock")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryLock indicates an expected call of TryLock.
func (mr *MockLockMockRecorder) TryLock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryLock", reflect.TypeOf((*MockLock)(nil).TryLock))
}

// Unlock mocks base method.
func (m *MockLock) Unlock() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock")
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlock indicates an expected call of Unlock.
func (mr *MockLockMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockLock)(nil).Unlock))
}

// MockLockManager is a mock of LockManager interface.
type MockLockManager struct {
	ctrl     *gomock.Controller
	recorder *MockLockManagerMockRecorder
}

// MockLockManagerMockRecorder is the mock recorder for MockLockManager.
type MockLockManagerMockRecorder struct {
	mock *MockLockManager
}

// NewMockLockManager creates a new mock instance.
func NewMockLockManager(ctrl *gomock.Controller) *MockLockManager {
	mock := &MockLockManager{ctrl: ctrl}
	mock.recorder = &MockLockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockManager) EXPECT() *MockLockManagerMockRecorder {
	return m.recorder
}

// Locker mocks base method.
func (m *MockLockManager) Locker(key string, opts ...lock.LockOption) storage.Lock {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Locker", varargs...)
	ret0, _ := ret[0].(storage.Lock)
	return ret0
}

// Locker indicates an expected call of Locker.
func (mr *MockLockManagerMockRecorder) Locker(key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Locker", reflect.TypeOf((*MockLockManager)(nil).Locker), varargs...)
}

// MockHttpTtlCache is a mock of HttpTtlCache interface.
type MockHttpTtlCache[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockHttpTtlCacheMockRecorder[T]
}

// MockHttpTtlCacheMockRecorder is the mock recorder for MockHttpTtlCache.
type MockHttpTtlCacheMockRecorder[T any] struct {
	mock *MockHttpTtlCache[T]
}

// NewMockHttpTtlCache creates a new mock instance.
func NewMockHttpTtlCache[T any](ctrl *gomock.Controller) *MockHttpTtlCache[T] {
	mock := &MockHttpTtlCache[T]{ctrl: ctrl}
	mock.recorder = &MockHttpTtlCacheMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpTtlCache[T]) EXPECT() *MockHttpTtlCacheMockRecorder[T] {
	return m.recorder
}

// Delete mocks base method.
func (m *MockHttpTtlCache[T]) Delete(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", key)
}

// Delete indicates an expected call of Delete.
func (mr *MockHttpTtlCacheMockRecorder[T]) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHttpTtlCache[T])(nil).Delete), key)
}

// Get mocks base method.
func (m *MockHttpTtlCache[T]) Get(key string) (T, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHttpTtlCacheMockRecorder[T]) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHttpTtlCache[T])(nil).Get), key)
}

// MaxAge mocks base method.
func (m *MockHttpTtlCache[T]) MaxAge() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxAge")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// MaxAge indicates an expected call of MaxAge.
func (mr *MockHttpTtlCacheMockRecorder[T]) MaxAge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxAge", reflect.TypeOf((*MockHttpTtlCache[T])(nil).MaxAge))
}

// Set mocks base method.
func (m *MockHttpTtlCache[T]) Set(key string, resp T) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, resp)
}

// Set indicates an expected call of Set.
func (mr *MockHttpTtlCacheMockRecorder[T]) Set(key, resp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockHttpTtlCache[T])(nil).Set), key, resp)
}

// MockGrpcTtlCache is a mock of GrpcTtlCache interface.
type MockGrpcTtlCache[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockGrpcTtlCacheMockRecorder[T]
}

// MockGrpcTtlCacheMockRecorder is the mock recorder for MockGrpcTtlCache.
type MockGrpcTtlCacheMockRecorder[T any] struct {
	mock *MockGrpcTtlCache[T]
}

// NewMockGrpcTtlCache creates a new mock instance.
func NewMockGrpcTtlCache[T any](ctrl *gomock.Controller) *MockGrpcTtlCache[T] {
	mock := &MockGrpcTtlCache[T]{ctrl: ctrl}
	mock.recorder = &MockGrpcTtlCacheMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGrpcTtlCache[T]) EXPECT() *MockGrpcTtlCacheMockRecorder[T] {
	return m.recorder
}

// Delete mocks base method.
func (m *MockGrpcTtlCache[T]) Delete(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", key)
}

// Delete indicates an expected call of Delete.
func (mr *MockGrpcTtlCacheMockRecorder[T]) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGrpcTtlCache[T])(nil).Delete), key)
}

// Get mocks base method.
func (m *MockGrpcTtlCache[T]) Get(key string) (T, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGrpcTtlCacheMockRecorder[T]) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGrpcTtlCache[T])(nil).Get), key)
}

// MaxAge mocks base method.
func (m *MockGrpcTtlCache[T]) MaxAge() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxAge")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// MaxAge indicates an expected call of MaxAge.
func (mr *MockGrpcTtlCacheMockRecorder[T]) MaxAge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxAge", reflect.TypeOf((*MockGrpcTtlCache[T])(nil).MaxAge))
}

// Set mocks base method.
func (m *MockGrpcTtlCache[T]) Set(key string, resp T, ttl time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, resp, ttl)
}

// Set indicates an expected call of Set.
func (mr *MockGrpcTtlCacheMockRecorder[T]) Set(key, resp, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockGrpcTtlCache[T])(nil).Set), key, resp, ttl)
}
