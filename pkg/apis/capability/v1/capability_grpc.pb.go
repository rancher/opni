// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/pkg/apis/capability/v1/capability.proto

package v1

import (
	context "context"
	v1 "github.com/rancher/opni/pkg/apis/core/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Backend_Info_FullMethodName            = "/capability.Backend/Info"
	Backend_List_FullMethodName            = "/capability.Backend/List"
	Backend_Install_FullMethodName         = "/capability.Backend/Install"
	Backend_Status_FullMethodName          = "/capability.Backend/Status"
	Backend_Uninstall_FullMethodName       = "/capability.Backend/Uninstall"
	Backend_UninstallStatus_FullMethodName = "/capability.Backend/UninstallStatus"
	Backend_CancelUninstall_FullMethodName = "/capability.Backend/CancelUninstall"
)

// BackendClient is the client API for Backend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendClient interface {
	// Returns info about the backend, including capability name.
	Info(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*Details, error)
	// Returns a list of capabilities available in the backend.
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DetailsList, error)
	// Installs the capability on an agent.
	Install(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*InstallResponse, error)
	// Returns common runtime config info for this capability from a specific agent.
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*NodeCapabilityStatus, error)
	// Requests the backend to clean up any resources it owns and prepare
	// for uninstallation. This process is asynchronous. The status of the
	// operation can be queried using the UninstallStatus method, or canceled
	// using the CancelUninstall method.
	Uninstall(ctx context.Context, in *UninstallRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Gets the status of the uninstall task for the given cluster.
	UninstallStatus(ctx context.Context, in *UninstallStatusRequest, opts ...grpc.CallOption) (*v1.TaskStatus, error)
	// Cancels an uninstall task for the given cluster, if it is still pending.
	CancelUninstall(ctx context.Context, in *CancelUninstallRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type backendClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendClient(cc grpc.ClientConnInterface) BackendClient {
	return &backendClient{cc}
}

func (c *backendClient) Info(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*Details, error) {
	out := new(Details)
	err := c.cc.Invoke(ctx, Backend_Info_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DetailsList, error) {
	out := new(DetailsList)
	err := c.cc.Invoke(ctx, Backend_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) Install(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*InstallResponse, error) {
	out := new(InstallResponse)
	err := c.cc.Invoke(ctx, Backend_Install_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*NodeCapabilityStatus, error) {
	out := new(NodeCapabilityStatus)
	err := c.cc.Invoke(ctx, Backend_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) Uninstall(ctx context.Context, in *UninstallRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Backend_Uninstall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) UninstallStatus(ctx context.Context, in *UninstallStatusRequest, opts ...grpc.CallOption) (*v1.TaskStatus, error) {
	out := new(v1.TaskStatus)
	err := c.cc.Invoke(ctx, Backend_UninstallStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) CancelUninstall(ctx context.Context, in *CancelUninstallRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Backend_CancelUninstall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServer is the server API for Backend service.
// All implementations should embed UnimplementedBackendServer
// for forward compatibility
type BackendServer interface {
	// Returns info about the backend, including capability name.
	Info(context.Context, *v1.Reference) (*Details, error)
	// Returns a list of capabilities available in the backend.
	List(context.Context, *emptypb.Empty) (*DetailsList, error)
	// Installs the capability on an agent.
	Install(context.Context, *InstallRequest) (*InstallResponse, error)
	// Returns common runtime config info for this capability from a specific agent.
	Status(context.Context, *StatusRequest) (*NodeCapabilityStatus, error)
	// Requests the backend to clean up any resources it owns and prepare
	// for uninstallation. This process is asynchronous. The status of the
	// operation can be queried using the UninstallStatus method, or canceled
	// using the CancelUninstall method.
	Uninstall(context.Context, *UninstallRequest) (*emptypb.Empty, error)
	// Gets the status of the uninstall task for the given cluster.
	UninstallStatus(context.Context, *UninstallStatusRequest) (*v1.TaskStatus, error)
	// Cancels an uninstall task for the given cluster, if it is still pending.
	CancelUninstall(context.Context, *CancelUninstallRequest) (*emptypb.Empty, error)
}

// UnimplementedBackendServer should be embedded to have forward compatible implementations.
type UnimplementedBackendServer struct {
}

func (UnimplementedBackendServer) Info(context.Context, *v1.Reference) (*Details, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedBackendServer) List(context.Context, *emptypb.Empty) (*DetailsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBackendServer) Install(context.Context, *InstallRequest) (*InstallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Install not implemented")
}
func (UnimplementedBackendServer) Status(context.Context, *StatusRequest) (*NodeCapabilityStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedBackendServer) Uninstall(context.Context, *UninstallRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uninstall not implemented")
}
func (UnimplementedBackendServer) UninstallStatus(context.Context, *UninstallStatusRequest) (*v1.TaskStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallStatus not implemented")
}
func (UnimplementedBackendServer) CancelUninstall(context.Context, *CancelUninstallRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelUninstall not implemented")
}

// UnsafeBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendServer will
// result in compilation errors.
type UnsafeBackendServer interface {
	mustEmbedUnimplementedBackendServer()
}

func RegisterBackendServer(s grpc.ServiceRegistrar, srv BackendServer) {
	s.RegisterService(&Backend_ServiceDesc, srv)
}

func _Backend_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backend_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).Info(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backend_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_Install_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).Install(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backend_Install_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).Install(ctx, req.(*InstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backend_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_Uninstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).Uninstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backend_Uninstall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).Uninstall(ctx, req.(*UninstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_UninstallStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).UninstallStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backend_UninstallStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).UninstallStatus(ctx, req.(*UninstallStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_CancelUninstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelUninstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).CancelUninstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backend_CancelUninstall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).CancelUninstall(ctx, req.(*CancelUninstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Backend_ServiceDesc is the grpc.ServiceDesc for Backend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "capability.Backend",
	HandlerType: (*BackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Backend_Info_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Backend_List_Handler,
		},
		{
			MethodName: "Install",
			Handler:    _Backend_Install_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Backend_Status_Handler,
		},
		{
			MethodName: "Uninstall",
			Handler:    _Backend_Uninstall_Handler,
		},
		{
			MethodName: "UninstallStatus",
			Handler:    _Backend_UninstallStatus_Handler,
		},
		{
			MethodName: "CancelUninstall",
			Handler:    _Backend_CancelUninstall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/pkg/apis/capability/v1/capability.proto",
}

const (
	Node_SyncNow_FullMethodName = "/capability.Node/SyncNow"
)

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeClient interface {
	SyncNow(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) SyncNow(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Node_SyncNow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
// All implementations should embed UnimplementedNodeServer
// for forward compatibility
type NodeServer interface {
	SyncNow(context.Context, *Filter) (*emptypb.Empty, error)
}

// UnimplementedNodeServer should be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (UnimplementedNodeServer) SyncNow(context.Context, *Filter) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncNow not implemented")
}

// UnsafeNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServer will
// result in compilation errors.
type UnsafeNodeServer interface {
	mustEmbedUnimplementedNodeServer()
}

func RegisterNodeServer(s grpc.ServiceRegistrar, srv NodeServer) {
	s.RegisterService(&Node_ServiceDesc, srv)
}

func _Node_SyncNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SyncNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_SyncNow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SyncNow(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

// Node_ServiceDesc is the grpc.ServiceDesc for Node service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Node_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "capability.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncNow",
			Handler:    _Node_SyncNow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/pkg/apis/capability/v1/capability.proto",
}

const (
	RBACManager_Info_FullMethodName                    = "/capability.RBACManager/Info"
	RBACManager_List_FullMethodName                    = "/capability.RBACManager/List"
	RBACManager_GetAvailablePermissions_FullMethodName = "/capability.RBACManager/GetAvailablePermissions"
	RBACManager_GetRole_FullMethodName                 = "/capability.RBACManager/GetRole"
	RBACManager_CreateRole_FullMethodName              = "/capability.RBACManager/CreateRole"
	RBACManager_UpdateRole_FullMethodName              = "/capability.RBACManager/UpdateRole"
	RBACManager_DeleteRole_FullMethodName              = "/capability.RBACManager/DeleteRole"
	RBACManager_ListRoles_FullMethodName               = "/capability.RBACManager/ListRoles"
)

// RBACManagerClient is the client API for RBACManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RBACManagerClient interface {
	// Returns info about the manager, including capability name
	Info(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*Details, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DetailsList, error)
	GetAvailablePermissions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.AvailablePermissions, error)
	GetRole(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*v1.Role, error)
	CreateRole(ctx context.Context, in *v1.Role, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateRole(ctx context.Context, in *v1.Role, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteRole(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListRoles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.RoleList, error)
}

type rBACManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewRBACManagerClient(cc grpc.ClientConnInterface) RBACManagerClient {
	return &rBACManagerClient{cc}
}

func (c *rBACManagerClient) Info(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*Details, error) {
	out := new(Details)
	err := c.cc.Invoke(ctx, RBACManager_Info_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACManagerClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DetailsList, error) {
	out := new(DetailsList)
	err := c.cc.Invoke(ctx, RBACManager_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACManagerClient) GetAvailablePermissions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.AvailablePermissions, error) {
	out := new(v1.AvailablePermissions)
	err := c.cc.Invoke(ctx, RBACManager_GetAvailablePermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACManagerClient) GetRole(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*v1.Role, error) {
	out := new(v1.Role)
	err := c.cc.Invoke(ctx, RBACManager_GetRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACManagerClient) CreateRole(ctx context.Context, in *v1.Role, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RBACManager_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACManagerClient) UpdateRole(ctx context.Context, in *v1.Role, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RBACManager_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACManagerClient) DeleteRole(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RBACManager_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACManagerClient) ListRoles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.RoleList, error) {
	out := new(v1.RoleList)
	err := c.cc.Invoke(ctx, RBACManager_ListRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RBACManagerServer is the server API for RBACManager service.
// All implementations should embed UnimplementedRBACManagerServer
// for forward compatibility
type RBACManagerServer interface {
	// Returns info about the manager, including capability name
	Info(context.Context, *v1.Reference) (*Details, error)
	List(context.Context, *emptypb.Empty) (*DetailsList, error)
	GetAvailablePermissions(context.Context, *emptypb.Empty) (*v1.AvailablePermissions, error)
	GetRole(context.Context, *v1.Reference) (*v1.Role, error)
	CreateRole(context.Context, *v1.Role) (*emptypb.Empty, error)
	UpdateRole(context.Context, *v1.Role) (*emptypb.Empty, error)
	DeleteRole(context.Context, *v1.Reference) (*emptypb.Empty, error)
	ListRoles(context.Context, *emptypb.Empty) (*v1.RoleList, error)
}

// UnimplementedRBACManagerServer should be embedded to have forward compatible implementations.
type UnimplementedRBACManagerServer struct {
}

func (UnimplementedRBACManagerServer) Info(context.Context, *v1.Reference) (*Details, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedRBACManagerServer) List(context.Context, *emptypb.Empty) (*DetailsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRBACManagerServer) GetAvailablePermissions(context.Context, *emptypb.Empty) (*v1.AvailablePermissions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailablePermissions not implemented")
}
func (UnimplementedRBACManagerServer) GetRole(context.Context, *v1.Reference) (*v1.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedRBACManagerServer) CreateRole(context.Context, *v1.Role) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedRBACManagerServer) UpdateRole(context.Context, *v1.Role) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedRBACManagerServer) DeleteRole(context.Context, *v1.Reference) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRBACManagerServer) ListRoles(context.Context, *emptypb.Empty) (*v1.RoleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}

// UnsafeRBACManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RBACManagerServer will
// result in compilation errors.
type UnsafeRBACManagerServer interface {
	mustEmbedUnimplementedRBACManagerServer()
}

func RegisterRBACManagerServer(s grpc.ServiceRegistrar, srv RBACManagerServer) {
	s.RegisterService(&RBACManager_ServiceDesc, srv)
}

func _RBACManager_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACManagerServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACManager_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACManagerServer).Info(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACManager_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACManagerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACManager_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACManagerServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACManager_GetAvailablePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACManagerServer).GetAvailablePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACManager_GetAvailablePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACManagerServer).GetAvailablePermissions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACManager_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACManagerServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACManager_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACManagerServer).GetRole(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACManager_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACManagerServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACManager_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACManagerServer).CreateRole(ctx, req.(*v1.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACManager_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACManagerServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACManager_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACManagerServer).UpdateRole(ctx, req.(*v1.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACManager_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACManagerServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACManager_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACManagerServer).DeleteRole(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACManager_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACManagerServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACManager_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACManagerServer).ListRoles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RBACManager_ServiceDesc is the grpc.ServiceDesc for RBACManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RBACManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "capability.RBACManager",
	HandlerType: (*RBACManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _RBACManager_Info_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RBACManager_List_Handler,
		},
		{
			MethodName: "GetAvailablePermissions",
			Handler:    _RBACManager_GetAvailablePermissions_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _RBACManager_GetRole_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _RBACManager_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _RBACManager_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RBACManager_DeleteRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _RBACManager_ListRoles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/pkg/apis/capability/v1/capability.proto",
}
