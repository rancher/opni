// @generated by protoc-gen-es v1.3.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file github.com/rancher/opni/pkg/apis/capability/v1/capability.proto (package capability, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct, Timestamp } from "@bufbuild/protobuf";
import { Reference, Revision } from "../../core/v1/core_pb";

/**
 * @generated from enum capability.InstallResponseStatus
 */
export enum InstallResponseStatus {
  /**
   * @generated from enum value: Unknown = 0;
   */
  Unknown = 0,

  /**
   * @generated from enum value: Success = 1;
   */
  Success = 1,

  /**
   * @generated from enum value: Warning = 2;
   */
  Warning = 2,

  /**
   * @generated from enum value: Error = 3;
   */
  Error = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(InstallResponseStatus)
proto3.util.setEnumType(InstallResponseStatus, "capability.InstallResponseStatus", [
  { no: 0, name: "Unknown" },
  { no: 1, name: "Success" },
  { no: 2, name: "Warning" },
  { no: 3, name: "Error" },
]);

/**
 * @generated from message capability.Details
 */
export class Details extends Message<Details> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string source = 2;
   */
  source = "";

  /**
   * @generated from field: repeated string availableDrivers = 3;
   */
  availableDrivers: string[] = [];

  /**
   * @generated from field: string enabledDriver = 4;
   */
  enabledDriver = "";

  constructor(data?: PartialMessage<Details>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "capability.Details";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "availableDrivers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "enabledDriver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Details {
    return new Details().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Details {
    return new Details().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Details {
    return new Details().fromJsonString(jsonString, options);
  }

  static equals(a: Details | PlainMessage<Details> | undefined, b: Details | PlainMessage<Details> | undefined): boolean {
    return proto3.util.equals(Details, a, b);
  }
}

/**
 * @generated from message capability.Filter
 */
export class Filter extends Message<Filter> {
  /**
   * @generated from field: repeated string capabilityNames = 1;
   */
  capabilityNames: string[] = [];

  constructor(data?: PartialMessage<Filter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "capability.Filter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capabilityNames", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Filter {
    return new Filter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Filter {
    return new Filter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Filter {
    return new Filter().fromJsonString(jsonString, options);
  }

  static equals(a: Filter | PlainMessage<Filter> | undefined, b: Filter | PlainMessage<Filter> | undefined): boolean {
    return proto3.util.equals(Filter, a, b);
  }
}

/**
 * @generated from message capability.InstallRequest
 */
export class InstallRequest extends Message<InstallRequest> {
  /**
   * @generated from field: core.Reference capability = 3;
   */
  capability?: Reference;

  /**
   * @generated from field: core.Reference agent = 1;
   */
  agent?: Reference;

  /**
   * @generated from field: bool ignoreWarnings = 2;
   */
  ignoreWarnings = false;

  constructor(data?: PartialMessage<InstallRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "capability.InstallRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "capability", kind: "message", T: Reference },
    { no: 1, name: "agent", kind: "message", T: Reference },
    { no: 2, name: "ignoreWarnings", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstallRequest {
    return new InstallRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstallRequest {
    return new InstallRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstallRequest {
    return new InstallRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InstallRequest | PlainMessage<InstallRequest> | undefined, b: InstallRequest | PlainMessage<InstallRequest> | undefined): boolean {
    return proto3.util.equals(InstallRequest, a, b);
  }
}

/**
 * @generated from message capability.StatusRequest
 */
export class StatusRequest extends Message<StatusRequest> {
  /**
   * @generated from field: core.Reference capability = 3;
   */
  capability?: Reference;

  /**
   * @generated from field: core.Reference agent = 1;
   */
  agent?: Reference;

  constructor(data?: PartialMessage<StatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "capability.StatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "capability", kind: "message", T: Reference },
    { no: 1, name: "agent", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusRequest {
    return new StatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusRequest {
    return new StatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusRequest {
    return new StatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StatusRequest | PlainMessage<StatusRequest> | undefined, b: StatusRequest | PlainMessage<StatusRequest> | undefined): boolean {
    return proto3.util.equals(StatusRequest, a, b);
  }
}

/**
 * @generated from message capability.InstallResponse
 */
export class InstallResponse extends Message<InstallResponse> {
  /**
   * @generated from field: capability.InstallResponseStatus status = 1;
   */
  status = InstallResponseStatus.Unknown;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<InstallResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "capability.InstallResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(InstallResponseStatus) },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstallResponse {
    return new InstallResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstallResponse {
    return new InstallResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstallResponse {
    return new InstallResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InstallResponse | PlainMessage<InstallResponse> | undefined, b: InstallResponse | PlainMessage<InstallResponse> | undefined): boolean {
    return proto3.util.equals(InstallResponse, a, b);
  }
}

/**
 * @generated from message capability.UninstallRequest
 */
export class UninstallRequest extends Message<UninstallRequest> {
  /**
   * @generated from field: core.Reference capability = 3;
   */
  capability?: Reference;

  /**
   * @generated from field: core.Reference agent = 1;
   */
  agent?: Reference;

  /**
   * @generated from field: google.protobuf.Struct options = 2;
   */
  options?: Struct;

  constructor(data?: PartialMessage<UninstallRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "capability.UninstallRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "capability", kind: "message", T: Reference },
    { no: 1, name: "agent", kind: "message", T: Reference },
    { no: 2, name: "options", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UninstallRequest {
    return new UninstallRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UninstallRequest {
    return new UninstallRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UninstallRequest {
    return new UninstallRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UninstallRequest | PlainMessage<UninstallRequest> | undefined, b: UninstallRequest | PlainMessage<UninstallRequest> | undefined): boolean {
    return proto3.util.equals(UninstallRequest, a, b);
  }
}

/**
 * @generated from message capability.InstallerTemplateResponse
 */
export class InstallerTemplateResponse extends Message<InstallerTemplateResponse> {
  /**
   * @generated from field: string template = 1;
   */
  template = "";

  constructor(data?: PartialMessage<InstallerTemplateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "capability.InstallerTemplateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "template", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstallerTemplateResponse {
    return new InstallerTemplateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstallerTemplateResponse {
    return new InstallerTemplateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstallerTemplateResponse {
    return new InstallerTemplateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InstallerTemplateResponse | PlainMessage<InstallerTemplateResponse> | undefined, b: InstallerTemplateResponse | PlainMessage<InstallerTemplateResponse> | undefined): boolean {
    return proto3.util.equals(InstallerTemplateResponse, a, b);
  }
}

/**
 * @generated from message capability.NodeCapabilityStatus
 */
export class NodeCapabilityStatus extends Message<NodeCapabilityStatus> {
  /**
   * @generated from field: bool enabled = 1;
   */
  enabled = false;

  /**
   * @generated from field: google.protobuf.Timestamp lastSync = 2;
   */
  lastSync?: Timestamp;

  /**
   * @generated from field: repeated string conditions = 3;
   */
  conditions: string[] = [];

  /**
   * @generated from field: core.Revision lastRevision = 4;
   */
  lastRevision?: Revision;

  constructor(data?: PartialMessage<NodeCapabilityStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "capability.NodeCapabilityStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "lastSync", kind: "message", T: Timestamp },
    { no: 3, name: "conditions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "lastRevision", kind: "message", T: Revision },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeCapabilityStatus {
    return new NodeCapabilityStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeCapabilityStatus {
    return new NodeCapabilityStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeCapabilityStatus {
    return new NodeCapabilityStatus().fromJsonString(jsonString, options);
  }

  static equals(a: NodeCapabilityStatus | PlainMessage<NodeCapabilityStatus> | undefined, b: NodeCapabilityStatus | PlainMessage<NodeCapabilityStatus> | undefined): boolean {
    return proto3.util.equals(NodeCapabilityStatus, a, b);
  }
}

/**
 * @generated from message capability.UninstallStatusRequest
 */
export class UninstallStatusRequest extends Message<UninstallStatusRequest> {
  /**
   * @generated from field: core.Reference capability = 1;
   */
  capability?: Reference;

  /**
   * @generated from field: core.Reference agent = 2;
   */
  agent?: Reference;

  constructor(data?: PartialMessage<UninstallStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "capability.UninstallStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capability", kind: "message", T: Reference },
    { no: 2, name: "agent", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UninstallStatusRequest {
    return new UninstallStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UninstallStatusRequest {
    return new UninstallStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UninstallStatusRequest {
    return new UninstallStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UninstallStatusRequest | PlainMessage<UninstallStatusRequest> | undefined, b: UninstallStatusRequest | PlainMessage<UninstallStatusRequest> | undefined): boolean {
    return proto3.util.equals(UninstallStatusRequest, a, b);
  }
}

/**
 * @generated from message capability.CancelUninstallRequest
 */
export class CancelUninstallRequest extends Message<CancelUninstallRequest> {
  /**
   * @generated from field: core.Reference capability = 1;
   */
  capability?: Reference;

  /**
   * @generated from field: core.Reference agent = 2;
   */
  agent?: Reference;

  constructor(data?: PartialMessage<CancelUninstallRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "capability.CancelUninstallRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capability", kind: "message", T: Reference },
    { no: 2, name: "agent", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelUninstallRequest {
    return new CancelUninstallRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelUninstallRequest {
    return new CancelUninstallRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelUninstallRequest {
    return new CancelUninstallRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CancelUninstallRequest | PlainMessage<CancelUninstallRequest> | undefined, b: CancelUninstallRequest | PlainMessage<CancelUninstallRequest> | undefined): boolean {
    return proto3.util.equals(CancelUninstallRequest, a, b);
  }
}

/**
 * @generated from message capability.DetailsList
 */
export class DetailsList extends Message<DetailsList> {
  /**
   * @generated from field: repeated capability.Details items = 1;
   */
  items: Details[] = [];

  /**
   * @generated from field: core.Revision lastRevision = 4;
   */
  lastRevision?: Revision;

  constructor(data?: PartialMessage<DetailsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "capability.DetailsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Details, repeated: true },
    { no: 4, name: "lastRevision", kind: "message", T: Revision },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DetailsList {
    return new DetailsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DetailsList {
    return new DetailsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DetailsList {
    return new DetailsList().fromJsonString(jsonString, options);
  }

  static equals(a: DetailsList | PlainMessage<DetailsList> | undefined, b: DetailsList | PlainMessage<DetailsList> | undefined): boolean {
    return proto3.util.equals(DetailsList, a, b);
  }
}

