syntax = "proto3";
option go_package = "github.com/rancher/opni/pkg/plugins/slo/pkg/apis/slo";

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/api/http.proto";
import "google/api/annotations.proto";
import "github.com/rancher/opni/pkg/apis/core/v1/core.proto";
import "google/rpc/status.proto";

package slo;

service SLO {
  // ============== SLO
  rpc CreateSLO(CreateSLORequest) returns (core.ReferenceList) {
    option (google.api.http) = {
      post: "/slos"
      body: "*"
    };
  }
  rpc GetSLO(core.Reference) returns (SLOData) {
    option (google.api.http) = {
      get: "/slos/{id}"
    };
  }
  rpc ListSLOs(google.protobuf.Empty) returns (ServiceLevelObjectiveList) {
    option (google.api.http) = {
      get: "/slos"
    };
  }
  rpc UpdateSLO(SLOData) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/slos/{id}"
      body: "*"
    };
  }
  rpc DeleteSLO(core.Reference) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/slos/{id}"
    };
  }
  rpc CloneSLO(core.Reference) returns (SLOData) {
    option (google.api.http) = {
      post: "/slos/{id}/clone"
    };
  }

  // Can this metric run with this service & cluster? No == error
  rpc GetMetricId(MetricRequest) returns (Service) {
    option (google.api.http) = {
      get: "/metrics/{name}/{serviceId}"
    };
  }
  rpc ListMetrics(google.protobuf.Empty) returns (MetricList) {
    option (google.api.http) = {
      get: "/metrics"
    };
  }
    // ========== Services API ===========
  rpc ListServices(google.protobuf.Empty) returns (ServiceList) {
    option (google.api.http) = {
      get: "/services"
    };
  }

   // ================ Poll SLO Status
  rpc Status(core.Reference) returns (SLOStatus) {
    option (google.api.http) = {
      get: "/slos/{id}/status"
    };
  }

}

message Service {
  string jobId = 1;
  string metricName = 2; 
  string metricIdGood = 3;
  string metricIdTotal = 4;
  string clusterId = 5;
}

message ServiceList {
  repeated Service items = 1;
}

message Label {
  string name = 1;
}

message Alert {
  string name = 1;
  string notificationTarget = 2; // enum of Slack, PagerDuty, Email, SMS, etc..
  string notificationDescription = 3;
  string description = 4;
  string conditionType = 5;
  string thresholdType = 6;
  bool onNoData = 7;
  bool onCreate = 8;
  bool onBreach = 9;
  bool onResolved = 10;
}

message ServiceLevelObjective {
  string name = 1;
  string datasource = 2;
  string monitorWindow = 3; // 7d, 28d or 30d
  google.protobuf.Duration budgetingInterval = 4; // budgeting interval should be between 1m and 60m
  Target target = 5;
  repeated Label labels = 6;
  repeated Alert alerts = 7;
}

message CreateSLORequest {
  ServiceLevelObjective SLO = 1;
  repeated Service services = 2;
}

message Services {
  repeated Service items = 1;
}



message SLOData {
  string id = 1;
  ServiceLevelObjective SLO = 2;
  Service service = 3;
}

message Target {
  uint64 valueX100 = 1;
}

message Metric {
  string name = 1;
  string datasource = 2;
  string clusterId = 3;
  string serviceId = 4;
  string metricIdGood = 5;
  string metricIdTotal = 6;
}

message MetricRequest {
  string name = 1;
  string datasource = 2;
  string serviceId = 3;
  string clusterId = 4;
}

message MetricList {
  repeated Metric items = 1;
}

message ServiceLevelObjectiveList {
  repeated SLOData items = 1;
}

enum SLOStatusState {
  NoData = 0;
  Ok = 1;
  Warning = 2;
  Breaching = 3;
  InternalError = 4;
}

message SLOStatus {
  SLOStatusState state = 1;
}
