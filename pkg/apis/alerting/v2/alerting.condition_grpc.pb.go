// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/pkg/apis/alerting/v2/alerting.condition.proto

package v2

import (
	context "context"
	v1 "github.com/rancher/opni/pkg/apis/core/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlertConditionsV2Client is the client API for AlertConditionsV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertConditionsV2Client interface {
	CreateAlertCondition(ctx context.Context, in *AlertCondition, opts ...grpc.CallOption) (*v1.Reference, error)
	GetAlertCondition(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*AlertCondition, error)
	ListAlertCondition(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AlertConditionList, error)
	UpdateAlertCondition(ctx context.Context, in *AlertCondition, opts ...grpc.CallOption) (*v1.Reference, error)
	DeleteAlertCondition(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*v1.Reference, error)
	AlertStatus(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*AlertConditionStatus, error)
	CloneTo(ctx context.Context, in *CloneToRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ActivateSilence(ctx context.Context, in *SilenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// conditionId
	DeactivateSilence(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AcknowedgeAlert(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type alertConditionsV2Client struct {
	cc grpc.ClientConnInterface
}

func NewAlertConditionsV2Client(cc grpc.ClientConnInterface) AlertConditionsV2Client {
	return &alertConditionsV2Client{cc}
}

func (c *alertConditionsV2Client) CreateAlertCondition(ctx context.Context, in *AlertCondition, opts ...grpc.CallOption) (*v1.Reference, error) {
	out := new(v1.Reference)
	err := c.cc.Invoke(ctx, "/alertingv2.AlertConditionsV2/CreateAlertCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertConditionsV2Client) GetAlertCondition(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*AlertCondition, error) {
	out := new(AlertCondition)
	err := c.cc.Invoke(ctx, "/alertingv2.AlertConditionsV2/GetAlertCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertConditionsV2Client) ListAlertCondition(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AlertConditionList, error) {
	out := new(AlertConditionList)
	err := c.cc.Invoke(ctx, "/alertingv2.AlertConditionsV2/ListAlertCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertConditionsV2Client) UpdateAlertCondition(ctx context.Context, in *AlertCondition, opts ...grpc.CallOption) (*v1.Reference, error) {
	out := new(v1.Reference)
	err := c.cc.Invoke(ctx, "/alertingv2.AlertConditionsV2/UpdateAlertCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertConditionsV2Client) DeleteAlertCondition(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*v1.Reference, error) {
	out := new(v1.Reference)
	err := c.cc.Invoke(ctx, "/alertingv2.AlertConditionsV2/DeleteAlertCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertConditionsV2Client) AlertStatus(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*AlertConditionStatus, error) {
	out := new(AlertConditionStatus)
	err := c.cc.Invoke(ctx, "/alertingv2.AlertConditionsV2/AlertStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertConditionsV2Client) CloneTo(ctx context.Context, in *CloneToRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alertingv2.AlertConditionsV2/CloneTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertConditionsV2Client) ActivateSilence(ctx context.Context, in *SilenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alertingv2.AlertConditionsV2/ActivateSilence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertConditionsV2Client) DeactivateSilence(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alertingv2.AlertConditionsV2/DeactivateSilence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertConditionsV2Client) AcknowedgeAlert(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alertingv2.AlertConditionsV2/AcknowedgeAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertConditionsV2Server is the server API for AlertConditionsV2 service.
// All implementations must embed UnimplementedAlertConditionsV2Server
// for forward compatibility
type AlertConditionsV2Server interface {
	CreateAlertCondition(context.Context, *AlertCondition) (*v1.Reference, error)
	GetAlertCondition(context.Context, *v1.Reference) (*AlertCondition, error)
	ListAlertCondition(context.Context, *emptypb.Empty) (*AlertConditionList, error)
	UpdateAlertCondition(context.Context, *AlertCondition) (*v1.Reference, error)
	DeleteAlertCondition(context.Context, *v1.Reference) (*v1.Reference, error)
	AlertStatus(context.Context, *v1.Reference) (*AlertConditionStatus, error)
	CloneTo(context.Context, *CloneToRequest) (*emptypb.Empty, error)
	ActivateSilence(context.Context, *SilenceRequest) (*emptypb.Empty, error)
	// conditionId
	DeactivateSilence(context.Context, *v1.Reference) (*emptypb.Empty, error)
	AcknowedgeAlert(context.Context, *v1.Reference) (*emptypb.Empty, error)
	mustEmbedUnimplementedAlertConditionsV2Server()
}

// UnimplementedAlertConditionsV2Server must be embedded to have forward compatible implementations.
type UnimplementedAlertConditionsV2Server struct {
}

func (UnimplementedAlertConditionsV2Server) CreateAlertCondition(context.Context, *AlertCondition) (*v1.Reference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlertCondition not implemented")
}
func (UnimplementedAlertConditionsV2Server) GetAlertCondition(context.Context, *v1.Reference) (*AlertCondition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertCondition not implemented")
}
func (UnimplementedAlertConditionsV2Server) ListAlertCondition(context.Context, *emptypb.Empty) (*AlertConditionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlertCondition not implemented")
}
func (UnimplementedAlertConditionsV2Server) UpdateAlertCondition(context.Context, *AlertCondition) (*v1.Reference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlertCondition not implemented")
}
func (UnimplementedAlertConditionsV2Server) DeleteAlertCondition(context.Context, *v1.Reference) (*v1.Reference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlertCondition not implemented")
}
func (UnimplementedAlertConditionsV2Server) AlertStatus(context.Context, *v1.Reference) (*AlertConditionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlertStatus not implemented")
}
func (UnimplementedAlertConditionsV2Server) CloneTo(context.Context, *CloneToRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneTo not implemented")
}
func (UnimplementedAlertConditionsV2Server) ActivateSilence(context.Context, *SilenceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateSilence not implemented")
}
func (UnimplementedAlertConditionsV2Server) DeactivateSilence(context.Context, *v1.Reference) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateSilence not implemented")
}
func (UnimplementedAlertConditionsV2Server) AcknowedgeAlert(context.Context, *v1.Reference) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcknowedgeAlert not implemented")
}
func (UnimplementedAlertConditionsV2Server) mustEmbedUnimplementedAlertConditionsV2Server() {}

// UnsafeAlertConditionsV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertConditionsV2Server will
// result in compilation errors.
type UnsafeAlertConditionsV2Server interface {
	mustEmbedUnimplementedAlertConditionsV2Server()
}

func RegisterAlertConditionsV2Server(s grpc.ServiceRegistrar, srv AlertConditionsV2Server) {
	s.RegisterService(&AlertConditionsV2_ServiceDesc, srv)
}

func _AlertConditionsV2_CreateAlertCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertCondition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConditionsV2Server).CreateAlertCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alertingv2.AlertConditionsV2/CreateAlertCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConditionsV2Server).CreateAlertCondition(ctx, req.(*AlertCondition))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertConditionsV2_GetAlertCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConditionsV2Server).GetAlertCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alertingv2.AlertConditionsV2/GetAlertCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConditionsV2Server).GetAlertCondition(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertConditionsV2_ListAlertCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConditionsV2Server).ListAlertCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alertingv2.AlertConditionsV2/ListAlertCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConditionsV2Server).ListAlertCondition(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertConditionsV2_UpdateAlertCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertCondition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConditionsV2Server).UpdateAlertCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alertingv2.AlertConditionsV2/UpdateAlertCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConditionsV2Server).UpdateAlertCondition(ctx, req.(*AlertCondition))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertConditionsV2_DeleteAlertCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConditionsV2Server).DeleteAlertCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alertingv2.AlertConditionsV2/DeleteAlertCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConditionsV2Server).DeleteAlertCondition(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertConditionsV2_AlertStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConditionsV2Server).AlertStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alertingv2.AlertConditionsV2/AlertStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConditionsV2Server).AlertStatus(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertConditionsV2_CloneTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConditionsV2Server).CloneTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alertingv2.AlertConditionsV2/CloneTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConditionsV2Server).CloneTo(ctx, req.(*CloneToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertConditionsV2_ActivateSilence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SilenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConditionsV2Server).ActivateSilence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alertingv2.AlertConditionsV2/ActivateSilence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConditionsV2Server).ActivateSilence(ctx, req.(*SilenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertConditionsV2_DeactivateSilence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConditionsV2Server).DeactivateSilence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alertingv2.AlertConditionsV2/DeactivateSilence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConditionsV2Server).DeactivateSilence(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertConditionsV2_AcknowedgeAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConditionsV2Server).AcknowedgeAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alertingv2.AlertConditionsV2/AcknowedgeAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConditionsV2Server).AcknowedgeAlert(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

// AlertConditionsV2_ServiceDesc is the grpc.ServiceDesc for AlertConditionsV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertConditionsV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alertingv2.AlertConditionsV2",
	HandlerType: (*AlertConditionsV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAlertCondition",
			Handler:    _AlertConditionsV2_CreateAlertCondition_Handler,
		},
		{
			MethodName: "GetAlertCondition",
			Handler:    _AlertConditionsV2_GetAlertCondition_Handler,
		},
		{
			MethodName: "ListAlertCondition",
			Handler:    _AlertConditionsV2_ListAlertCondition_Handler,
		},
		{
			MethodName: "UpdateAlertCondition",
			Handler:    _AlertConditionsV2_UpdateAlertCondition_Handler,
		},
		{
			MethodName: "DeleteAlertCondition",
			Handler:    _AlertConditionsV2_DeleteAlertCondition_Handler,
		},
		{
			MethodName: "AlertStatus",
			Handler:    _AlertConditionsV2_AlertStatus_Handler,
		},
		{
			MethodName: "CloneTo",
			Handler:    _AlertConditionsV2_CloneTo_Handler,
		},
		{
			MethodName: "ActivateSilence",
			Handler:    _AlertConditionsV2_ActivateSilence_Handler,
		},
		{
			MethodName: "DeactivateSilence",
			Handler:    _AlertConditionsV2_DeactivateSilence_Handler,
		},
		{
			MethodName: "AcknowedgeAlert",
			Handler:    _AlertConditionsV2_AcknowedgeAlert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/pkg/apis/alerting/v2/alerting.condition.proto",
}

// AlertConditionsSyncV2Client is the client API for AlertConditionsSyncV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertConditionsSyncV2Client interface {
	SyncAlertingRules(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SyncOpenSearchMonitors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type alertConditionsSyncV2Client struct {
	cc grpc.ClientConnInterface
}

func NewAlertConditionsSyncV2Client(cc grpc.ClientConnInterface) AlertConditionsSyncV2Client {
	return &alertConditionsSyncV2Client{cc}
}

func (c *alertConditionsSyncV2Client) SyncAlertingRules(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alertingv2.AlertConditionsSyncV2/SyncAlertingRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertConditionsSyncV2Client) SyncOpenSearchMonitors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alertingv2.AlertConditionsSyncV2/SyncOpenSearchMonitors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertConditionsSyncV2Server is the server API for AlertConditionsSyncV2 service.
// All implementations must embed UnimplementedAlertConditionsSyncV2Server
// for forward compatibility
type AlertConditionsSyncV2Server interface {
	SyncAlertingRules(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	SyncOpenSearchMonitors(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedAlertConditionsSyncV2Server()
}

// UnimplementedAlertConditionsSyncV2Server must be embedded to have forward compatible implementations.
type UnimplementedAlertConditionsSyncV2Server struct {
}

func (UnimplementedAlertConditionsSyncV2Server) SyncAlertingRules(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAlertingRules not implemented")
}
func (UnimplementedAlertConditionsSyncV2Server) SyncOpenSearchMonitors(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncOpenSearchMonitors not implemented")
}
func (UnimplementedAlertConditionsSyncV2Server) mustEmbedUnimplementedAlertConditionsSyncV2Server() {}

// UnsafeAlertConditionsSyncV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertConditionsSyncV2Server will
// result in compilation errors.
type UnsafeAlertConditionsSyncV2Server interface {
	mustEmbedUnimplementedAlertConditionsSyncV2Server()
}

func RegisterAlertConditionsSyncV2Server(s grpc.ServiceRegistrar, srv AlertConditionsSyncV2Server) {
	s.RegisterService(&AlertConditionsSyncV2_ServiceDesc, srv)
}

func _AlertConditionsSyncV2_SyncAlertingRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConditionsSyncV2Server).SyncAlertingRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alertingv2.AlertConditionsSyncV2/SyncAlertingRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConditionsSyncV2Server).SyncAlertingRules(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertConditionsSyncV2_SyncOpenSearchMonitors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConditionsSyncV2Server).SyncOpenSearchMonitors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alertingv2.AlertConditionsSyncV2/SyncOpenSearchMonitors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConditionsSyncV2Server).SyncOpenSearchMonitors(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AlertConditionsSyncV2_ServiceDesc is the grpc.ServiceDesc for AlertConditionsSyncV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertConditionsSyncV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alertingv2.AlertConditionsSyncV2",
	HandlerType: (*AlertConditionsSyncV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncAlertingRules",
			Handler:    _AlertConditionsSyncV2_SyncAlertingRules_Handler,
		},
		{
			MethodName: "SyncOpenSearchMonitors",
			Handler:    _AlertConditionsSyncV2_SyncOpenSearchMonitors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/pkg/apis/alerting/v2/alerting.condition.proto",
}
