syntax = "proto3";
option go_package = "github.com/rancher/opni/pkg/apis/management/v1";

import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "google/api/http.proto";
import "google/api/annotations.proto";
import "google/rpc/status.proto";
import "github.com/rancher/opni/pkg/apis/core/v1/core.proto";
import "github.com/rancher/opni/pkg/apis/capability/v1/capability.proto";
import "github.com/kralicky/grpc-gateway/v2/protoc-gen-openapiv2/options/annotations.proto";

package management;

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Opni Monitoring Management API";
		version: "1.0";
		license: {
			name: "Apache 2.0";
			url: "https://github.com/rancher/opni/blob/main/LICENSE";
		};
  };
};

service Management {
  rpc CreateBootstrapToken(CreateBootstrapTokenRequest) returns (core.BootstrapToken) {
    option (google.api.http) = {
      post: "/management/tokens"
      body: "*"
    };
  }
  rpc RevokeBootstrapToken(core.Reference) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/management/tokens/{id}"
    };
  }
  rpc ListBootstrapTokens(google.protobuf.Empty) returns (core.BootstrapTokenList) {
    option (google.api.http) = {
      get: "/management/tokens"
    };
  }
  rpc GetBootstrapToken(core.Reference) returns (core.BootstrapToken) {
    option (google.api.http) = {
      get: "/management/tokens/{id}"
    };
  }
  rpc ListClusters(ListClustersRequest) returns (core.ClusterList) {
    option (google.api.http) = {
      get: "/management/clusters"
    };
  }
  rpc WatchClusters(WatchClustersRequest) returns (stream WatchEvent) {
    option (google.api.http) = {
      post: "/management/clusters/watch"
      body: "*"
    };
  }
  rpc DeleteCluster(core.Reference) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/management/clusters/{id}"
    };
  }
  rpc CertsInfo(google.protobuf.Empty) returns (CertsInfoResponse) {
    option (google.api.http) = {
      get: "/management/certs"
    };
  }
  rpc GetCluster(core.Reference) returns (core.Cluster) {
    option (google.api.http) = {
      get: "/management/clusters/{id}"
    };
  }
  rpc GetClusterHealthStatus(core.Reference) returns (core.HealthStatus) {
    option (google.api.http) = {
      get: "/management/clusters/{id}/health"
    };
  }
  rpc EditCluster(EditClusterRequest) returns (core.Cluster) {
    option (google.api.http) = {
      put: "/management/clusters/{cluster.id}"
      body: "*"
    };
  }
  rpc CreateRole(core.Role) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/management/roles"
      body: "*"
    };
  }
  rpc DeleteRole(core.Reference) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/management/roles/{id}"
    };
  }
  rpc GetRole(core.Reference) returns (core.Role) {
    option (google.api.http) = {
      get: "/management/roles/{id}"
    };
  }
  rpc CreateRoleBinding(core.RoleBinding) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/management/rolebindings"
      body: "*"
    };
  }
  rpc DeleteRoleBinding(core.Reference) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/management/rolebindings/{id}"
    };
  }
  rpc GetRoleBinding(core.Reference) returns (core.RoleBinding) {
    option (google.api.http) = {
      get: "/management/rolebindings/{id}"
    };
  }
  rpc ListRoles(google.protobuf.Empty) returns (core.RoleList) {
    option (google.api.http) = {
      get: "/management/roles"
    };
  }
  rpc ListRoleBindings(google.protobuf.Empty) returns (core.RoleBindingList) {
    option (google.api.http) = {
      get: "/management/rolebindings"
    };
  }
  rpc SubjectAccess(core.SubjectAccessRequest) returns (core.ReferenceList) {
    option (google.api.http) = {
      get: "/management/subjectaccess"
    };
  }
  rpc APIExtensions(google.protobuf.Empty) returns (APIExtensionInfoList) {
    option (google.api.http) = {
      get: "/management/apiextensions"
    };
  }
  rpc GetConfig(google.protobuf.Empty) returns (GatewayConfig) {
    option (google.api.http) = {
      get: "/management/config"
    };
  }
  rpc UpdateConfig(UpdateConfigRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/management/config"
      body: "*"
    };
  }
  rpc ListCapabilities(google.protobuf.Empty) returns (CapabilityList) {
    option (google.api.http) = {
      get: "/management/capabilities"
    };
  }
  // Deprecated: For agent v2, use InstallCapability instead.
  rpc CapabilityInstaller(CapabilityInstallerRequest) returns (CapabilityInstallerResponse) {
    option deprecated = true;
    option (google.api.http) = {
      post: "/management/capabilities/{name}/installer"
      body: "*"
    };
  }
  rpc InstallCapability(CapabilityInstallRequest) returns (capability.InstallResponse) {
    option (google.api.http) = {
      post: "/management/clusters/{target.cluster.id}/capabilities/{name}/install"
      body: "*"
    };
  }
  rpc UninstallCapability(CapabilityUninstallRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/management/clusters/{target.cluster.id}/capabilities/{name}/uninstall"
    };
  }
  rpc CapabilityUninstallStatus(CapabilityStatusRequest) returns (core.TaskStatus) {
    option (google.api.http) = {
      get: "/management/clusters/{cluster.id}/capabilities/{name}/uninstall/status"
    };
  }
  rpc CancelCapabilityUninstall(CapabilityUninstallCancelRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/management/clusters/{cluster.id}/capabilities/{name}/uninstall/cancel"
    };
  }
}

message CreateBootstrapTokenRequest {
  google.protobuf.Duration ttl = 1;
  map<string, string> labels = 2;
  repeated core.TokenCapability capabilities = 3;
}

message CertsInfoResponse {
  repeated core.CertInfo chain = 1;
}

message ListClustersRequest {
  core.LabelSelector matchLabels = 1;
  core.MatchOptions matchOptions = 2;  
}

message EditClusterRequest {
  core.Reference cluster = 1;
  map<string, string> labels = 2;
}

message WatchClustersRequest {
  core.ReferenceList knownClusters = 1;
}

enum WatchEventType {
  Added = 0;
  Deleted = 2;
}

message WatchEvent {
  core.Reference cluster = 1;
  WatchEventType type = 2;
}

message APIExtensionInfoList {
  repeated APIExtensionInfo items = 1;
}

message APIExtensionInfo {
  google.protobuf.ServiceDescriptorProto serviceDesc = 1;
  repeated HTTPRuleDescriptor rules = 2;
}

message HTTPRuleDescriptor {
  google.api.HttpRule http = 1;
  google.protobuf.MethodDescriptorProto method = 2;
}

message GatewayConfig {
  repeated ConfigDocumentWithSchema documents = 1;
}

message ConfigDocumentWithSchema {
  bytes json = 1;
  bytes yaml = 2;
  bytes schema = 3;
}

message ConfigDocument {
  bytes json = 1;
}

message UpdateConfigRequest {
  repeated ConfigDocument documents = 1;
}

message CapabilityList {
  repeated string items = 1;
}

message CapabilityInstallerRequest {
  string name = 1;
  string token = 2;
  string pin = 3;
}

message CapabilityInstallRequest {
  string name = 1;
  capability.InstallRequest target = 2;
}

message CapabilityInstallerResponse {
  string command = 1;
}

message CapabilityUninstallRequest {
  string name = 1;
  capability.UninstallRequest target = 2;
}

message CapabilityStatusRequest {
  string name = 1;
  core.Reference cluster = 2;
}

message CapabilityUninstallCancelRequest {
  string name = 1;
  core.Reference cluster = 2;
}