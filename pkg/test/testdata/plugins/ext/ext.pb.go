// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v1.0.0
// source: github.com/rancher/opni/pkg/test/testdata/plugins/ext/ext.proto

package ext

import (
	validate "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/rancher/opni/internal/codegen/cli"
	v1 "github.com/rancher/opni/pkg/apis/core/v1"
	driverutil "github.com/rancher/opni/pkg/plugins/driverutil"
	_ "github.com/rancher/opni/pkg/validation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SampleEnum int32

const (
	SampleEnum_Unknown SampleEnum = 0
	SampleEnum_Foo     SampleEnum = 1
	SampleEnum_Bar     SampleEnum = 2
)

// Enum value maps for SampleEnum.
var (
	SampleEnum_name = map[int32]string{
		0: "Unknown",
		1: "Foo",
		2: "Bar",
	}
	SampleEnum_value = map[string]int32{
		"Unknown": 0,
		"Foo":     1,
		"Bar":     2,
	}
)

func (x SampleEnum) Enum() *SampleEnum {
	p := new(SampleEnum)
	*p = x
	return p
}

func (x SampleEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SampleEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_enumTypes[0].Descriptor()
}

func (SampleEnum) Type() protoreflect.EnumType {
	return &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_enumTypes[0]
}

func (x SampleEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SampleEnum.Descriptor instead.
func (SampleEnum) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{0}
}

type BazRequest_BazEnum int32

const (
	BazRequest_UNKNOWN BazRequest_BazEnum = 0
	BazRequest_FOO     BazRequest_BazEnum = 1
	BazRequest_BAR     BazRequest_BazEnum = 2
)

// Enum value maps for BazRequest_BazEnum.
var (
	BazRequest_BazEnum_name = map[int32]string{
		0: "UNKNOWN",
		1: "FOO",
		2: "BAR",
	}
	BazRequest_BazEnum_value = map[string]int32{
		"UNKNOWN": 0,
		"FOO":     1,
		"BAR":     2,
	}
)

func (x BazRequest_BazEnum) Enum() *BazRequest_BazEnum {
	p := new(BazRequest_BazEnum)
	*p = x
	return p
}

func (x BazRequest_BazEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BazRequest_BazEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_enumTypes[1].Descriptor()
}

func (BazRequest_BazEnum) Type() protoreflect.EnumType {
	return &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_enumTypes[1]
}

func (x BazRequest_BazEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BazRequest_BazEnum.Descriptor instead.
func (BazRequest_BazEnum) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{7, 0}
}

type Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Reference) Reset() {
	*x = Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{0}
}

func (x *Reference) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node    *Reference    `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Value   string        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Example *ExampleValue `protobuf:"bytes,3,opt,name=example,proto3" json:"example,omitempty"`
}

func (x *SetRequest) Reset() {
	*x = SetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRequest) ProtoMessage() {}

func (x *SetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRequest.ProtoReflect.Descriptor instead.
func (*SetRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{1}
}

func (x *SetRequest) GetNode() *Reference {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *SetRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SetRequest) GetExample() *ExampleValue {
	if x != nil {
		return x.Example
	}
	return nil
}

type ExampleValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ExampleValue) Reset() {
	*x = ExampleValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExampleValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExampleValue) ProtoMessage() {}

func (x *ExampleValue) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExampleValue.ProtoReflect.Descriptor instead.
func (*ExampleValue) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{2}
}

func (x *ExampleValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type FooRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request string `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *FooRequest) Reset() {
	*x = FooRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FooRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooRequest) ProtoMessage() {}

func (x *FooRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FooRequest.ProtoReflect.Descriptor instead.
func (*FooRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{3}
}

func (x *FooRequest) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

type FooResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *FooResponse) Reset() {
	*x = FooResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FooResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooResponse) ProtoMessage() {}

func (x *FooResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FooResponse.ProtoReflect.Descriptor instead.
func (*FooResponse) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{4}
}

func (x *FooResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type BarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param1 string `protobuf:"bytes,1,opt,name=param1,proto3" json:"param1,omitempty"`
	Param2 string `protobuf:"bytes,2,opt,name=param2,proto3" json:"param2,omitempty"`
	Param3 string `protobuf:"bytes,3,opt,name=param3,proto3" json:"param3,omitempty"`
}

func (x *BarRequest) Reset() {
	*x = BarRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarRequest) ProtoMessage() {}

func (x *BarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarRequest.ProtoReflect.Descriptor instead.
func (*BarRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{5}
}

func (x *BarRequest) GetParam1() string {
	if x != nil {
		return x.Param1
	}
	return ""
}

func (x *BarRequest) GetParam2() string {
	if x != nil {
		return x.Param2
	}
	return ""
}

func (x *BarRequest) GetParam3() string {
	if x != nil {
		return x.Param3
	}
	return ""
}

type BarResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param1 string `protobuf:"bytes,1,opt,name=param1,proto3" json:"param1,omitempty"`
	Param2 string `protobuf:"bytes,2,opt,name=param2,proto3" json:"param2,omitempty"`
	Param3 string `protobuf:"bytes,3,opt,name=param3,proto3" json:"param3,omitempty"`
}

func (x *BarResponse) Reset() {
	*x = BarResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarResponse) ProtoMessage() {}

func (x *BarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarResponse.ProtoReflect.Descriptor instead.
func (*BarResponse) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{6}
}

func (x *BarResponse) GetParam1() string {
	if x != nil {
		return x.Param1
	}
	return ""
}

func (x *BarResponse) GetParam2() string {
	if x != nil {
		return x.Param2
	}
	return ""
}

func (x *BarResponse) GetParam3() string {
	if x != nil {
		return x.Param3
	}
	return ""
}

type BazRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParamFloat64        float64              `protobuf:"fixed64,1,opt,name=paramFloat64,proto3" json:"paramFloat64,omitempty"`
	ParamInt64          int64                `protobuf:"varint,3,opt,name=paramInt64,proto3" json:"paramInt64,omitempty"`
	ParamBool           bool                 `protobuf:"varint,8,opt,name=paramBool,proto3" json:"paramBool,omitempty"`
	ParamString         string               `protobuf:"bytes,9,opt,name=paramString,proto3" json:"paramString,omitempty"`
	ParamBytes          []byte               `protobuf:"bytes,10,opt,name=paramBytes,proto3" json:"paramBytes,omitempty"`
	ParamEnum           BazRequest_BazEnum   `protobuf:"varint,11,opt,name=paramEnum,proto3,enum=ext.BazRequest_BazEnum" json:"paramEnum,omitempty"`
	ParamDuration       *durationpb.Duration `protobuf:"bytes,12,opt,name=paramDuration,proto3" json:"paramDuration,omitempty"`
	ParamRepeatedString []string             `protobuf:"bytes,13,rep,name=paramRepeatedString,proto3" json:"paramRepeatedString,omitempty"`
	ParamMsg            *BazRequest          `protobuf:"bytes,14,opt,name=paramMsg,proto3" json:"paramMsg,omitempty"`
}

func (x *BazRequest) Reset() {
	*x = BazRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BazRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BazRequest) ProtoMessage() {}

func (x *BazRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BazRequest.ProtoReflect.Descriptor instead.
func (*BazRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{7}
}

func (x *BazRequest) GetParamFloat64() float64 {
	if x != nil {
		return x.ParamFloat64
	}
	return 0
}

func (x *BazRequest) GetParamInt64() int64 {
	if x != nil {
		return x.ParamInt64
	}
	return 0
}

func (x *BazRequest) GetParamBool() bool {
	if x != nil {
		return x.ParamBool
	}
	return false
}

func (x *BazRequest) GetParamString() string {
	if x != nil {
		return x.ParamString
	}
	return ""
}

func (x *BazRequest) GetParamBytes() []byte {
	if x != nil {
		return x.ParamBytes
	}
	return nil
}

func (x *BazRequest) GetParamEnum() BazRequest_BazEnum {
	if x != nil {
		return x.ParamEnum
	}
	return BazRequest_UNKNOWN
}

func (x *BazRequest) GetParamDuration() *durationpb.Duration {
	if x != nil {
		return x.ParamDuration
	}
	return nil
}

func (x *BazRequest) GetParamRepeatedString() []string {
	if x != nil {
		return x.ParamRepeatedString
	}
	return nil
}

func (x *BazRequest) GetParamMsg() *BazRequest {
	if x != nil {
		return x.ParamMsg
	}
	return nil
}

type SampleConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled       *bool             `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Revision      *v1.Revision      `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	StringField   *string           `protobuf:"bytes,3,opt,name=stringField,proto3,oneof" json:"stringField,omitempty"`
	SecretField   *string           `protobuf:"bytes,4,opt,name=secretField,proto3,oneof" json:"secretField,omitempty"`
	MapField      map[string]string `protobuf:"bytes,5,rep,name=mapField,proto3" json:"mapField,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RepeatedField []string          `protobuf:"bytes,6,rep,name=repeatedField,proto3" json:"repeatedField,omitempty"`
	EnumField     *SampleEnum       `protobuf:"varint,7,opt,name=enumField,proto3,enum=ext.SampleEnum,oneof" json:"enumField,omitempty"`
	MessageField  *SampleMessage    `protobuf:"bytes,8,opt,name=messageField,proto3" json:"messageField,omitempty"`
}

func (x *SampleConfiguration) Reset() {
	*x = SampleConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleConfiguration) ProtoMessage() {}

func (x *SampleConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleConfiguration.ProtoReflect.Descriptor instead.
func (*SampleConfiguration) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{8}
}

func (x *SampleConfiguration) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *SampleConfiguration) GetRevision() *v1.Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *SampleConfiguration) GetStringField() string {
	if x != nil && x.StringField != nil {
		return *x.StringField
	}
	return ""
}

func (x *SampleConfiguration) GetSecretField() string {
	if x != nil && x.SecretField != nil {
		return *x.SecretField
	}
	return ""
}

func (x *SampleConfiguration) GetMapField() map[string]string {
	if x != nil {
		return x.MapField
	}
	return nil
}

func (x *SampleConfiguration) GetRepeatedField() []string {
	if x != nil {
		return x.RepeatedField
	}
	return nil
}

func (x *SampleConfiguration) GetEnumField() SampleEnum {
	if x != nil && x.EnumField != nil {
		return *x.EnumField
	}
	return SampleEnum_Unknown
}

func (x *SampleConfiguration) GetMessageField() *SampleMessage {
	if x != nil {
		return x.MessageField
	}
	return nil
}

type SampleGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      *string      `protobuf:"bytes,10,opt,name=key,proto3,oneof" json:"key,omitempty"` // for context key tests
	Revision *v1.Revision `protobuf:"bytes,1,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *SampleGetRequest) Reset() {
	*x = SampleGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleGetRequest) ProtoMessage() {}

func (x *SampleGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleGetRequest.ProtoReflect.Descriptor instead.
func (*SampleGetRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{9}
}

func (x *SampleGetRequest) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *SampleGetRequest) GetRevision() *v1.Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

type SampleSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  *string              `protobuf:"bytes,10,opt,name=key,proto3,oneof" json:"key,omitempty"` // for context key tests
	Spec *SampleConfiguration `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *SampleSetRequest) Reset() {
	*x = SampleSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleSetRequest) ProtoMessage() {}

func (x *SampleSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleSetRequest.ProtoReflect.Descriptor instead.
func (*SampleSetRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{10}
}

func (x *SampleSetRequest) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *SampleSetRequest) GetSpec() *SampleConfiguration {
	if x != nil {
		return x.Spec
	}
	return nil
}

type SampleDryRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      *string                `protobuf:"bytes,10,opt,name=key,proto3,oneof" json:"key,omitempty"` // for context key tests
	Target   driverutil.Target      `protobuf:"varint,1,opt,name=target,proto3,enum=driverutil.Target" json:"target,omitempty"`
	Action   driverutil.Action      `protobuf:"varint,2,opt,name=action,proto3,enum=driverutil.Action" json:"action,omitempty"`
	Spec     *SampleConfiguration   `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`         // Set
	Revision *v1.Revision           `protobuf:"bytes,4,opt,name=revision,proto3" json:"revision,omitempty"` // Reset
	Mask     *fieldmaskpb.FieldMask `protobuf:"bytes,5,opt,name=mask,proto3" json:"mask,omitempty"`         // Reset
	Patch    *SampleConfiguration   `protobuf:"bytes,6,opt,name=patch,proto3" json:"patch,omitempty"`       // Reset
}

func (x *SampleDryRunRequest) Reset() {
	*x = SampleDryRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleDryRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleDryRunRequest) ProtoMessage() {}

func (x *SampleDryRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleDryRunRequest.ProtoReflect.Descriptor instead.
func (*SampleDryRunRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{11}
}

func (x *SampleDryRunRequest) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *SampleDryRunRequest) GetTarget() driverutil.Target {
	if x != nil {
		return x.Target
	}
	return driverutil.Target(0)
}

func (x *SampleDryRunRequest) GetAction() driverutil.Action {
	if x != nil {
		return x.Action
	}
	return driverutil.Action(0)
}

func (x *SampleDryRunRequest) GetSpec() *SampleConfiguration {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *SampleDryRunRequest) GetRevision() *v1.Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *SampleDryRunRequest) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

func (x *SampleDryRunRequest) GetPatch() *SampleConfiguration {
	if x != nil {
		return x.Patch
	}
	return nil
}

type SampleDryRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current          *SampleConfiguration `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Modified         *SampleConfiguration `protobuf:"bytes,2,opt,name=modified,proto3" json:"modified,omitempty"`
	ValidationErrors *validate.Violations `protobuf:"bytes,3,opt,name=validationErrors,proto3" json:"validationErrors,omitempty"`
}

func (x *SampleDryRunResponse) Reset() {
	*x = SampleDryRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleDryRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleDryRunResponse) ProtoMessage() {}

func (x *SampleDryRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleDryRunResponse.ProtoReflect.Descriptor instead.
func (*SampleDryRunResponse) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{12}
}

func (x *SampleDryRunResponse) GetCurrent() *SampleConfiguration {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *SampleDryRunResponse) GetModified() *SampleConfiguration {
	if x != nil {
		return x.Modified
	}
	return nil
}

func (x *SampleDryRunResponse) GetValidationErrors() *validate.Violations {
	if x != nil {
		return x.ValidationErrors
	}
	return nil
}

type SampleHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           *string           `protobuf:"bytes,10,opt,name=key,proto3,oneof" json:"key,omitempty"` // for context key tests
	Target        driverutil.Target `protobuf:"varint,1,opt,name=target,proto3,enum=driverutil.Target" json:"target,omitempty"`
	Revision      *v1.Revision      `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	IncludeValues bool              `protobuf:"varint,3,opt,name=includeValues,proto3" json:"includeValues,omitempty"`
}

func (x *SampleHistoryRequest) Reset() {
	*x = SampleHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleHistoryRequest) ProtoMessage() {}

func (x *SampleHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleHistoryRequest.ProtoReflect.Descriptor instead.
func (*SampleHistoryRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{13}
}

func (x *SampleHistoryRequest) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *SampleHistoryRequest) GetTarget() driverutil.Target {
	if x != nil {
		return x.Target
	}
	return driverutil.Target(0)
}

func (x *SampleHistoryRequest) GetRevision() *v1.Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *SampleHistoryRequest) GetIncludeValues() bool {
	if x != nil {
		return x.IncludeValues
	}
	return false
}

type SampleConfigurationHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*SampleConfiguration `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *SampleConfigurationHistoryResponse) Reset() {
	*x = SampleConfigurationHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleConfigurationHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleConfigurationHistoryResponse) ProtoMessage() {}

func (x *SampleConfigurationHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleConfigurationHistoryResponse.ProtoReflect.Descriptor instead.
func (*SampleConfigurationHistoryResponse) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{14}
}

func (x *SampleConfigurationHistoryResponse) GetEntries() []*SampleConfiguration {
	if x != nil {
		return x.Entries
	}
	return nil
}

type SampleResetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      *string                `protobuf:"bytes,10,opt,name=key,proto3,oneof" json:"key,omitempty"` // for context key tests
	Revision *v1.Revision           `protobuf:"bytes,1,opt,name=revision,proto3" json:"revision,omitempty"`
	Mask     *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	Patch    *SampleConfiguration   `protobuf:"bytes,3,opt,name=patch,proto3" json:"patch,omitempty"`
}

func (x *SampleResetRequest) Reset() {
	*x = SampleResetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleResetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleResetRequest) ProtoMessage() {}

func (x *SampleResetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleResetRequest.ProtoReflect.Descriptor instead.
func (*SampleResetRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{15}
}

func (x *SampleResetRequest) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *SampleResetRequest) GetRevision() *v1.Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *SampleResetRequest) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

func (x *SampleResetRequest) GetPatch() *SampleConfiguration {
	if x != nil {
		return x.Patch
	}
	return nil
}

type SampleMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field1 *Sample1FieldMsg `protobuf:"bytes,1,opt,name=field1,proto3" json:"field1,omitempty"`
	Field2 *Sample2FieldMsg `protobuf:"bytes,2,opt,name=field2,proto3" json:"field2,omitempty"`
	Field3 *Sample3FieldMsg `protobuf:"bytes,3,opt,name=field3,proto3" json:"field3,omitempty"`
	Field4 *Sample4FieldMsg `protobuf:"bytes,4,opt,name=field4,proto3" json:"field4,omitempty"`
	Field5 *Sample5FieldMsg `protobuf:"bytes,5,opt,name=field5,proto3" json:"field5,omitempty"`
	Field6 *Sample6FieldMsg `protobuf:"bytes,6,opt,name=field6,proto3" json:"field6,omitempty"`
	Msg    *SampleMessage2  `protobuf:"bytes,7,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SampleMessage) Reset() {
	*x = SampleMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleMessage) ProtoMessage() {}

func (x *SampleMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleMessage.ProtoReflect.Descriptor instead.
func (*SampleMessage) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{16}
}

func (x *SampleMessage) GetField1() *Sample1FieldMsg {
	if x != nil {
		return x.Field1
	}
	return nil
}

func (x *SampleMessage) GetField2() *Sample2FieldMsg {
	if x != nil {
		return x.Field2
	}
	return nil
}

func (x *SampleMessage) GetField3() *Sample3FieldMsg {
	if x != nil {
		return x.Field3
	}
	return nil
}

func (x *SampleMessage) GetField4() *Sample4FieldMsg {
	if x != nil {
		return x.Field4
	}
	return nil
}

func (x *SampleMessage) GetField5() *Sample5FieldMsg {
	if x != nil {
		return x.Field5
	}
	return nil
}

func (x *SampleMessage) GetField6() *Sample6FieldMsg {
	if x != nil {
		return x.Field6
	}
	return nil
}

func (x *SampleMessage) GetMsg() *SampleMessage2 {
	if x != nil {
		return x.Msg
	}
	return nil
}

type SampleMessage2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field1 *Sample1FieldMsg `protobuf:"bytes,1,opt,name=field1,proto3" json:"field1,omitempty"`
	Field2 *Sample2FieldMsg `protobuf:"bytes,2,opt,name=field2,proto3" json:"field2,omitempty"`
	Field3 *Sample3FieldMsg `protobuf:"bytes,3,opt,name=field3,proto3" json:"field3,omitempty"`
	Field4 *Sample4FieldMsg `protobuf:"bytes,4,opt,name=field4,proto3" json:"field4,omitempty"`
	Field5 *Sample5FieldMsg `protobuf:"bytes,5,opt,name=field5,proto3" json:"field5,omitempty"`
	Field6 *Sample6FieldMsg `protobuf:"bytes,6,opt,name=field6,proto3" json:"field6,omitempty"`
}

func (x *SampleMessage2) Reset() {
	*x = SampleMessage2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleMessage2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleMessage2) ProtoMessage() {}

func (x *SampleMessage2) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleMessage2.ProtoReflect.Descriptor instead.
func (*SampleMessage2) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{17}
}

func (x *SampleMessage2) GetField1() *Sample1FieldMsg {
	if x != nil {
		return x.Field1
	}
	return nil
}

func (x *SampleMessage2) GetField2() *Sample2FieldMsg {
	if x != nil {
		return x.Field2
	}
	return nil
}

func (x *SampleMessage2) GetField3() *Sample3FieldMsg {
	if x != nil {
		return x.Field3
	}
	return nil
}

func (x *SampleMessage2) GetField4() *Sample4FieldMsg {
	if x != nil {
		return x.Field4
	}
	return nil
}

func (x *SampleMessage2) GetField5() *Sample5FieldMsg {
	if x != nil {
		return x.Field5
	}
	return nil
}

func (x *SampleMessage2) GetField6() *Sample6FieldMsg {
	if x != nil {
		return x.Field6
	}
	return nil
}

type Sample1FieldMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field1 int32 `protobuf:"varint,1,opt,name=field1,proto3" json:"field1,omitempty"`
}

func (x *Sample1FieldMsg) Reset() {
	*x = Sample1FieldMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample1FieldMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample1FieldMsg) ProtoMessage() {}

func (x *Sample1FieldMsg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample1FieldMsg.ProtoReflect.Descriptor instead.
func (*Sample1FieldMsg) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{18}
}

func (x *Sample1FieldMsg) GetField1() int32 {
	if x != nil {
		return x.Field1
	}
	return 0
}

type Sample2FieldMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field1 int32 `protobuf:"varint,1,opt,name=field1,proto3" json:"field1,omitempty"`
	Field2 int32 `protobuf:"varint,2,opt,name=field2,proto3" json:"field2,omitempty"`
}

func (x *Sample2FieldMsg) Reset() {
	*x = Sample2FieldMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample2FieldMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample2FieldMsg) ProtoMessage() {}

func (x *Sample2FieldMsg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample2FieldMsg.ProtoReflect.Descriptor instead.
func (*Sample2FieldMsg) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{19}
}

func (x *Sample2FieldMsg) GetField1() int32 {
	if x != nil {
		return x.Field1
	}
	return 0
}

func (x *Sample2FieldMsg) GetField2() int32 {
	if x != nil {
		return x.Field2
	}
	return 0
}

type Sample3FieldMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field1 int32 `protobuf:"varint,1,opt,name=field1,proto3" json:"field1,omitempty"`
	Field2 int32 `protobuf:"varint,2,opt,name=field2,proto3" json:"field2,omitempty"`
	Field3 int32 `protobuf:"varint,3,opt,name=field3,proto3" json:"field3,omitempty"`
}

func (x *Sample3FieldMsg) Reset() {
	*x = Sample3FieldMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample3FieldMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample3FieldMsg) ProtoMessage() {}

func (x *Sample3FieldMsg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample3FieldMsg.ProtoReflect.Descriptor instead.
func (*Sample3FieldMsg) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{20}
}

func (x *Sample3FieldMsg) GetField1() int32 {
	if x != nil {
		return x.Field1
	}
	return 0
}

func (x *Sample3FieldMsg) GetField2() int32 {
	if x != nil {
		return x.Field2
	}
	return 0
}

func (x *Sample3FieldMsg) GetField3() int32 {
	if x != nil {
		return x.Field3
	}
	return 0
}

type Sample4FieldMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field1 int32 `protobuf:"varint,1,opt,name=field1,proto3" json:"field1,omitempty"`
	Field2 int32 `protobuf:"varint,2,opt,name=field2,proto3" json:"field2,omitempty"`
	Field3 int32 `protobuf:"varint,3,opt,name=field3,proto3" json:"field3,omitempty"`
	Field4 int32 `protobuf:"varint,4,opt,name=field4,proto3" json:"field4,omitempty"`
}

func (x *Sample4FieldMsg) Reset() {
	*x = Sample4FieldMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample4FieldMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample4FieldMsg) ProtoMessage() {}

func (x *Sample4FieldMsg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample4FieldMsg.ProtoReflect.Descriptor instead.
func (*Sample4FieldMsg) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{21}
}

func (x *Sample4FieldMsg) GetField1() int32 {
	if x != nil {
		return x.Field1
	}
	return 0
}

func (x *Sample4FieldMsg) GetField2() int32 {
	if x != nil {
		return x.Field2
	}
	return 0
}

func (x *Sample4FieldMsg) GetField3() int32 {
	if x != nil {
		return x.Field3
	}
	return 0
}

func (x *Sample4FieldMsg) GetField4() int32 {
	if x != nil {
		return x.Field4
	}
	return 0
}

type Sample5FieldMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field1 int32 `protobuf:"varint,1,opt,name=field1,proto3" json:"field1,omitempty"`
	Field2 int32 `protobuf:"varint,2,opt,name=field2,proto3" json:"field2,omitempty"`
	Field3 int32 `protobuf:"varint,3,opt,name=field3,proto3" json:"field3,omitempty"`
	Field4 int32 `protobuf:"varint,4,opt,name=field4,proto3" json:"field4,omitempty"`
	Field5 int32 `protobuf:"varint,5,opt,name=field5,proto3" json:"field5,omitempty"`
}

func (x *Sample5FieldMsg) Reset() {
	*x = Sample5FieldMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample5FieldMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample5FieldMsg) ProtoMessage() {}

func (x *Sample5FieldMsg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample5FieldMsg.ProtoReflect.Descriptor instead.
func (*Sample5FieldMsg) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{22}
}

func (x *Sample5FieldMsg) GetField1() int32 {
	if x != nil {
		return x.Field1
	}
	return 0
}

func (x *Sample5FieldMsg) GetField2() int32 {
	if x != nil {
		return x.Field2
	}
	return 0
}

func (x *Sample5FieldMsg) GetField3() int32 {
	if x != nil {
		return x.Field3
	}
	return 0
}

func (x *Sample5FieldMsg) GetField4() int32 {
	if x != nil {
		return x.Field4
	}
	return 0
}

func (x *Sample5FieldMsg) GetField5() int32 {
	if x != nil {
		return x.Field5
	}
	return 0
}

type Sample6FieldMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field1 int32 `protobuf:"varint,1,opt,name=field1,proto3" json:"field1,omitempty"`
	Field2 int32 `protobuf:"varint,2,opt,name=field2,proto3" json:"field2,omitempty"`
	Field3 int32 `protobuf:"varint,3,opt,name=field3,proto3" json:"field3,omitempty"`
	Field4 int32 `protobuf:"varint,4,opt,name=field4,proto3" json:"field4,omitempty"`
	Field5 int32 `protobuf:"varint,5,opt,name=field5,proto3" json:"field5,omitempty"`
	Field6 int32 `protobuf:"varint,6,opt,name=field6,proto3" json:"field6,omitempty"`
}

func (x *Sample6FieldMsg) Reset() {
	*x = Sample6FieldMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample6FieldMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample6FieldMsg) ProtoMessage() {}

func (x *Sample6FieldMsg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample6FieldMsg.ProtoReflect.Descriptor instead.
func (*Sample6FieldMsg) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP(), []int{23}
}

func (x *Sample6FieldMsg) GetField1() int32 {
	if x != nil {
		return x.Field1
	}
	return 0
}

func (x *Sample6FieldMsg) GetField2() int32 {
	if x != nil {
		return x.Field2
	}
	return 0
}

func (x *Sample6FieldMsg) GetField3() int32 {
	if x != nil {
		return x.Field3
	}
	return 0
}

func (x *Sample6FieldMsg) GetField4() int32 {
	if x != nil {
		return x.Field4
	}
	return 0
}

func (x *Sample6FieldMsg) GetField5() int32 {
	if x != nil {
		return x.Field5
	}
	return 0
}

func (x *Sample6FieldMsg) GetField6() int32 {
	if x != nil {
		return x.Field6
	}
	return 0
}

var File_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto protoreflect.FileDescriptor

var file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDesc = []byte{
	0x0a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x2f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x65, 0x78, 0x74, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e,
	0x2f, 0x63, 0x6c, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x75,
	0x74, 0x69, 0x6c, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x1b, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x73, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65,
	0x78, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x78, 0x74, 0x2e,
	0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x24, 0x0a, 0x0c, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x0a, 0x46,
	0x6f, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x29, 0x0a, 0x0b, 0x46, 0x6f, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54,
	0x0a, 0x0a, 0x42, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x33, 0x22, 0x55, 0x0a, 0x0b, 0x42, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x22, 0xb1, 0x03, 0x0a, 0x0a,
	0x42, 0x61, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x35,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x45, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x42, 0x61, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x42, 0x61, 0x7a, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x4d, 0x73, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x78, 0x74,
	0x2e, 0x42, 0x61, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x4d, 0x73, 0x67, 0x22, 0x28, 0x0a, 0x07, 0x42, 0x61, 0x7a, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x46, 0x4f, 0x4f, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x41, 0x52, 0x10, 0x02, 0x22,
	0x8b, 0x04, 0x0a, 0x13, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0x8a, 0xc0, 0x0c, 0x02, 0x28, 0x01,
	0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x8a, 0xc0, 0x0c, 0x02, 0x18, 0x01, 0x48, 0x02,
	0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x42, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x65, 0x6e,
	0x75, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x65, 0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x03,
	0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x36,
	0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x65, 0x0a,
	0x10, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x92, 0xc0, 0x0c, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x6b, 0x65, 0x79, 0x22, 0x5f, 0x0a, 0x10, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x65, 0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0xd6, 0x02, 0x0a, 0x13, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x2a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x74,
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x42, 0x06, 0x8a, 0xc0, 0x0c, 0x02, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x36,
	0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x65, 0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x8a, 0xc0, 0x0c, 0x02, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0xde,
	0x01, 0x0a, 0x14, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x06, 0x8a, 0xc0, 0x0c, 0x02, 0x28, 0x01, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x06, 0x8a, 0xc0, 0x0c, 0x02, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x4c, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x75,
	0x66, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x69, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x06, 0x8a, 0xc0, 0x0c, 0x02, 0x28, 0x01, 0x52, 0x10, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22,
	0xc7, 0x01, 0x0a, 0x14, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x92,
	0xc0, 0x0c, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x8a, 0xc0, 0x0c, 0x06, 0x0a, 0x04, 0x74, 0x72,
	0x75, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x58, 0x0a, 0x22, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x12, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x06, 0x92, 0xc0, 0x0c, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42,
	0x06, 0x8a, 0xc0, 0x0c, 0x02, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x36, 0x0a,
	0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65,
	0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x8a, 0xc0, 0x0c, 0x02, 0x28, 0x01, 0x52, 0x05,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0xca, 0x02,
	0x0a, 0x0d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x31, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x12, 0x2c, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x65, 0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x32, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x73, 0x67, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x12, 0x2c, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78,
	0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x33, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73,
	0x67, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x74, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x34, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x34, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x35, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x35, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x36, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x36, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x36, 0x12, 0x25, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xa4, 0x02, 0x0a, 0x0e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0x2c, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x65, 0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x31, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x73, 0x67, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x12, 0x2c, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78,
	0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x32, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73,
	0x67, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x74, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x33, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x34, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x34, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x35, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x35, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x35, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x36, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x36, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x36, 0x22, 0x29, 0x0a, 0x0f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x31, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x22, 0x41, 0x0a, 0x0f,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x32, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x22,
	0x59, 0x0a, 0x0f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x33, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x22, 0x71, 0x0a, 0x0f, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x34, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x34, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x34, 0x22, 0x89, 0x01,
	0x0a, 0x0f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x35, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x32, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x34, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x35, 0x22, 0xa1, 0x01, 0x0a, 0x0f, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x36, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x34, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x34, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x35, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x36, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x36, 0x2a, 0x2b, 0x0a,
	0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x6f, 0x6f, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x61, 0x72, 0x10, 0x02, 0x32, 0xc2, 0x05, 0x0a, 0x03, 0x45,
	0x78, 0x74, 0x12, 0x71, 0x0a, 0x03, 0x46, 0x6f, 0x6f, 0x12, 0x0f, 0x2e, 0x65, 0x78, 0x74, 0x2e,
	0x46, 0x6f, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x65, 0x78, 0x74,
	0x2e, 0x46, 0x6f, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x41, 0x3a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5a, 0x06, 0x12,
	0x04, 0x2f, 0x66, 0x6f, 0x6f, 0x5a, 0x0f, 0x3a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x04, 0x2f, 0x66, 0x6f, 0x6f, 0x5a, 0x06, 0x2a, 0x04, 0x2f, 0x66, 0x6f, 0x6f, 0x5a, 0x0f,
	0x3a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x04, 0x2f, 0x66, 0x6f, 0x6f, 0x22,
	0x04, 0x2f, 0x66, 0x6f, 0x6f, 0x12, 0x73, 0x0a, 0x03, 0x42, 0x61, 0x72, 0x12, 0x0f, 0x2e, 0x65,
	0x78, 0x74, 0x2e, 0x42, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x65, 0x78, 0x74, 0x2e, 0x42, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x5a,
	0x21, 0x12, 0x1f, 0x2f, 0x62, 0x61, 0x72, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x7d,
	0x2f, 0x7b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x7d, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x33, 0x7d, 0x22, 0x16, 0x2f, 0x62, 0x61, 0x72, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31,
	0x7d, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x7d, 0x12, 0xc3, 0x01, 0x0a, 0x03, 0x42,
	0x61, 0x7a, 0x12, 0x0f, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x42, 0x61, 0x7a, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x42, 0x61, 0x7a, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x99, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x92, 0x01, 0x3a, 0x01,
	0x2a, 0x5a, 0x4a, 0x3a, 0x01, 0x2a, 0x22, 0x45, 0x2f, 0x62, 0x61, 0x7a, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x6f, 0x6f, 0x6c,
	0x7d, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x7d, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4d,
	0x73, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x45, 0x6e, 0x75, 0x6d, 0x7d, 0x5a, 0x3b, 0x3a,
	0x01, 0x2a, 0x22, 0x36, 0x2f, 0x62, 0x61, 0x7a, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4d,
	0x73, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x7d, 0x22, 0x04, 0x2f, 0x62, 0x61, 0x7a,
	0x12, 0x65, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x0f, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x36, 0x3a, 0x01, 0x2a, 0x5a, 0x21, 0x3a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x1a,
	0x16, 0x2f, 0x73, 0x65, 0x74, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x7b, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x69, 0x64, 0x7d, 0x1a, 0x0e, 0x2f, 0x73, 0x65, 0x74, 0x2f, 0x7b, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x69, 0x64, 0x7d, 0x12, 0x33, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x0f, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x46, 0x6f,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x46,
	0x6f, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x33, 0x0a, 0x0c,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x0f, 0x2e, 0x65,
	0x78, 0x74, 0x2e, 0x46, 0x6f, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x65, 0x78, 0x74, 0x2e, 0x46, 0x6f, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28,
	0x01, 0x12, 0x3c, 0x0a, 0x13, 0x42, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x0f, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x46,
	0x6f, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x65, 0x78, 0x74, 0x2e,
	0x46, 0x6f, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x32,
	0xe6, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5f, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x65,
	0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x13, 0x82, 0xc0, 0x0c, 0x0f, 0x8a, 0xc0, 0x0c, 0x0b,
	0x67, 0x65, 0x74, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x61, 0x0a, 0x17, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x17, 0x82, 0xc0, 0x0c, 0x13, 0x8a, 0xc0, 0x0c, 0x0b, 0x73,
	0x65, 0x74, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0xb0, 0xc0, 0x0c, 0x01, 0x12, 0x50,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x65, 0x78, 0x74, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x0b, 0x82, 0xc0, 0x0c, 0x07, 0x8a, 0xc0, 0x0c, 0x03, 0x67, 0x65, 0x74,
	0x12, 0x52, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x0f, 0x82, 0xc0, 0x0c, 0x0b, 0x8a, 0xc0, 0x0c, 0x03, 0x73, 0x65, 0x74,
	0xb0, 0xc0, 0x0c, 0x01, 0x12, 0x62, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x65, 0x74, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x15, 0x82, 0xc0, 0x0c, 0x11, 0x8a, 0xc0, 0x0c, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x58, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x2e, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x11, 0x82, 0xc0, 0x0c, 0x0d, 0x8a, 0xc0, 0x0c, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0xb0, 0xc0,
	0x0c, 0x01, 0x12, 0x47, 0x0a, 0x06, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x18, 0x2e, 0x65,
	0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x08, 0x82, 0xc0, 0x0c, 0x04, 0xa0, 0xc0, 0x0c, 0x01, 0x12, 0x6b, 0x0a, 0x14, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x19, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0f, 0x82, 0xc0, 0x0c, 0x0b, 0x8a, 0xc0, 0x0c,
	0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x32, 0x30, 0x0a, 0x04, 0x45, 0x78, 0x74, 0x32,
	0x12, 0x28, 0x0a, 0x03, 0x46, 0x6f, 0x6f, 0x12, 0x0f, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x46, 0x6f,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x46,
	0x6f, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3f, 0x82, 0xc0, 0x0c, 0x04,
	0x08, 0x01, 0x18, 0x01, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescOnce sync.Once
	file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescData = file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDesc
)

func file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescGZIP() []byte {
	file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescOnce.Do(func() {
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescData)
	})
	return file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDescData
}

var file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_goTypes = []interface{}{
	(SampleEnum)(0),                            // 0: ext.SampleEnum
	(BazRequest_BazEnum)(0),                    // 1: ext.BazRequest.BazEnum
	(*Reference)(nil),                          // 2: ext.Reference
	(*SetRequest)(nil),                         // 3: ext.SetRequest
	(*ExampleValue)(nil),                       // 4: ext.ExampleValue
	(*FooRequest)(nil),                         // 5: ext.FooRequest
	(*FooResponse)(nil),                        // 6: ext.FooResponse
	(*BarRequest)(nil),                         // 7: ext.BarRequest
	(*BarResponse)(nil),                        // 8: ext.BarResponse
	(*BazRequest)(nil),                         // 9: ext.BazRequest
	(*SampleConfiguration)(nil),                // 10: ext.SampleConfiguration
	(*SampleGetRequest)(nil),                   // 11: ext.SampleGetRequest
	(*SampleSetRequest)(nil),                   // 12: ext.SampleSetRequest
	(*SampleDryRunRequest)(nil),                // 13: ext.SampleDryRunRequest
	(*SampleDryRunResponse)(nil),               // 14: ext.SampleDryRunResponse
	(*SampleHistoryRequest)(nil),               // 15: ext.SampleHistoryRequest
	(*SampleConfigurationHistoryResponse)(nil), // 16: ext.SampleConfigurationHistoryResponse
	(*SampleResetRequest)(nil),                 // 17: ext.SampleResetRequest
	(*SampleMessage)(nil),                      // 18: ext.SampleMessage
	(*SampleMessage2)(nil),                     // 19: ext.SampleMessage2
	(*Sample1FieldMsg)(nil),                    // 20: ext.Sample1FieldMsg
	(*Sample2FieldMsg)(nil),                    // 21: ext.Sample2FieldMsg
	(*Sample3FieldMsg)(nil),                    // 22: ext.Sample3FieldMsg
	(*Sample4FieldMsg)(nil),                    // 23: ext.Sample4FieldMsg
	(*Sample5FieldMsg)(nil),                    // 24: ext.Sample5FieldMsg
	(*Sample6FieldMsg)(nil),                    // 25: ext.Sample6FieldMsg
	nil,                                        // 26: ext.SampleConfiguration.MapFieldEntry
	(*durationpb.Duration)(nil),                // 27: google.protobuf.Duration
	(*v1.Revision)(nil),                        // 28: core.Revision
	(driverutil.Target)(0),                     // 29: driverutil.Target
	(driverutil.Action)(0),                     // 30: driverutil.Action
	(*fieldmaskpb.FieldMask)(nil),              // 31: google.protobuf.FieldMask
	(*validate.Violations)(nil),                // 32: buf.validate.Violations
	(*emptypb.Empty)(nil),                      // 33: google.protobuf.Empty
}
var file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_depIdxs = []int32{
	2,  // 0: ext.SetRequest.node:type_name -> ext.Reference
	4,  // 1: ext.SetRequest.example:type_name -> ext.ExampleValue
	1,  // 2: ext.BazRequest.paramEnum:type_name -> ext.BazRequest.BazEnum
	27, // 3: ext.BazRequest.paramDuration:type_name -> google.protobuf.Duration
	9,  // 4: ext.BazRequest.paramMsg:type_name -> ext.BazRequest
	28, // 5: ext.SampleConfiguration.revision:type_name -> core.Revision
	26, // 6: ext.SampleConfiguration.mapField:type_name -> ext.SampleConfiguration.MapFieldEntry
	0,  // 7: ext.SampleConfiguration.enumField:type_name -> ext.SampleEnum
	18, // 8: ext.SampleConfiguration.messageField:type_name -> ext.SampleMessage
	28, // 9: ext.SampleGetRequest.revision:type_name -> core.Revision
	10, // 10: ext.SampleSetRequest.spec:type_name -> ext.SampleConfiguration
	29, // 11: ext.SampleDryRunRequest.target:type_name -> driverutil.Target
	30, // 12: ext.SampleDryRunRequest.action:type_name -> driverutil.Action
	10, // 13: ext.SampleDryRunRequest.spec:type_name -> ext.SampleConfiguration
	28, // 14: ext.SampleDryRunRequest.revision:type_name -> core.Revision
	31, // 15: ext.SampleDryRunRequest.mask:type_name -> google.protobuf.FieldMask
	10, // 16: ext.SampleDryRunRequest.patch:type_name -> ext.SampleConfiguration
	10, // 17: ext.SampleDryRunResponse.current:type_name -> ext.SampleConfiguration
	10, // 18: ext.SampleDryRunResponse.modified:type_name -> ext.SampleConfiguration
	32, // 19: ext.SampleDryRunResponse.validationErrors:type_name -> buf.validate.Violations
	29, // 20: ext.SampleHistoryRequest.target:type_name -> driverutil.Target
	28, // 21: ext.SampleHistoryRequest.revision:type_name -> core.Revision
	10, // 22: ext.SampleConfigurationHistoryResponse.entries:type_name -> ext.SampleConfiguration
	28, // 23: ext.SampleResetRequest.revision:type_name -> core.Revision
	31, // 24: ext.SampleResetRequest.mask:type_name -> google.protobuf.FieldMask
	10, // 25: ext.SampleResetRequest.patch:type_name -> ext.SampleConfiguration
	20, // 26: ext.SampleMessage.field1:type_name -> ext.Sample1FieldMsg
	21, // 27: ext.SampleMessage.field2:type_name -> ext.Sample2FieldMsg
	22, // 28: ext.SampleMessage.field3:type_name -> ext.Sample3FieldMsg
	23, // 29: ext.SampleMessage.field4:type_name -> ext.Sample4FieldMsg
	24, // 30: ext.SampleMessage.field5:type_name -> ext.Sample5FieldMsg
	25, // 31: ext.SampleMessage.field6:type_name -> ext.Sample6FieldMsg
	19, // 32: ext.SampleMessage.msg:type_name -> ext.SampleMessage2
	20, // 33: ext.SampleMessage2.field1:type_name -> ext.Sample1FieldMsg
	21, // 34: ext.SampleMessage2.field2:type_name -> ext.Sample2FieldMsg
	22, // 35: ext.SampleMessage2.field3:type_name -> ext.Sample3FieldMsg
	23, // 36: ext.SampleMessage2.field4:type_name -> ext.Sample4FieldMsg
	24, // 37: ext.SampleMessage2.field5:type_name -> ext.Sample5FieldMsg
	25, // 38: ext.SampleMessage2.field6:type_name -> ext.Sample6FieldMsg
	5,  // 39: ext.Ext.Foo:input_type -> ext.FooRequest
	7,  // 40: ext.Ext.Bar:input_type -> ext.BarRequest
	9,  // 41: ext.Ext.Baz:input_type -> ext.BazRequest
	3,  // 42: ext.Ext.Set:input_type -> ext.SetRequest
	5,  // 43: ext.Ext.ServerStream:input_type -> ext.FooRequest
	5,  // 44: ext.Ext.ClientStream:input_type -> ext.FooRequest
	5,  // 45: ext.Ext.BidirectionalStream:input_type -> ext.FooRequest
	11, // 46: ext.Config.GetDefaultConfiguration:input_type -> ext.SampleGetRequest
	12, // 47: ext.Config.SetDefaultConfiguration:input_type -> ext.SampleSetRequest
	11, // 48: ext.Config.GetConfiguration:input_type -> ext.SampleGetRequest
	12, // 49: ext.Config.SetConfiguration:input_type -> ext.SampleSetRequest
	33, // 50: ext.Config.ResetDefaultConfiguration:input_type -> google.protobuf.Empty
	17, // 51: ext.Config.ResetConfiguration:input_type -> ext.SampleResetRequest
	13, // 52: ext.Config.DryRun:input_type -> ext.SampleDryRunRequest
	15, // 53: ext.Config.ConfigurationHistory:input_type -> ext.SampleHistoryRequest
	5,  // 54: ext.Ext2.Foo:input_type -> ext.FooRequest
	6,  // 55: ext.Ext.Foo:output_type -> ext.FooResponse
	8,  // 56: ext.Ext.Bar:output_type -> ext.BarResponse
	9,  // 57: ext.Ext.Baz:output_type -> ext.BazRequest
	3,  // 58: ext.Ext.Set:output_type -> ext.SetRequest
	6,  // 59: ext.Ext.ServerStream:output_type -> ext.FooResponse
	6,  // 60: ext.Ext.ClientStream:output_type -> ext.FooResponse
	6,  // 61: ext.Ext.BidirectionalStream:output_type -> ext.FooResponse
	10, // 62: ext.Config.GetDefaultConfiguration:output_type -> ext.SampleConfiguration
	33, // 63: ext.Config.SetDefaultConfiguration:output_type -> google.protobuf.Empty
	10, // 64: ext.Config.GetConfiguration:output_type -> ext.SampleConfiguration
	33, // 65: ext.Config.SetConfiguration:output_type -> google.protobuf.Empty
	33, // 66: ext.Config.ResetDefaultConfiguration:output_type -> google.protobuf.Empty
	33, // 67: ext.Config.ResetConfiguration:output_type -> google.protobuf.Empty
	14, // 68: ext.Config.DryRun:output_type -> ext.SampleDryRunResponse
	16, // 69: ext.Config.ConfigurationHistory:output_type -> ext.SampleConfigurationHistoryResponse
	6,  // 70: ext.Ext2.Foo:output_type -> ext.FooResponse
	55, // [55:71] is the sub-list for method output_type
	39, // [39:55] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_init() }
func file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_init() {
	if File_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExampleValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FooRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FooResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BazRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleDryRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleDryRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleConfigurationHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleResetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleMessage2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sample1FieldMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sample2FieldMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sample3FieldMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sample4FieldMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sample5FieldMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sample6FieldMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes[15].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_goTypes,
		DependencyIndexes: file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_depIdxs,
		EnumInfos:         file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_enumTypes,
		MessageInfos:      file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_msgTypes,
	}.Build()
	File_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto = out.File
	file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_rawDesc = nil
	file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_goTypes = nil
	file_github_com_rancher_opni_pkg_test_testdata_plugins_ext_ext_proto_depIdxs = nil
}
