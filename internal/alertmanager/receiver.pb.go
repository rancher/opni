// Code generated by internal/codegen. DO NOT EDIT.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v1.0.0
// source: github.com/rancher/opni/internal/alertmanager/receiver.proto

package alertmanager

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Receiver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             *string            `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	DiscordConfigs   []*DiscordConfig   `protobuf:"bytes,2,rep,name=discord_configs,json=discordConfigs,proto3" json:"discord_configs,omitempty"`
	EmailConfigs     []*EmailConfig     `protobuf:"bytes,3,rep,name=email_configs,json=emailConfigs,proto3" json:"email_configs,omitempty"`
	PagerdutyConfigs []*PagerdutyConfig `protobuf:"bytes,4,rep,name=pagerduty_configs,json=pagerdutyConfigs,proto3" json:"pagerduty_configs,omitempty"`
	SlackConfigs     []*SlackConfig     `protobuf:"bytes,5,rep,name=slack_configs,json=slackConfigs,proto3" json:"slack_configs,omitempty"`
	WebhookConfigs   []*WebhookConfig   `protobuf:"bytes,6,rep,name=webhook_configs,json=webhookConfigs,proto3" json:"webhook_configs,omitempty"`
	OpsgenieConfigs  []*OpsGenieConfig  `protobuf:"bytes,7,rep,name=opsgenie_configs,json=opsgenieConfigs,proto3" json:"opsgenie_configs,omitempty"`
	WechatConfigs    []*WechatConfig    `protobuf:"bytes,8,rep,name=wechat_configs,json=wechatConfigs,proto3" json:"wechat_configs,omitempty"`
	PushoverConfigs  []*PushoverConfig  `protobuf:"bytes,9,rep,name=pushover_configs,json=pushoverConfigs,proto3" json:"pushover_configs,omitempty"`
	VictoropsConfigs []*VictorOpsConfig `protobuf:"bytes,10,rep,name=victorops_configs,json=victoropsConfigs,proto3" json:"victorops_configs,omitempty"`
	SnsConfigs       []*SNSConfig       `protobuf:"bytes,11,rep,name=sns_configs,json=snsConfigs,proto3" json:"sns_configs,omitempty"`
	TelegramConfigs  []*TelegramConfig  `protobuf:"bytes,12,rep,name=telegram_configs,json=telegramConfigs,proto3" json:"telegram_configs,omitempty"`
	WebexConfigs     []*WebexConfig     `protobuf:"bytes,13,rep,name=webex_configs,json=webexConfigs,proto3" json:"webex_configs,omitempty"`
	MsteamsConfigs   []*MSTeamsConfig   `protobuf:"bytes,14,rep,name=msteams_configs,json=msteamsConfigs,proto3" json:"msteams_configs,omitempty"`
}

func (x *Receiver) Reset() {
	*x = Receiver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Receiver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Receiver) ProtoMessage() {}

func (x *Receiver) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Receiver.ProtoReflect.Descriptor instead.
func (*Receiver) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{0}
}

func (x *Receiver) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Receiver) GetDiscordConfigs() []*DiscordConfig {
	if x != nil {
		return x.DiscordConfigs
	}
	return nil
}

func (x *Receiver) GetEmailConfigs() []*EmailConfig {
	if x != nil {
		return x.EmailConfigs
	}
	return nil
}

func (x *Receiver) GetPagerdutyConfigs() []*PagerdutyConfig {
	if x != nil {
		return x.PagerdutyConfigs
	}
	return nil
}

func (x *Receiver) GetSlackConfigs() []*SlackConfig {
	if x != nil {
		return x.SlackConfigs
	}
	return nil
}

func (x *Receiver) GetWebhookConfigs() []*WebhookConfig {
	if x != nil {
		return x.WebhookConfigs
	}
	return nil
}

func (x *Receiver) GetOpsgenieConfigs() []*OpsGenieConfig {
	if x != nil {
		return x.OpsgenieConfigs
	}
	return nil
}

func (x *Receiver) GetWechatConfigs() []*WechatConfig {
	if x != nil {
		return x.WechatConfigs
	}
	return nil
}

func (x *Receiver) GetPushoverConfigs() []*PushoverConfig {
	if x != nil {
		return x.PushoverConfigs
	}
	return nil
}

func (x *Receiver) GetVictoropsConfigs() []*VictorOpsConfig {
	if x != nil {
		return x.VictoropsConfigs
	}
	return nil
}

func (x *Receiver) GetSnsConfigs() []*SNSConfig {
	if x != nil {
		return x.SnsConfigs
	}
	return nil
}

func (x *Receiver) GetTelegramConfigs() []*TelegramConfig {
	if x != nil {
		return x.TelegramConfigs
	}
	return nil
}

func (x *Receiver) GetWebexConfigs() []*WebexConfig {
	if x != nil {
		return x.WebexConfigs
	}
	return nil
}

func (x *Receiver) GetMsteamsConfigs() []*MSTeamsConfig {
	if x != nil {
		return x.MsteamsConfigs
	}
	return nil
}

type DiscordConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifierConfig *NotifierConfig         `protobuf:"bytes,1,opt,name=NotifierConfig,proto3" json:"NotifierConfig,omitempty"`
	HttpConfig     *ConfigHTTPClientConfig `protobuf:"bytes,2,opt,name=http_config,json=httpConfig,proto3" json:"http_config,omitempty"`
	WebhookUrl     string                  `protobuf:"bytes,3,opt,name=webhook_url,json=webhookUrl,proto3" json:"webhook_url,omitempty"`
	Title          *string                 `protobuf:"bytes,4,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Message        *string                 `protobuf:"bytes,5,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *DiscordConfig) Reset() {
	*x = DiscordConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscordConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscordConfig) ProtoMessage() {}

func (x *DiscordConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscordConfig.ProtoReflect.Descriptor instead.
func (*DiscordConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{1}
}

func (x *DiscordConfig) GetNotifierConfig() *NotifierConfig {
	if x != nil {
		return x.NotifierConfig
	}
	return nil
}

func (x *DiscordConfig) GetHttpConfig() *ConfigHTTPClientConfig {
	if x != nil {
		return x.HttpConfig
	}
	return nil
}

func (x *DiscordConfig) GetWebhookUrl() string {
	if x != nil {
		return x.WebhookUrl
	}
	return ""
}

func (x *DiscordConfig) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *DiscordConfig) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type EmailConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifierConfig   *NotifierConfig   `protobuf:"bytes,1,opt,name=NotifierConfig,proto3" json:"NotifierConfig,omitempty"`
	To               *string           `protobuf:"bytes,2,opt,name=to,proto3,oneof" json:"to,omitempty"`
	From             *string           `protobuf:"bytes,3,opt,name=from,proto3,oneof" json:"from,omitempty"`
	Hello            *string           `protobuf:"bytes,4,opt,name=hello,proto3,oneof" json:"hello,omitempty"`
	Smarthost        *HostPort         `protobuf:"bytes,5,opt,name=smarthost,proto3" json:"smarthost,omitempty"`
	AuthUsername     *string           `protobuf:"bytes,6,opt,name=auth_username,json=authUsername,proto3,oneof" json:"auth_username,omitempty"`
	AuthPassword     *string           `protobuf:"bytes,7,opt,name=auth_password,json=authPassword,proto3,oneof" json:"auth_password,omitempty"`
	AuthPasswordFile *string           `protobuf:"bytes,8,opt,name=auth_password_file,json=authPasswordFile,proto3,oneof" json:"auth_password_file,omitempty"`
	AuthSecret       *string           `protobuf:"bytes,9,opt,name=auth_secret,json=authSecret,proto3,oneof" json:"auth_secret,omitempty"`
	AuthIdentity     *string           `protobuf:"bytes,10,opt,name=auth_identity,json=authIdentity,proto3,oneof" json:"auth_identity,omitempty"`
	Headers          map[string]string `protobuf:"bytes,11,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Html             *string           `protobuf:"bytes,12,opt,name=html,proto3,oneof" json:"html,omitempty"`
	Text             *string           `protobuf:"bytes,13,opt,name=text,proto3,oneof" json:"text,omitempty"`
	RequireTls       *bool             `protobuf:"varint,14,opt,name=require_tls,json=requireTls,proto3,oneof" json:"require_tls,omitempty"`
	TlsConfig        *ConfigTLSConfig  `protobuf:"bytes,15,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
}

func (x *EmailConfig) Reset() {
	*x = EmailConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailConfig) ProtoMessage() {}

func (x *EmailConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailConfig.ProtoReflect.Descriptor instead.
func (*EmailConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{2}
}

func (x *EmailConfig) GetNotifierConfig() *NotifierConfig {
	if x != nil {
		return x.NotifierConfig
	}
	return nil
}

func (x *EmailConfig) GetTo() string {
	if x != nil && x.To != nil {
		return *x.To
	}
	return ""
}

func (x *EmailConfig) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

func (x *EmailConfig) GetHello() string {
	if x != nil && x.Hello != nil {
		return *x.Hello
	}
	return ""
}

func (x *EmailConfig) GetSmarthost() *HostPort {
	if x != nil {
		return x.Smarthost
	}
	return nil
}

func (x *EmailConfig) GetAuthUsername() string {
	if x != nil && x.AuthUsername != nil {
		return *x.AuthUsername
	}
	return ""
}

func (x *EmailConfig) GetAuthPassword() string {
	if x != nil && x.AuthPassword != nil {
		return *x.AuthPassword
	}
	return ""
}

func (x *EmailConfig) GetAuthPasswordFile() string {
	if x != nil && x.AuthPasswordFile != nil {
		return *x.AuthPasswordFile
	}
	return ""
}

func (x *EmailConfig) GetAuthSecret() string {
	if x != nil && x.AuthSecret != nil {
		return *x.AuthSecret
	}
	return ""
}

func (x *EmailConfig) GetAuthIdentity() string {
	if x != nil && x.AuthIdentity != nil {
		return *x.AuthIdentity
	}
	return ""
}

func (x *EmailConfig) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *EmailConfig) GetHtml() string {
	if x != nil && x.Html != nil {
		return *x.Html
	}
	return ""
}

func (x *EmailConfig) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *EmailConfig) GetRequireTls() bool {
	if x != nil && x.RequireTls != nil {
		return *x.RequireTls
	}
	return false
}

func (x *EmailConfig) GetTlsConfig() *ConfigTLSConfig {
	if x != nil {
		return x.TlsConfig
	}
	return nil
}

type HostPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host *string `protobuf:"bytes,1,opt,name=Host,proto3,oneof" json:"Host,omitempty"`
	Port *string `protobuf:"bytes,2,opt,name=Port,proto3,oneof" json:"Port,omitempty"`
}

func (x *HostPort) Reset() {
	*x = HostPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostPort) ProtoMessage() {}

func (x *HostPort) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostPort.ProtoReflect.Descriptor instead.
func (*HostPort) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{3}
}

func (x *HostPort) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *HostPort) GetPort() string {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return ""
}

type MSTeamsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifierConfig *NotifierConfig         `protobuf:"bytes,1,opt,name=NotifierConfig,proto3" json:"NotifierConfig,omitempty"`
	HttpConfig     *ConfigHTTPClientConfig `protobuf:"bytes,2,opt,name=http_config,json=httpConfig,proto3" json:"http_config,omitempty"`
	WebhookUrl     string                  `protobuf:"bytes,3,opt,name=webhook_url,json=webhookUrl,proto3" json:"webhook_url,omitempty"`
	Title          *string                 `protobuf:"bytes,4,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Text           *string                 `protobuf:"bytes,5,opt,name=text,proto3,oneof" json:"text,omitempty"`
}

func (x *MSTeamsConfig) Reset() {
	*x = MSTeamsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSTeamsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSTeamsConfig) ProtoMessage() {}

func (x *MSTeamsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSTeamsConfig.ProtoReflect.Descriptor instead.
func (*MSTeamsConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{4}
}

func (x *MSTeamsConfig) GetNotifierConfig() *NotifierConfig {
	if x != nil {
		return x.NotifierConfig
	}
	return nil
}

func (x *MSTeamsConfig) GetHttpConfig() *ConfigHTTPClientConfig {
	if x != nil {
		return x.HttpConfig
	}
	return nil
}

func (x *MSTeamsConfig) GetWebhookUrl() string {
	if x != nil {
		return x.WebhookUrl
	}
	return ""
}

func (x *MSTeamsConfig) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *MSTeamsConfig) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type NotifierConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendResolved *bool `protobuf:"varint,1,opt,name=send_resolved,json=sendResolved,proto3,oneof" json:"send_resolved,omitempty"`
}

func (x *NotifierConfig) Reset() {
	*x = NotifierConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifierConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifierConfig) ProtoMessage() {}

func (x *NotifierConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifierConfig.ProtoReflect.Descriptor instead.
func (*NotifierConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{5}
}

func (x *NotifierConfig) GetSendResolved() bool {
	if x != nil && x.SendResolved != nil {
		return *x.SendResolved
	}
	return false
}

type OpsGenieConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifierConfig *NotifierConfig            `protobuf:"bytes,1,opt,name=NotifierConfig,proto3" json:"NotifierConfig,omitempty"`
	HttpConfig     *ConfigHTTPClientConfig    `protobuf:"bytes,2,opt,name=http_config,json=httpConfig,proto3" json:"http_config,omitempty"`
	ApiKey         *string                    `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3,oneof" json:"api_key,omitempty"`
	ApiKeyFile     *string                    `protobuf:"bytes,4,opt,name=api_key_file,json=apiKeyFile,proto3,oneof" json:"api_key_file,omitempty"`
	ApiUrl         string                     `protobuf:"bytes,5,opt,name=api_url,json=apiUrl,proto3" json:"api_url,omitempty"`
	Message        *string                    `protobuf:"bytes,6,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Description    *string                    `protobuf:"bytes,7,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Source         *string                    `protobuf:"bytes,8,opt,name=source,proto3,oneof" json:"source,omitempty"`
	Details        map[string]string          `protobuf:"bytes,9,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Entity         *string                    `protobuf:"bytes,10,opt,name=entity,proto3,oneof" json:"entity,omitempty"`
	Responders     []*OpsGenieConfigResponder `protobuf:"bytes,11,rep,name=responders,proto3" json:"responders,omitempty"`
	Actions        *string                    `protobuf:"bytes,12,opt,name=actions,proto3,oneof" json:"actions,omitempty"`
	Tags           *string                    `protobuf:"bytes,13,opt,name=tags,proto3,oneof" json:"tags,omitempty"`
	Note           *string                    `protobuf:"bytes,14,opt,name=note,proto3,oneof" json:"note,omitempty"`
	Priority       *string                    `protobuf:"bytes,15,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	UpdateAlerts   *bool                      `protobuf:"varint,16,opt,name=update_alerts,json=updateAlerts,proto3,oneof" json:"update_alerts,omitempty"`
}

func (x *OpsGenieConfig) Reset() {
	*x = OpsGenieConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpsGenieConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpsGenieConfig) ProtoMessage() {}

func (x *OpsGenieConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpsGenieConfig.ProtoReflect.Descriptor instead.
func (*OpsGenieConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{6}
}

func (x *OpsGenieConfig) GetNotifierConfig() *NotifierConfig {
	if x != nil {
		return x.NotifierConfig
	}
	return nil
}

func (x *OpsGenieConfig) GetHttpConfig() *ConfigHTTPClientConfig {
	if x != nil {
		return x.HttpConfig
	}
	return nil
}

func (x *OpsGenieConfig) GetApiKey() string {
	if x != nil && x.ApiKey != nil {
		return *x.ApiKey
	}
	return ""
}

func (x *OpsGenieConfig) GetApiKeyFile() string {
	if x != nil && x.ApiKeyFile != nil {
		return *x.ApiKeyFile
	}
	return ""
}

func (x *OpsGenieConfig) GetApiUrl() string {
	if x != nil {
		return x.ApiUrl
	}
	return ""
}

func (x *OpsGenieConfig) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *OpsGenieConfig) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *OpsGenieConfig) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *OpsGenieConfig) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *OpsGenieConfig) GetEntity() string {
	if x != nil && x.Entity != nil {
		return *x.Entity
	}
	return ""
}

func (x *OpsGenieConfig) GetResponders() []*OpsGenieConfigResponder {
	if x != nil {
		return x.Responders
	}
	return nil
}

func (x *OpsGenieConfig) GetActions() string {
	if x != nil && x.Actions != nil {
		return *x.Actions
	}
	return ""
}

func (x *OpsGenieConfig) GetTags() string {
	if x != nil && x.Tags != nil {
		return *x.Tags
	}
	return ""
}

func (x *OpsGenieConfig) GetNote() string {
	if x != nil && x.Note != nil {
		return *x.Note
	}
	return ""
}

func (x *OpsGenieConfig) GetPriority() string {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return ""
}

func (x *OpsGenieConfig) GetUpdateAlerts() bool {
	if x != nil && x.UpdateAlerts != nil {
		return *x.UpdateAlerts
	}
	return false
}

type OpsGenieConfigResponder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name     *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Username *string `protobuf:"bytes,3,opt,name=username,proto3,oneof" json:"username,omitempty"`
	Type     *string `protobuf:"bytes,4,opt,name=type,proto3,oneof" json:"type,omitempty"`
}

func (x *OpsGenieConfigResponder) Reset() {
	*x = OpsGenieConfigResponder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpsGenieConfigResponder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpsGenieConfigResponder) ProtoMessage() {}

func (x *OpsGenieConfigResponder) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpsGenieConfigResponder.ProtoReflect.Descriptor instead.
func (*OpsGenieConfigResponder) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{7}
}

func (x *OpsGenieConfigResponder) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *OpsGenieConfigResponder) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *OpsGenieConfigResponder) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *OpsGenieConfigResponder) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type PagerdutyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifierConfig *NotifierConfig         `protobuf:"bytes,1,opt,name=NotifierConfig,proto3" json:"NotifierConfig,omitempty"`
	HttpConfig     *ConfigHTTPClientConfig `protobuf:"bytes,2,opt,name=http_config,json=httpConfig,proto3" json:"http_config,omitempty"`
	ServiceKey     *string                 `protobuf:"bytes,3,opt,name=service_key,json=serviceKey,proto3,oneof" json:"service_key,omitempty"`
	ServiceKeyFile *string                 `protobuf:"bytes,4,opt,name=service_key_file,json=serviceKeyFile,proto3,oneof" json:"service_key_file,omitempty"`
	RoutingKey     *string                 `protobuf:"bytes,5,opt,name=routing_key,json=routingKey,proto3,oneof" json:"routing_key,omitempty"`
	RoutingKeyFile *string                 `protobuf:"bytes,6,opt,name=routing_key_file,json=routingKeyFile,proto3,oneof" json:"routing_key_file,omitempty"`
	Url            string                  `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	Client         *string                 `protobuf:"bytes,8,opt,name=client,proto3,oneof" json:"client,omitempty"`
	ClientUrl      *string                 `protobuf:"bytes,9,opt,name=client_url,json=clientUrl,proto3,oneof" json:"client_url,omitempty"`
	Description    *string                 `protobuf:"bytes,10,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Details        map[string]string       `protobuf:"bytes,11,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Images         []*PagerdutyImage       `protobuf:"bytes,12,rep,name=images,proto3" json:"images,omitempty"`
	Links          []*PagerdutyLink        `protobuf:"bytes,13,rep,name=links,proto3" json:"links,omitempty"`
	Source         *string                 `protobuf:"bytes,14,opt,name=source,proto3,oneof" json:"source,omitempty"`
	Severity       *string                 `protobuf:"bytes,15,opt,name=severity,proto3,oneof" json:"severity,omitempty"`
	Class          *string                 `protobuf:"bytes,16,opt,name=class,proto3,oneof" json:"class,omitempty"`
	Component      *string                 `protobuf:"bytes,17,opt,name=component,proto3,oneof" json:"component,omitempty"`
	Group          *string                 `protobuf:"bytes,18,opt,name=group,proto3,oneof" json:"group,omitempty"`
}

func (x *PagerdutyConfig) Reset() {
	*x = PagerdutyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagerdutyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagerdutyConfig) ProtoMessage() {}

func (x *PagerdutyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagerdutyConfig.ProtoReflect.Descriptor instead.
func (*PagerdutyConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{8}
}

func (x *PagerdutyConfig) GetNotifierConfig() *NotifierConfig {
	if x != nil {
		return x.NotifierConfig
	}
	return nil
}

func (x *PagerdutyConfig) GetHttpConfig() *ConfigHTTPClientConfig {
	if x != nil {
		return x.HttpConfig
	}
	return nil
}

func (x *PagerdutyConfig) GetServiceKey() string {
	if x != nil && x.ServiceKey != nil {
		return *x.ServiceKey
	}
	return ""
}

func (x *PagerdutyConfig) GetServiceKeyFile() string {
	if x != nil && x.ServiceKeyFile != nil {
		return *x.ServiceKeyFile
	}
	return ""
}

func (x *PagerdutyConfig) GetRoutingKey() string {
	if x != nil && x.RoutingKey != nil {
		return *x.RoutingKey
	}
	return ""
}

func (x *PagerdutyConfig) GetRoutingKeyFile() string {
	if x != nil && x.RoutingKeyFile != nil {
		return *x.RoutingKeyFile
	}
	return ""
}

func (x *PagerdutyConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PagerdutyConfig) GetClient() string {
	if x != nil && x.Client != nil {
		return *x.Client
	}
	return ""
}

func (x *PagerdutyConfig) GetClientUrl() string {
	if x != nil && x.ClientUrl != nil {
		return *x.ClientUrl
	}
	return ""
}

func (x *PagerdutyConfig) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *PagerdutyConfig) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *PagerdutyConfig) GetImages() []*PagerdutyImage {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *PagerdutyConfig) GetLinks() []*PagerdutyLink {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *PagerdutyConfig) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *PagerdutyConfig) GetSeverity() string {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return ""
}

func (x *PagerdutyConfig) GetClass() string {
	if x != nil && x.Class != nil {
		return *x.Class
	}
	return ""
}

func (x *PagerdutyConfig) GetComponent() string {
	if x != nil && x.Component != nil {
		return *x.Component
	}
	return ""
}

func (x *PagerdutyConfig) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

type PagerdutyImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src  *string `protobuf:"bytes,1,opt,name=src,proto3,oneof" json:"src,omitempty"`
	Alt  *string `protobuf:"bytes,2,opt,name=alt,proto3,oneof" json:"alt,omitempty"`
	Href *string `protobuf:"bytes,3,opt,name=href,proto3,oneof" json:"href,omitempty"`
}

func (x *PagerdutyImage) Reset() {
	*x = PagerdutyImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagerdutyImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagerdutyImage) ProtoMessage() {}

func (x *PagerdutyImage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagerdutyImage.ProtoReflect.Descriptor instead.
func (*PagerdutyImage) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{9}
}

func (x *PagerdutyImage) GetSrc() string {
	if x != nil && x.Src != nil {
		return *x.Src
	}
	return ""
}

func (x *PagerdutyImage) GetAlt() string {
	if x != nil && x.Alt != nil {
		return *x.Alt
	}
	return ""
}

func (x *PagerdutyImage) GetHref() string {
	if x != nil && x.Href != nil {
		return *x.Href
	}
	return ""
}

type PagerdutyLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Href *string `protobuf:"bytes,1,opt,name=href,proto3,oneof" json:"href,omitempty"`
	Text *string `protobuf:"bytes,2,opt,name=text,proto3,oneof" json:"text,omitempty"`
}

func (x *PagerdutyLink) Reset() {
	*x = PagerdutyLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagerdutyLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagerdutyLink) ProtoMessage() {}

func (x *PagerdutyLink) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagerdutyLink.ProtoReflect.Descriptor instead.
func (*PagerdutyLink) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{10}
}

func (x *PagerdutyLink) GetHref() string {
	if x != nil && x.Href != nil {
		return *x.Href
	}
	return ""
}

func (x *PagerdutyLink) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type PushoverConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifierConfig *NotifierConfig         `protobuf:"bytes,1,opt,name=NotifierConfig,proto3" json:"NotifierConfig,omitempty"`
	HttpConfig     *ConfigHTTPClientConfig `protobuf:"bytes,2,opt,name=http_config,json=httpConfig,proto3" json:"http_config,omitempty"`
	UserKey        *string                 `protobuf:"bytes,3,opt,name=user_key,json=userKey,proto3,oneof" json:"user_key,omitempty"`
	UserKeyFile    *string                 `protobuf:"bytes,4,opt,name=user_key_file,json=userKeyFile,proto3,oneof" json:"user_key_file,omitempty"`
	Token          *string                 `protobuf:"bytes,5,opt,name=token,proto3,oneof" json:"token,omitempty"`
	TokenFile      *string                 `protobuf:"bytes,6,opt,name=token_file,json=tokenFile,proto3,oneof" json:"token_file,omitempty"`
	Title          *string                 `protobuf:"bytes,7,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Message        *string                 `protobuf:"bytes,8,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Url            *string                 `protobuf:"bytes,9,opt,name=url,proto3,oneof" json:"url,omitempty"`
	UrlTitle       *string                 `protobuf:"bytes,10,opt,name=url_title,json=urlTitle,proto3,oneof" json:"url_title,omitempty"`
	Device         *string                 `protobuf:"bytes,11,opt,name=device,proto3,oneof" json:"device,omitempty"`
	Sound          *string                 `protobuf:"bytes,12,opt,name=sound,proto3,oneof" json:"sound,omitempty"`
	Priority       *string                 `protobuf:"bytes,13,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	Retry          *int64                  `protobuf:"varint,14,opt,name=retry,proto3,oneof" json:"retry,omitempty"`
	Expire         *int64                  `protobuf:"varint,15,opt,name=expire,proto3,oneof" json:"expire,omitempty"`
	Html           *bool                   `protobuf:"varint,16,opt,name=html,proto3,oneof" json:"html,omitempty"`
}

func (x *PushoverConfig) Reset() {
	*x = PushoverConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushoverConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushoverConfig) ProtoMessage() {}

func (x *PushoverConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushoverConfig.ProtoReflect.Descriptor instead.
func (*PushoverConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{11}
}

func (x *PushoverConfig) GetNotifierConfig() *NotifierConfig {
	if x != nil {
		return x.NotifierConfig
	}
	return nil
}

func (x *PushoverConfig) GetHttpConfig() *ConfigHTTPClientConfig {
	if x != nil {
		return x.HttpConfig
	}
	return nil
}

func (x *PushoverConfig) GetUserKey() string {
	if x != nil && x.UserKey != nil {
		return *x.UserKey
	}
	return ""
}

func (x *PushoverConfig) GetUserKeyFile() string {
	if x != nil && x.UserKeyFile != nil {
		return *x.UserKeyFile
	}
	return ""
}

func (x *PushoverConfig) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *PushoverConfig) GetTokenFile() string {
	if x != nil && x.TokenFile != nil {
		return *x.TokenFile
	}
	return ""
}

func (x *PushoverConfig) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *PushoverConfig) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *PushoverConfig) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *PushoverConfig) GetUrlTitle() string {
	if x != nil && x.UrlTitle != nil {
		return *x.UrlTitle
	}
	return ""
}

func (x *PushoverConfig) GetDevice() string {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return ""
}

func (x *PushoverConfig) GetSound() string {
	if x != nil && x.Sound != nil {
		return *x.Sound
	}
	return ""
}

func (x *PushoverConfig) GetPriority() string {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return ""
}

func (x *PushoverConfig) GetRetry() int64 {
	if x != nil && x.Retry != nil {
		return *x.Retry
	}
	return 0
}

func (x *PushoverConfig) GetExpire() int64 {
	if x != nil && x.Expire != nil {
		return *x.Expire
	}
	return 0
}

func (x *PushoverConfig) GetHtml() bool {
	if x != nil && x.Html != nil {
		return *x.Html
	}
	return false
}

type SNSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifierConfig *NotifierConfig         `protobuf:"bytes,1,opt,name=NotifierConfig,proto3" json:"NotifierConfig,omitempty"`
	HttpConfig     *ConfigHTTPClientConfig `protobuf:"bytes,2,opt,name=http_config,json=httpConfig,proto3" json:"http_config,omitempty"`
	ApiUrl         *string                 `protobuf:"bytes,3,opt,name=api_url,json=apiUrl,proto3,oneof" json:"api_url,omitempty"`
	Sigv4          *Sigv4SigV4Config       `protobuf:"bytes,4,opt,name=sigv4,proto3" json:"sigv4,omitempty"`
	TopicArn       *string                 `protobuf:"bytes,5,opt,name=topic_arn,json=topicArn,proto3,oneof" json:"topic_arn,omitempty"`
	PhoneNumber    *string                 `protobuf:"bytes,6,opt,name=phone_number,json=phoneNumber,proto3,oneof" json:"phone_number,omitempty"`
	TargetArn      *string                 `protobuf:"bytes,7,opt,name=target_arn,json=targetArn,proto3,oneof" json:"target_arn,omitempty"`
	Subject        *string                 `protobuf:"bytes,8,opt,name=subject,proto3,oneof" json:"subject,omitempty"`
	Message        *string                 `protobuf:"bytes,9,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Attributes     map[string]string       `protobuf:"bytes,10,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SNSConfig) Reset() {
	*x = SNSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNSConfig) ProtoMessage() {}

func (x *SNSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNSConfig.ProtoReflect.Descriptor instead.
func (*SNSConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{12}
}

func (x *SNSConfig) GetNotifierConfig() *NotifierConfig {
	if x != nil {
		return x.NotifierConfig
	}
	return nil
}

func (x *SNSConfig) GetHttpConfig() *ConfigHTTPClientConfig {
	if x != nil {
		return x.HttpConfig
	}
	return nil
}

func (x *SNSConfig) GetApiUrl() string {
	if x != nil && x.ApiUrl != nil {
		return *x.ApiUrl
	}
	return ""
}

func (x *SNSConfig) GetSigv4() *Sigv4SigV4Config {
	if x != nil {
		return x.Sigv4
	}
	return nil
}

func (x *SNSConfig) GetTopicArn() string {
	if x != nil && x.TopicArn != nil {
		return *x.TopicArn
	}
	return ""
}

func (x *SNSConfig) GetPhoneNumber() string {
	if x != nil && x.PhoneNumber != nil {
		return *x.PhoneNumber
	}
	return ""
}

func (x *SNSConfig) GetTargetArn() string {
	if x != nil && x.TargetArn != nil {
		return *x.TargetArn
	}
	return ""
}

func (x *SNSConfig) GetSubject() string {
	if x != nil && x.Subject != nil {
		return *x.Subject
	}
	return ""
}

func (x *SNSConfig) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SNSConfig) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type SlackAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *string                 `protobuf:"bytes,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Text    *string                 `protobuf:"bytes,2,opt,name=text,proto3,oneof" json:"text,omitempty"`
	Url     *string                 `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	Style   *string                 `protobuf:"bytes,4,opt,name=style,proto3,oneof" json:"style,omitempty"`
	Name    *string                 `protobuf:"bytes,5,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Value   *string                 `protobuf:"bytes,6,opt,name=value,proto3,oneof" json:"value,omitempty"`
	Confirm *SlackConfirmationField `protobuf:"bytes,7,opt,name=confirm,proto3" json:"confirm,omitempty"`
}

func (x *SlackAction) Reset() {
	*x = SlackAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackAction) ProtoMessage() {}

func (x *SlackAction) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackAction.ProtoReflect.Descriptor instead.
func (*SlackAction) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{13}
}

func (x *SlackAction) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *SlackAction) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *SlackAction) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *SlackAction) GetStyle() string {
	if x != nil && x.Style != nil {
		return *x.Style
	}
	return ""
}

func (x *SlackAction) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SlackAction) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *SlackAction) GetConfirm() *SlackConfirmationField {
	if x != nil {
		return x.Confirm
	}
	return nil
}

type SlackConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifierConfig *NotifierConfig         `protobuf:"bytes,1,opt,name=NotifierConfig,proto3" json:"NotifierConfig,omitempty"`
	HttpConfig     *ConfigHTTPClientConfig `protobuf:"bytes,2,opt,name=http_config,json=httpConfig,proto3" json:"http_config,omitempty"`
	ApiUrl         string                  `protobuf:"bytes,3,opt,name=api_url,json=apiUrl,proto3" json:"api_url,omitempty"`
	ApiUrlFile     *string                 `protobuf:"bytes,4,opt,name=api_url_file,json=apiUrlFile,proto3,oneof" json:"api_url_file,omitempty"`
	Channel        *string                 `protobuf:"bytes,5,opt,name=channel,proto3,oneof" json:"channel,omitempty"`
	Username       *string                 `protobuf:"bytes,6,opt,name=username,proto3,oneof" json:"username,omitempty"`
	Color          *string                 `protobuf:"bytes,7,opt,name=color,proto3,oneof" json:"color,omitempty"`
	Title          *string                 `protobuf:"bytes,8,opt,name=title,proto3,oneof" json:"title,omitempty"`
	TitleLink      *string                 `protobuf:"bytes,9,opt,name=title_link,json=titleLink,proto3,oneof" json:"title_link,omitempty"`
	Pretext        *string                 `protobuf:"bytes,10,opt,name=pretext,proto3,oneof" json:"pretext,omitempty"`
	Text           *string                 `protobuf:"bytes,11,opt,name=text,proto3,oneof" json:"text,omitempty"`
	Fields         []*SlackField           `protobuf:"bytes,12,rep,name=fields,proto3" json:"fields,omitempty"`
	ShortFields    *bool                   `protobuf:"varint,13,opt,name=short_fields,json=shortFields,proto3,oneof" json:"short_fields,omitempty"`
	Footer         *string                 `protobuf:"bytes,14,opt,name=footer,proto3,oneof" json:"footer,omitempty"`
	Fallback       *string                 `protobuf:"bytes,15,opt,name=fallback,proto3,oneof" json:"fallback,omitempty"`
	CallbackId     *string                 `protobuf:"bytes,16,opt,name=callback_id,json=callbackId,proto3,oneof" json:"callback_id,omitempty"`
	IconEmoji      *string                 `protobuf:"bytes,17,opt,name=icon_emoji,json=iconEmoji,proto3,oneof" json:"icon_emoji,omitempty"`
	IconUrl        *string                 `protobuf:"bytes,18,opt,name=icon_url,json=iconUrl,proto3,oneof" json:"icon_url,omitempty"`
	ImageUrl       *string                 `protobuf:"bytes,19,opt,name=image_url,json=imageUrl,proto3,oneof" json:"image_url,omitempty"`
	ThumbUrl       *string                 `protobuf:"bytes,20,opt,name=thumb_url,json=thumbUrl,proto3,oneof" json:"thumb_url,omitempty"`
	LinkNames      *bool                   `protobuf:"varint,21,opt,name=link_names,json=linkNames,proto3,oneof" json:"link_names,omitempty"`
	MrkdwnIn       []string                `protobuf:"bytes,22,rep,name=mrkdwn_in,json=mrkdwnIn,proto3" json:"mrkdwn_in,omitempty"`
	Actions        []*SlackAction          `protobuf:"bytes,23,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *SlackConfig) Reset() {
	*x = SlackConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackConfig) ProtoMessage() {}

func (x *SlackConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackConfig.ProtoReflect.Descriptor instead.
func (*SlackConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{14}
}

func (x *SlackConfig) GetNotifierConfig() *NotifierConfig {
	if x != nil {
		return x.NotifierConfig
	}
	return nil
}

func (x *SlackConfig) GetHttpConfig() *ConfigHTTPClientConfig {
	if x != nil {
		return x.HttpConfig
	}
	return nil
}

func (x *SlackConfig) GetApiUrl() string {
	if x != nil {
		return x.ApiUrl
	}
	return ""
}

func (x *SlackConfig) GetApiUrlFile() string {
	if x != nil && x.ApiUrlFile != nil {
		return *x.ApiUrlFile
	}
	return ""
}

func (x *SlackConfig) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *SlackConfig) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *SlackConfig) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

func (x *SlackConfig) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *SlackConfig) GetTitleLink() string {
	if x != nil && x.TitleLink != nil {
		return *x.TitleLink
	}
	return ""
}

func (x *SlackConfig) GetPretext() string {
	if x != nil && x.Pretext != nil {
		return *x.Pretext
	}
	return ""
}

func (x *SlackConfig) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *SlackConfig) GetFields() []*SlackField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SlackConfig) GetShortFields() bool {
	if x != nil && x.ShortFields != nil {
		return *x.ShortFields
	}
	return false
}

func (x *SlackConfig) GetFooter() string {
	if x != nil && x.Footer != nil {
		return *x.Footer
	}
	return ""
}

func (x *SlackConfig) GetFallback() string {
	if x != nil && x.Fallback != nil {
		return *x.Fallback
	}
	return ""
}

func (x *SlackConfig) GetCallbackId() string {
	if x != nil && x.CallbackId != nil {
		return *x.CallbackId
	}
	return ""
}

func (x *SlackConfig) GetIconEmoji() string {
	if x != nil && x.IconEmoji != nil {
		return *x.IconEmoji
	}
	return ""
}

func (x *SlackConfig) GetIconUrl() string {
	if x != nil && x.IconUrl != nil {
		return *x.IconUrl
	}
	return ""
}

func (x *SlackConfig) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *SlackConfig) GetThumbUrl() string {
	if x != nil && x.ThumbUrl != nil {
		return *x.ThumbUrl
	}
	return ""
}

func (x *SlackConfig) GetLinkNames() bool {
	if x != nil && x.LinkNames != nil {
		return *x.LinkNames
	}
	return false
}

func (x *SlackConfig) GetMrkdwnIn() []string {
	if x != nil {
		return x.MrkdwnIn
	}
	return nil
}

func (x *SlackConfig) GetActions() []*SlackAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

type SlackConfirmationField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text        *string `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
	Title       *string `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	OkText      *string `protobuf:"bytes,3,opt,name=ok_text,json=okText,proto3,oneof" json:"ok_text,omitempty"`
	DismissText *string `protobuf:"bytes,4,opt,name=dismiss_text,json=dismissText,proto3,oneof" json:"dismiss_text,omitempty"`
}

func (x *SlackConfirmationField) Reset() {
	*x = SlackConfirmationField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackConfirmationField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackConfirmationField) ProtoMessage() {}

func (x *SlackConfirmationField) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackConfirmationField.ProtoReflect.Descriptor instead.
func (*SlackConfirmationField) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{15}
}

func (x *SlackConfirmationField) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *SlackConfirmationField) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *SlackConfirmationField) GetOkText() string {
	if x != nil && x.OkText != nil {
		return *x.OkText
	}
	return ""
}

func (x *SlackConfirmationField) GetDismissText() string {
	if x != nil && x.DismissText != nil {
		return *x.DismissText
	}
	return ""
}

type SlackField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title *string `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	Short *bool   `protobuf:"varint,3,opt,name=short,proto3,oneof" json:"short,omitempty"`
}

func (x *SlackField) Reset() {
	*x = SlackField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackField) ProtoMessage() {}

func (x *SlackField) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackField.ProtoReflect.Descriptor instead.
func (*SlackField) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{16}
}

func (x *SlackField) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *SlackField) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *SlackField) GetShort() bool {
	if x != nil && x.Short != nil {
		return *x.Short
	}
	return false
}

type TelegramConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifierConfig       *NotifierConfig         `protobuf:"bytes,1,opt,name=NotifierConfig,proto3" json:"NotifierConfig,omitempty"`
	HttpConfig           *ConfigHTTPClientConfig `protobuf:"bytes,2,opt,name=http_config,json=httpConfig,proto3" json:"http_config,omitempty"`
	ApiUrl               string                  `protobuf:"bytes,3,opt,name=api_url,json=apiUrl,proto3" json:"api_url,omitempty"`
	BotToken             *string                 `protobuf:"bytes,4,opt,name=bot_token,json=botToken,proto3,oneof" json:"bot_token,omitempty"`
	BotTokenFile         *string                 `protobuf:"bytes,5,opt,name=bot_token_file,json=botTokenFile,proto3,oneof" json:"bot_token_file,omitempty"`
	ChatId               *int64                  `protobuf:"varint,6,opt,name=chat_id,json=chatId,proto3,oneof" json:"chat_id,omitempty"`
	Message              *string                 `protobuf:"bytes,7,opt,name=message,proto3,oneof" json:"message,omitempty"`
	DisableNotifications *bool                   `protobuf:"varint,8,opt,name=disable_notifications,json=disableNotifications,proto3,oneof" json:"disable_notifications,omitempty"`
	ParseMode            *string                 `protobuf:"bytes,9,opt,name=parse_mode,json=parseMode,proto3,oneof" json:"parse_mode,omitempty"`
}

func (x *TelegramConfig) Reset() {
	*x = TelegramConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelegramConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelegramConfig) ProtoMessage() {}

func (x *TelegramConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelegramConfig.ProtoReflect.Descriptor instead.
func (*TelegramConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{17}
}

func (x *TelegramConfig) GetNotifierConfig() *NotifierConfig {
	if x != nil {
		return x.NotifierConfig
	}
	return nil
}

func (x *TelegramConfig) GetHttpConfig() *ConfigHTTPClientConfig {
	if x != nil {
		return x.HttpConfig
	}
	return nil
}

func (x *TelegramConfig) GetApiUrl() string {
	if x != nil {
		return x.ApiUrl
	}
	return ""
}

func (x *TelegramConfig) GetBotToken() string {
	if x != nil && x.BotToken != nil {
		return *x.BotToken
	}
	return ""
}

func (x *TelegramConfig) GetBotTokenFile() string {
	if x != nil && x.BotTokenFile != nil {
		return *x.BotTokenFile
	}
	return ""
}

func (x *TelegramConfig) GetChatId() int64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *TelegramConfig) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *TelegramConfig) GetDisableNotifications() bool {
	if x != nil && x.DisableNotifications != nil {
		return *x.DisableNotifications
	}
	return false
}

func (x *TelegramConfig) GetParseMode() string {
	if x != nil && x.ParseMode != nil {
		return *x.ParseMode
	}
	return ""
}

type VictorOpsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifierConfig    *NotifierConfig         `protobuf:"bytes,1,opt,name=NotifierConfig,proto3" json:"NotifierConfig,omitempty"`
	HttpConfig        *ConfigHTTPClientConfig `protobuf:"bytes,2,opt,name=http_config,json=httpConfig,proto3" json:"http_config,omitempty"`
	ApiKey            *string                 `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3,oneof" json:"api_key,omitempty"`
	ApiKeyFile        *string                 `protobuf:"bytes,4,opt,name=api_key_file,json=apiKeyFile,proto3,oneof" json:"api_key_file,omitempty"`
	ApiUrl            string                  `protobuf:"bytes,5,opt,name=api_url,json=apiUrl,proto3" json:"api_url,omitempty"`
	RoutingKey        *string                 `protobuf:"bytes,6,opt,name=routing_key,json=routingKey,proto3,oneof" json:"routing_key,omitempty"`
	MessageType       *string                 `protobuf:"bytes,7,opt,name=message_type,json=messageType,proto3,oneof" json:"message_type,omitempty"`
	StateMessage      *string                 `protobuf:"bytes,8,opt,name=state_message,json=stateMessage,proto3,oneof" json:"state_message,omitempty"`
	EntityDisplayName *string                 `protobuf:"bytes,9,opt,name=entity_display_name,json=entityDisplayName,proto3,oneof" json:"entity_display_name,omitempty"`
	MonitoringTool    *string                 `protobuf:"bytes,10,opt,name=monitoring_tool,json=monitoringTool,proto3,oneof" json:"monitoring_tool,omitempty"`
	CustomFields      map[string]string       `protobuf:"bytes,11,rep,name=custom_fields,json=customFields,proto3" json:"custom_fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VictorOpsConfig) Reset() {
	*x = VictorOpsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VictorOpsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VictorOpsConfig) ProtoMessage() {}

func (x *VictorOpsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VictorOpsConfig.ProtoReflect.Descriptor instead.
func (*VictorOpsConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{18}
}

func (x *VictorOpsConfig) GetNotifierConfig() *NotifierConfig {
	if x != nil {
		return x.NotifierConfig
	}
	return nil
}

func (x *VictorOpsConfig) GetHttpConfig() *ConfigHTTPClientConfig {
	if x != nil {
		return x.HttpConfig
	}
	return nil
}

func (x *VictorOpsConfig) GetApiKey() string {
	if x != nil && x.ApiKey != nil {
		return *x.ApiKey
	}
	return ""
}

func (x *VictorOpsConfig) GetApiKeyFile() string {
	if x != nil && x.ApiKeyFile != nil {
		return *x.ApiKeyFile
	}
	return ""
}

func (x *VictorOpsConfig) GetApiUrl() string {
	if x != nil {
		return x.ApiUrl
	}
	return ""
}

func (x *VictorOpsConfig) GetRoutingKey() string {
	if x != nil && x.RoutingKey != nil {
		return *x.RoutingKey
	}
	return ""
}

func (x *VictorOpsConfig) GetMessageType() string {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return ""
}

func (x *VictorOpsConfig) GetStateMessage() string {
	if x != nil && x.StateMessage != nil {
		return *x.StateMessage
	}
	return ""
}

func (x *VictorOpsConfig) GetEntityDisplayName() string {
	if x != nil && x.EntityDisplayName != nil {
		return *x.EntityDisplayName
	}
	return ""
}

func (x *VictorOpsConfig) GetMonitoringTool() string {
	if x != nil && x.MonitoringTool != nil {
		return *x.MonitoringTool
	}
	return ""
}

func (x *VictorOpsConfig) GetCustomFields() map[string]string {
	if x != nil {
		return x.CustomFields
	}
	return nil
}

type WebexConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifierConfig *NotifierConfig         `protobuf:"bytes,1,opt,name=NotifierConfig,proto3" json:"NotifierConfig,omitempty"`
	HttpConfig     *ConfigHTTPClientConfig `protobuf:"bytes,2,opt,name=http_config,json=httpConfig,proto3" json:"http_config,omitempty"`
	ApiUrl         string                  `protobuf:"bytes,3,opt,name=api_url,json=apiUrl,proto3" json:"api_url,omitempty"`
	Message        *string                 `protobuf:"bytes,4,opt,name=message,proto3,oneof" json:"message,omitempty"`
	RoomId         *string                 `protobuf:"bytes,5,opt,name=room_id,json=roomId,proto3,oneof" json:"room_id,omitempty"`
}

func (x *WebexConfig) Reset() {
	*x = WebexConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebexConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebexConfig) ProtoMessage() {}

func (x *WebexConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebexConfig.ProtoReflect.Descriptor instead.
func (*WebexConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{19}
}

func (x *WebexConfig) GetNotifierConfig() *NotifierConfig {
	if x != nil {
		return x.NotifierConfig
	}
	return nil
}

func (x *WebexConfig) GetHttpConfig() *ConfigHTTPClientConfig {
	if x != nil {
		return x.HttpConfig
	}
	return nil
}

func (x *WebexConfig) GetApiUrl() string {
	if x != nil {
		return x.ApiUrl
	}
	return ""
}

func (x *WebexConfig) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *WebexConfig) GetRoomId() string {
	if x != nil && x.RoomId != nil {
		return *x.RoomId
	}
	return ""
}

type WebhookConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifierConfig *NotifierConfig         `protobuf:"bytes,1,opt,name=NotifierConfig,proto3" json:"NotifierConfig,omitempty"`
	HttpConfig     *ConfigHTTPClientConfig `protobuf:"bytes,2,opt,name=http_config,json=httpConfig,proto3" json:"http_config,omitempty"`
	Url            string                  `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	UrlFile        *string                 `protobuf:"bytes,4,opt,name=url_file,json=urlFile,proto3,oneof" json:"url_file,omitempty"`
	MaxAlerts      *uint64                 `protobuf:"varint,5,opt,name=max_alerts,json=maxAlerts,proto3,oneof" json:"max_alerts,omitempty"`
}

func (x *WebhookConfig) Reset() {
	*x = WebhookConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookConfig) ProtoMessage() {}

func (x *WebhookConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookConfig.ProtoReflect.Descriptor instead.
func (*WebhookConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{20}
}

func (x *WebhookConfig) GetNotifierConfig() *NotifierConfig {
	if x != nil {
		return x.NotifierConfig
	}
	return nil
}

func (x *WebhookConfig) GetHttpConfig() *ConfigHTTPClientConfig {
	if x != nil {
		return x.HttpConfig
	}
	return nil
}

func (x *WebhookConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *WebhookConfig) GetUrlFile() string {
	if x != nil && x.UrlFile != nil {
		return *x.UrlFile
	}
	return ""
}

func (x *WebhookConfig) GetMaxAlerts() uint64 {
	if x != nil && x.MaxAlerts != nil {
		return *x.MaxAlerts
	}
	return 0
}

type WechatConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifierConfig *NotifierConfig         `protobuf:"bytes,1,opt,name=NotifierConfig,proto3" json:"NotifierConfig,omitempty"`
	HttpConfig     *ConfigHTTPClientConfig `protobuf:"bytes,2,opt,name=http_config,json=httpConfig,proto3" json:"http_config,omitempty"`
	ApiSecret      *string                 `protobuf:"bytes,3,opt,name=api_secret,json=apiSecret,proto3,oneof" json:"api_secret,omitempty"`
	CorpId         *string                 `protobuf:"bytes,4,opt,name=corp_id,json=corpId,proto3,oneof" json:"corp_id,omitempty"`
	Message        *string                 `protobuf:"bytes,5,opt,name=message,proto3,oneof" json:"message,omitempty"`
	ApiUrl         string                  `protobuf:"bytes,6,opt,name=api_url,json=apiUrl,proto3" json:"api_url,omitempty"`
	ToUser         *string                 `protobuf:"bytes,7,opt,name=to_user,json=toUser,proto3,oneof" json:"to_user,omitempty"`
	ToParty        *string                 `protobuf:"bytes,8,opt,name=to_party,json=toParty,proto3,oneof" json:"to_party,omitempty"`
	ToTag          *string                 `protobuf:"bytes,9,opt,name=to_tag,json=toTag,proto3,oneof" json:"to_tag,omitempty"`
	AgentId        *string                 `protobuf:"bytes,10,opt,name=agent_id,json=agentId,proto3,oneof" json:"agent_id,omitempty"`
	MessageType    *string                 `protobuf:"bytes,11,opt,name=message_type,json=messageType,proto3,oneof" json:"message_type,omitempty"`
}

func (x *WechatConfig) Reset() {
	*x = WechatConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatConfig) ProtoMessage() {}

func (x *WechatConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatConfig.ProtoReflect.Descriptor instead.
func (*WechatConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{21}
}

func (x *WechatConfig) GetNotifierConfig() *NotifierConfig {
	if x != nil {
		return x.NotifierConfig
	}
	return nil
}

func (x *WechatConfig) GetHttpConfig() *ConfigHTTPClientConfig {
	if x != nil {
		return x.HttpConfig
	}
	return nil
}

func (x *WechatConfig) GetApiSecret() string {
	if x != nil && x.ApiSecret != nil {
		return *x.ApiSecret
	}
	return ""
}

func (x *WechatConfig) GetCorpId() string {
	if x != nil && x.CorpId != nil {
		return *x.CorpId
	}
	return ""
}

func (x *WechatConfig) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *WechatConfig) GetApiUrl() string {
	if x != nil {
		return x.ApiUrl
	}
	return ""
}

func (x *WechatConfig) GetToUser() string {
	if x != nil && x.ToUser != nil {
		return *x.ToUser
	}
	return ""
}

func (x *WechatConfig) GetToParty() string {
	if x != nil && x.ToParty != nil {
		return *x.ToParty
	}
	return ""
}

func (x *WechatConfig) GetToTag() string {
	if x != nil && x.ToTag != nil {
		return *x.ToTag
	}
	return ""
}

func (x *WechatConfig) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *WechatConfig) GetMessageType() string {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return ""
}

type ConfigAuthorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            *string `protobuf:"bytes,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Credentials     *string `protobuf:"bytes,2,opt,name=credentials,proto3,oneof" json:"credentials,omitempty"`
	CredentialsFile *string `protobuf:"bytes,3,opt,name=credentials_file,json=credentialsFile,proto3,oneof" json:"credentials_file,omitempty"`
}

func (x *ConfigAuthorization) Reset() {
	*x = ConfigAuthorization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigAuthorization) ProtoMessage() {}

func (x *ConfigAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigAuthorization.ProtoReflect.Descriptor instead.
func (*ConfigAuthorization) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{22}
}

func (x *ConfigAuthorization) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ConfigAuthorization) GetCredentials() string {
	if x != nil && x.Credentials != nil {
		return *x.Credentials
	}
	return ""
}

func (x *ConfigAuthorization) GetCredentialsFile() string {
	if x != nil && x.CredentialsFile != nil {
		return *x.CredentialsFile
	}
	return ""
}

type ConfigBasicAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username     *string `protobuf:"bytes,1,opt,name=username,proto3,oneof" json:"username,omitempty"`
	Password     *string `protobuf:"bytes,2,opt,name=password,proto3,oneof" json:"password,omitempty"`
	PasswordFile *string `protobuf:"bytes,3,opt,name=password_file,json=passwordFile,proto3,oneof" json:"password_file,omitempty"`
}

func (x *ConfigBasicAuth) Reset() {
	*x = ConfigBasicAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigBasicAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigBasicAuth) ProtoMessage() {}

func (x *ConfigBasicAuth) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigBasicAuth.ProtoReflect.Descriptor instead.
func (*ConfigBasicAuth) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{23}
}

func (x *ConfigBasicAuth) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *ConfigBasicAuth) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *ConfigBasicAuth) GetPasswordFile() string {
	if x != nil && x.PasswordFile != nil {
		return *x.PasswordFile
	}
	return ""
}

type ConfigHTTPClientConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicAuth       *ConfigBasicAuth     `protobuf:"bytes,1,opt,name=basic_auth,json=basicAuth,proto3" json:"basic_auth,omitempty"`
	Authorization   *ConfigAuthorization `protobuf:"bytes,2,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Oauth2          *ConfigOAuth2        `protobuf:"bytes,3,opt,name=oauth2,proto3" json:"oauth2,omitempty"`
	BearerToken     *string              `protobuf:"bytes,4,opt,name=bearer_token,json=bearerToken,proto3,oneof" json:"bearer_token,omitempty"`
	BearerTokenFile *string              `protobuf:"bytes,5,opt,name=bearer_token_file,json=bearerTokenFile,proto3,oneof" json:"bearer_token_file,omitempty"`
	TlsConfig       *ConfigTLSConfig     `protobuf:"bytes,6,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
	FollowRedirects *bool                `protobuf:"varint,7,opt,name=follow_redirects,json=followRedirects,proto3,oneof" json:"follow_redirects,omitempty"`
	EnableHttp2     *bool                `protobuf:"varint,8,opt,name=enable_http2,json=enableHttp2,proto3,oneof" json:"enable_http2,omitempty"`
	ProxyConfig     *ConfigProxyConfig   `protobuf:"bytes,9,opt,name=ProxyConfig,proto3" json:"ProxyConfig,omitempty"`
}

func (x *ConfigHTTPClientConfig) Reset() {
	*x = ConfigHTTPClientConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigHTTPClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigHTTPClientConfig) ProtoMessage() {}

func (x *ConfigHTTPClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigHTTPClientConfig.ProtoReflect.Descriptor instead.
func (*ConfigHTTPClientConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{24}
}

func (x *ConfigHTTPClientConfig) GetBasicAuth() *ConfigBasicAuth {
	if x != nil {
		return x.BasicAuth
	}
	return nil
}

func (x *ConfigHTTPClientConfig) GetAuthorization() *ConfigAuthorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *ConfigHTTPClientConfig) GetOauth2() *ConfigOAuth2 {
	if x != nil {
		return x.Oauth2
	}
	return nil
}

func (x *ConfigHTTPClientConfig) GetBearerToken() string {
	if x != nil && x.BearerToken != nil {
		return *x.BearerToken
	}
	return ""
}

func (x *ConfigHTTPClientConfig) GetBearerTokenFile() string {
	if x != nil && x.BearerTokenFile != nil {
		return *x.BearerTokenFile
	}
	return ""
}

func (x *ConfigHTTPClientConfig) GetTlsConfig() *ConfigTLSConfig {
	if x != nil {
		return x.TlsConfig
	}
	return nil
}

func (x *ConfigHTTPClientConfig) GetFollowRedirects() bool {
	if x != nil && x.FollowRedirects != nil {
		return *x.FollowRedirects
	}
	return false
}

func (x *ConfigHTTPClientConfig) GetEnableHttp2() bool {
	if x != nil && x.EnableHttp2 != nil {
		return *x.EnableHttp2
	}
	return false
}

func (x *ConfigHTTPClientConfig) GetProxyConfig() *ConfigProxyConfig {
	if x != nil {
		return x.ProxyConfig
	}
	return nil
}

type ConfigOAuth2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId         *string            `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3,oneof" json:"client_id,omitempty"`
	ClientSecret     *string            `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3,oneof" json:"client_secret,omitempty"`
	ClientSecretFile *string            `protobuf:"bytes,3,opt,name=client_secret_file,json=clientSecretFile,proto3,oneof" json:"client_secret_file,omitempty"`
	Scopes           []string           `protobuf:"bytes,4,rep,name=scopes,proto3" json:"scopes,omitempty"`
	TokenUrl         *string            `protobuf:"bytes,5,opt,name=token_url,json=tokenUrl,proto3,oneof" json:"token_url,omitempty"`
	EndpointParams   map[string]string  `protobuf:"bytes,6,rep,name=endpoint_params,json=endpointParams,proto3" json:"endpoint_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TlsConfig        *ConfigTLSConfig   `protobuf:"bytes,7,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
	ProxyConfig      *ConfigProxyConfig `protobuf:"bytes,8,opt,name=ProxyConfig,proto3" json:"ProxyConfig,omitempty"`
}

func (x *ConfigOAuth2) Reset() {
	*x = ConfigOAuth2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigOAuth2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigOAuth2) ProtoMessage() {}

func (x *ConfigOAuth2) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigOAuth2.ProtoReflect.Descriptor instead.
func (*ConfigOAuth2) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{25}
}

func (x *ConfigOAuth2) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *ConfigOAuth2) GetClientSecret() string {
	if x != nil && x.ClientSecret != nil {
		return *x.ClientSecret
	}
	return ""
}

func (x *ConfigOAuth2) GetClientSecretFile() string {
	if x != nil && x.ClientSecretFile != nil {
		return *x.ClientSecretFile
	}
	return ""
}

func (x *ConfigOAuth2) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *ConfigOAuth2) GetTokenUrl() string {
	if x != nil && x.TokenUrl != nil {
		return *x.TokenUrl
	}
	return ""
}

func (x *ConfigOAuth2) GetEndpointParams() map[string]string {
	if x != nil {
		return x.EndpointParams
	}
	return nil
}

func (x *ConfigOAuth2) GetTlsConfig() *ConfigTLSConfig {
	if x != nil {
		return x.TlsConfig
	}
	return nil
}

func (x *ConfigOAuth2) GetProxyConfig() *ConfigProxyConfig {
	if x != nil {
		return x.ProxyConfig
	}
	return nil
}

type ConfigProxyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyUrl             string            `protobuf:"bytes,1,opt,name=proxy_url,json=proxyUrl,proto3" json:"proxy_url,omitempty"`
	NoProxy              *string           `protobuf:"bytes,2,opt,name=no_proxy,json=noProxy,proto3,oneof" json:"no_proxy,omitempty"`
	ProxyFromEnvironment *bool             `protobuf:"varint,3,opt,name=proxy_from_environment,json=proxyFromEnvironment,proto3,oneof" json:"proxy_from_environment,omitempty"`
	ProxyConnectHeader   map[string]string `protobuf:"bytes,4,rep,name=proxy_connect_header,json=proxyConnectHeader,proto3" json:"proxy_connect_header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConfigProxyConfig) Reset() {
	*x = ConfigProxyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigProxyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigProxyConfig) ProtoMessage() {}

func (x *ConfigProxyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigProxyConfig.ProtoReflect.Descriptor instead.
func (*ConfigProxyConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{26}
}

func (x *ConfigProxyConfig) GetProxyUrl() string {
	if x != nil {
		return x.ProxyUrl
	}
	return ""
}

func (x *ConfigProxyConfig) GetNoProxy() string {
	if x != nil && x.NoProxy != nil {
		return *x.NoProxy
	}
	return ""
}

func (x *ConfigProxyConfig) GetProxyFromEnvironment() bool {
	if x != nil && x.ProxyFromEnvironment != nil {
		return *x.ProxyFromEnvironment
	}
	return false
}

func (x *ConfigProxyConfig) GetProxyConnectHeader() map[string]string {
	if x != nil {
		return x.ProxyConnectHeader
	}
	return nil
}

type ConfigTLSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ca                 *string `protobuf:"bytes,1,opt,name=ca,proto3,oneof" json:"ca,omitempty"`
	Cert               *string `protobuf:"bytes,2,opt,name=cert,proto3,oneof" json:"cert,omitempty"`
	Key                *string `protobuf:"bytes,3,opt,name=key,proto3,oneof" json:"key,omitempty"`
	CaFile             *string `protobuf:"bytes,4,opt,name=ca_file,json=caFile,proto3,oneof" json:"ca_file,omitempty"`
	CertFile           *string `protobuf:"bytes,5,opt,name=cert_file,json=certFile,proto3,oneof" json:"cert_file,omitempty"`
	KeyFile            *string `protobuf:"bytes,6,opt,name=key_file,json=keyFile,proto3,oneof" json:"key_file,omitempty"`
	ServerName         *string `protobuf:"bytes,7,opt,name=server_name,json=serverName,proto3,oneof" json:"server_name,omitempty"`
	InsecureSkipVerify *bool   `protobuf:"varint,8,opt,name=insecure_skip_verify,json=insecureSkipVerify,proto3,oneof" json:"insecure_skip_verify,omitempty"`
	MinVersion         *uint32 `protobuf:"varint,9,opt,name=min_version,json=minVersion,proto3,oneof" json:"min_version,omitempty"`
	MaxVersion         *uint32 `protobuf:"varint,10,opt,name=max_version,json=maxVersion,proto3,oneof" json:"max_version,omitempty"`
}

func (x *ConfigTLSConfig) Reset() {
	*x = ConfigTLSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigTLSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigTLSConfig) ProtoMessage() {}

func (x *ConfigTLSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigTLSConfig.ProtoReflect.Descriptor instead.
func (*ConfigTLSConfig) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{27}
}

func (x *ConfigTLSConfig) GetCa() string {
	if x != nil && x.Ca != nil {
		return *x.Ca
	}
	return ""
}

func (x *ConfigTLSConfig) GetCert() string {
	if x != nil && x.Cert != nil {
		return *x.Cert
	}
	return ""
}

func (x *ConfigTLSConfig) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *ConfigTLSConfig) GetCaFile() string {
	if x != nil && x.CaFile != nil {
		return *x.CaFile
	}
	return ""
}

func (x *ConfigTLSConfig) GetCertFile() string {
	if x != nil && x.CertFile != nil {
		return *x.CertFile
	}
	return ""
}

func (x *ConfigTLSConfig) GetKeyFile() string {
	if x != nil && x.KeyFile != nil {
		return *x.KeyFile
	}
	return ""
}

func (x *ConfigTLSConfig) GetServerName() string {
	if x != nil && x.ServerName != nil {
		return *x.ServerName
	}
	return ""
}

func (x *ConfigTLSConfig) GetInsecureSkipVerify() bool {
	if x != nil && x.InsecureSkipVerify != nil {
		return *x.InsecureSkipVerify
	}
	return false
}

func (x *ConfigTLSConfig) GetMinVersion() uint32 {
	if x != nil && x.MinVersion != nil {
		return *x.MinVersion
	}
	return 0
}

func (x *ConfigTLSConfig) GetMaxVersion() uint32 {
	if x != nil && x.MaxVersion != nil {
		return *x.MaxVersion
	}
	return 0
}

type Sigv4SigV4Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region    *string `protobuf:"bytes,1,opt,name=region,proto3,oneof" json:"region,omitempty"`
	AccessKey *string `protobuf:"bytes,2,opt,name=access_key,json=accessKey,proto3,oneof" json:"access_key,omitempty"`
	SecretKey *string `protobuf:"bytes,3,opt,name=secret_key,json=secretKey,proto3,oneof" json:"secret_key,omitempty"`
	Profile   *string `protobuf:"bytes,4,opt,name=profile,proto3,oneof" json:"profile,omitempty"`
	RoleArn   *string `protobuf:"bytes,5,opt,name=role_arn,json=roleArn,proto3,oneof" json:"role_arn,omitempty"`
}

func (x *Sigv4SigV4Config) Reset() {
	*x = Sigv4SigV4Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sigv4SigV4Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sigv4SigV4Config) ProtoMessage() {}

func (x *Sigv4SigV4Config) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sigv4SigV4Config.ProtoReflect.Descriptor instead.
func (*Sigv4SigV4Config) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP(), []int{28}
}

func (x *Sigv4SigV4Config) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *Sigv4SigV4Config) GetAccessKey() string {
	if x != nil && x.AccessKey != nil {
		return *x.AccessKey
	}
	return ""
}

func (x *Sigv4SigV4Config) GetSecretKey() string {
	if x != nil && x.SecretKey != nil {
		return *x.SecretKey
	}
	return ""
}

func (x *Sigv4SigV4Config) GetProfile() string {
	if x != nil && x.Profile != nil {
		return *x.Profile
	}
	return ""
}

func (x *Sigv4SigV4Config) GetRoleArn() string {
	if x != nil && x.RoleArn != nil {
		return *x.RoleArn
	}
	return ""
}

var File_github_com_rancher_opni_internal_alertmanager_receiver_proto protoreflect.FileDescriptor

var file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x22, 0xae, 0x07, 0x0a,
	0x08, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x44, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x65,
	0x72, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x64, 0x75, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x10, 0x70, 0x61, 0x67, 0x65, 0x72, 0x64, 0x75, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x6f, 0x70,
	0x73, 0x67, 0x65, 0x6e, 0x69, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x73, 0x47, 0x65, 0x6e, 0x69, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0f, 0x6f, 0x70, 0x73, 0x67, 0x65, 0x6e, 0x69, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x70, 0x75, 0x73, 0x68, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x50, 0x75, 0x73, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f,
	0x70, 0x75, 0x73, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12,
	0x4a, 0x0a, 0x11, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x6f, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72,
	0x4f, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x76, 0x69, 0x63, 0x74, 0x6f,
	0x72, 0x6f, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x73,
	0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x53, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x73, 0x6e, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x3e,
	0x0a, 0x0d, 0x77, 0x65, 0x62, 0x65, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0c, 0x77, 0x65, 0x62, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x44,
	0x0a, 0x0f, 0x6d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x53, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x6d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8d, 0x02,
	0x0a, 0x0d, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x44, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x54, 0x54, 0x50, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd6, 0x06,
	0x0a, 0x0b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a,
	0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x13, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x02, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x09,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x61, 0x75, 0x74,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x68,
	0x74, 0x6d, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x04, 0x68, 0x74, 0x6d,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x0a, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x54, 0x6c, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x4c, 0x53,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x74, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x74, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x22, 0x4e, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x84, 0x02, 0x0a, 0x0d, 0x4d, 0x53, 0x54, 0x65, 0x61,
	0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45,
	0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x22, 0x4c, 0x0a,
	0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x28, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x22, 0xeb, 0x06, 0x0a, 0x0e,
	0x4f, 0x70, 0x73, 0x47, 0x65, 0x6e, 0x69, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44,
	0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x54, 0x54, 0x50, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0a, 0x68, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x07, 0x61,
	0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x70, 0x69,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x73,
	0x47, 0x65, 0x6e, 0x69, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x45,
	0x0a, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x4f, 0x70, 0x73, 0x47, 0x65, 0x6e, 0x69, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a,
	0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x88, 0x01,
	0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70,
	0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x61, 0x67,
	0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x17, 0x4f, 0x70,
	0x73, 0x47, 0x65, 0x6e, 0x69, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xf2, 0x07, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x72, 0x64, 0x75, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a,
	0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b,
	0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x1b, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x64, 0x75,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x34,
	0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x72, 0x64, 0x75, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x64, 0x75, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0b, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x1a, 0x3a,
	0x0a, 0x0c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x70, 0x0a, 0x0e, 0x50, 0x61, 0x67, 0x65,
	0x72, 0x64, 0x75, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x72,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x73, 0x72, 0x63, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x61, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x03, 0x61, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x72, 0x65, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x68, 0x72, 0x65, 0x66, 0x88, 0x01,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x72, 0x63, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x6c,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x72, 0x65, 0x66, 0x22, 0x53, 0x0a, 0x0d, 0x50, 0x61,
	0x67, 0x65, 0x72, 0x64, 0x75, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x17, 0x0a, 0x04, 0x68,
	0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x68, 0x72, 0x65,
	0x66, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x68, 0x72, 0x65, 0x66, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x22,
	0xe6, 0x05, 0x0a, 0x0e, 0x50, 0x75, 0x73, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x44, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1e, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x72, 0x6c, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x08, 0x75,
	0x72, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x05, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x0b, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0c,
	0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68,
	0x74, 0x6d, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x04, 0x68, 0x74, 0x6d,
	0x6c, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65,
	0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75,
	0x72, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0xf2, 0x04, 0x0a, 0x09, 0x53, 0x4e, 0x53,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x0b,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x61, 0x70, 0x69, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x69, 0x67, 0x76, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x53, 0x69, 0x67, 0x76, 0x34, 0x53, 0x69, 0x67, 0x56, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x05, 0x73, 0x69, 0x67, 0x76, 0x34, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x5f, 0x61, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x41, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x61, 0x72, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x61, 0x72, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9c, 0x02,
	0x0a, 0x0b, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xca, 0x08, 0x0a,
	0x0b, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x0e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x54, 0x54,
	0x50, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x68,
	0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x55,
	0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x55,
	0x72, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x70, 0x72, 0x65, 0x74, 0x65, 0x78, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x26, 0x0a,
	0x0c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52,
	0x09, 0x69, 0x63, 0x6f, 0x6e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0d, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0e, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0f, 0x52, 0x08, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x10, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x72, 0x6b, 0x64, 0x77, 0x6e, 0x5f,
	0x69, 0x6e, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x72, 0x6b, 0x64, 0x77, 0x6e,
	0x49, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x75, 0x72, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x65, 0x74, 0x65, 0x78, 0x74,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66,
	0x6f, 0x6f, 0x74, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x16, 0x53, 0x6c,
	0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x6b, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x6f, 0x6b, 0x54,
	0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6b, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x22, 0x7b,
	0x0a, 0x0a, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x19, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x02, 0x52, 0x05, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x22, 0x80, 0x04, 0x0a, 0x0e,
	0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44,
	0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x54, 0x54, 0x50, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0a, 0x68, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x61,
	0x70, 0x69, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70,
	0x69, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x09, 0x62, 0x6f, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0c, 0x62, 0x6f, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x02, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38,
	0x0a, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52,
	0x14, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62,
	0x6f, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xea,
	0x05, 0x0a, 0x0f, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x44, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1c, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0c, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a,
	0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x11, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x56,
	0x69, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x3f,
	0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x22, 0x88, 0x02, 0x0a, 0x0b,
	0x57, 0x65, 0x62, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x0e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x45, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x54, 0x54, 0x50,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x68, 0x74,
	0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x55, 0x72,
	0x6c, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x22, 0x8e, 0x02, 0x0a, 0x0d, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45,
	0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x75, 0x72, 0x6c,
	0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x09, 0x6d,
	0x61, 0x78, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x75, 0x72, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x22, 0xa0, 0x04, 0x0a, 0x0c, 0x57, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45,
	0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x61, 0x70, 0x69,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x63, 0x6f, 0x72,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x63, 0x6f,
	0x72, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x55, 0x72, 0x6c, 0x12,
	0x1c, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x06, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x07, 0x74, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a,
	0x06, 0x74, 0x6f, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x54, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x07, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x72, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x6f, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x61, 0x67, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x13, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x22, 0xa9, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xd2, 0x04, 0x0a,
	0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x47, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x06, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x52, 0x06, 0x6f, 0x61, 0x75, 0x74,
	0x68, 0x32, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x62, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0a, 0x74,
	0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09,
	0x74, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x10, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x03, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x74, 0x74, 0x70, 0x32, 0x88, 0x01,
	0x01, 0x12, 0x41, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70,
	0x32, 0x22, 0xa9, 0x04, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x0f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32,
	0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x4c,
	0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x74, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x41, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x41, 0x0a, 0x13, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0xe5, 0x02,
	0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x72, 0x6c,
	0x12, 0x1e, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x6f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x01, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x69, 0x0a, 0x14, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x45, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xe7, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x13, 0x0a, 0x02, 0x63, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x63, 0x61, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04,
	0x63, 0x65, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x63, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x06, 0x63, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x08, 0x63, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x07, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x6b,
	0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d,
	0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x08, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x63, 0x61, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xf8, 0x01, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x76, 0x34, 0x53, 0x69, 0x67, 0x56, 0x34, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x61, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x72, 0x6f,
	0x6c, 0x65, 0x41, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72,
	0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescOnce sync.Once
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescData = file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDesc
)

func file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescGZIP() []byte {
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescOnce.Do(func() {
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescData)
	})
	return file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDescData
}

var file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_github_com_rancher_opni_internal_alertmanager_receiver_proto_goTypes = []interface{}{
	(*Receiver)(nil),                // 0: alertmanager.Receiver
	(*DiscordConfig)(nil),           // 1: alertmanager.DiscordConfig
	(*EmailConfig)(nil),             // 2: alertmanager.EmailConfig
	(*HostPort)(nil),                // 3: alertmanager.HostPort
	(*MSTeamsConfig)(nil),           // 4: alertmanager.MSTeamsConfig
	(*NotifierConfig)(nil),          // 5: alertmanager.NotifierConfig
	(*OpsGenieConfig)(nil),          // 6: alertmanager.OpsGenieConfig
	(*OpsGenieConfigResponder)(nil), // 7: alertmanager.OpsGenieConfigResponder
	(*PagerdutyConfig)(nil),         // 8: alertmanager.PagerdutyConfig
	(*PagerdutyImage)(nil),          // 9: alertmanager.PagerdutyImage
	(*PagerdutyLink)(nil),           // 10: alertmanager.PagerdutyLink
	(*PushoverConfig)(nil),          // 11: alertmanager.PushoverConfig
	(*SNSConfig)(nil),               // 12: alertmanager.SNSConfig
	(*SlackAction)(nil),             // 13: alertmanager.SlackAction
	(*SlackConfig)(nil),             // 14: alertmanager.SlackConfig
	(*SlackConfirmationField)(nil),  // 15: alertmanager.SlackConfirmationField
	(*SlackField)(nil),              // 16: alertmanager.SlackField
	(*TelegramConfig)(nil),          // 17: alertmanager.TelegramConfig
	(*VictorOpsConfig)(nil),         // 18: alertmanager.VictorOpsConfig
	(*WebexConfig)(nil),             // 19: alertmanager.WebexConfig
	(*WebhookConfig)(nil),           // 20: alertmanager.WebhookConfig
	(*WechatConfig)(nil),            // 21: alertmanager.WechatConfig
	(*ConfigAuthorization)(nil),     // 22: alertmanager.ConfigAuthorization
	(*ConfigBasicAuth)(nil),         // 23: alertmanager.ConfigBasicAuth
	(*ConfigHTTPClientConfig)(nil),  // 24: alertmanager.ConfigHTTPClientConfig
	(*ConfigOAuth2)(nil),            // 25: alertmanager.ConfigOAuth2
	(*ConfigProxyConfig)(nil),       // 26: alertmanager.ConfigProxyConfig
	(*ConfigTLSConfig)(nil),         // 27: alertmanager.ConfigTLSConfig
	(*Sigv4SigV4Config)(nil),        // 28: alertmanager.Sigv4SigV4Config
	nil,                             // 29: alertmanager.EmailConfig.HeadersEntry
	nil,                             // 30: alertmanager.OpsGenieConfig.DetailsEntry
	nil,                             // 31: alertmanager.PagerdutyConfig.DetailsEntry
	nil,                             // 32: alertmanager.SNSConfig.AttributesEntry
	nil,                             // 33: alertmanager.VictorOpsConfig.CustomFieldsEntry
	nil,                             // 34: alertmanager.ConfigOAuth2.EndpointParamsEntry
	nil,                             // 35: alertmanager.ConfigProxyConfig.ProxyConnectHeaderEntry
}
var file_github_com_rancher_opni_internal_alertmanager_receiver_proto_depIdxs = []int32{
	1,  // 0: alertmanager.Receiver.discord_configs:type_name -> alertmanager.DiscordConfig
	2,  // 1: alertmanager.Receiver.email_configs:type_name -> alertmanager.EmailConfig
	8,  // 2: alertmanager.Receiver.pagerduty_configs:type_name -> alertmanager.PagerdutyConfig
	14, // 3: alertmanager.Receiver.slack_configs:type_name -> alertmanager.SlackConfig
	20, // 4: alertmanager.Receiver.webhook_configs:type_name -> alertmanager.WebhookConfig
	6,  // 5: alertmanager.Receiver.opsgenie_configs:type_name -> alertmanager.OpsGenieConfig
	21, // 6: alertmanager.Receiver.wechat_configs:type_name -> alertmanager.WechatConfig
	11, // 7: alertmanager.Receiver.pushover_configs:type_name -> alertmanager.PushoverConfig
	18, // 8: alertmanager.Receiver.victorops_configs:type_name -> alertmanager.VictorOpsConfig
	12, // 9: alertmanager.Receiver.sns_configs:type_name -> alertmanager.SNSConfig
	17, // 10: alertmanager.Receiver.telegram_configs:type_name -> alertmanager.TelegramConfig
	19, // 11: alertmanager.Receiver.webex_configs:type_name -> alertmanager.WebexConfig
	4,  // 12: alertmanager.Receiver.msteams_configs:type_name -> alertmanager.MSTeamsConfig
	5,  // 13: alertmanager.DiscordConfig.NotifierConfig:type_name -> alertmanager.NotifierConfig
	24, // 14: alertmanager.DiscordConfig.http_config:type_name -> alertmanager.ConfigHTTPClientConfig
	5,  // 15: alertmanager.EmailConfig.NotifierConfig:type_name -> alertmanager.NotifierConfig
	3,  // 16: alertmanager.EmailConfig.smarthost:type_name -> alertmanager.HostPort
	29, // 17: alertmanager.EmailConfig.headers:type_name -> alertmanager.EmailConfig.HeadersEntry
	27, // 18: alertmanager.EmailConfig.tls_config:type_name -> alertmanager.ConfigTLSConfig
	5,  // 19: alertmanager.MSTeamsConfig.NotifierConfig:type_name -> alertmanager.NotifierConfig
	24, // 20: alertmanager.MSTeamsConfig.http_config:type_name -> alertmanager.ConfigHTTPClientConfig
	5,  // 21: alertmanager.OpsGenieConfig.NotifierConfig:type_name -> alertmanager.NotifierConfig
	24, // 22: alertmanager.OpsGenieConfig.http_config:type_name -> alertmanager.ConfigHTTPClientConfig
	30, // 23: alertmanager.OpsGenieConfig.details:type_name -> alertmanager.OpsGenieConfig.DetailsEntry
	7,  // 24: alertmanager.OpsGenieConfig.responders:type_name -> alertmanager.OpsGenieConfigResponder
	5,  // 25: alertmanager.PagerdutyConfig.NotifierConfig:type_name -> alertmanager.NotifierConfig
	24, // 26: alertmanager.PagerdutyConfig.http_config:type_name -> alertmanager.ConfigHTTPClientConfig
	31, // 27: alertmanager.PagerdutyConfig.details:type_name -> alertmanager.PagerdutyConfig.DetailsEntry
	9,  // 28: alertmanager.PagerdutyConfig.images:type_name -> alertmanager.PagerdutyImage
	10, // 29: alertmanager.PagerdutyConfig.links:type_name -> alertmanager.PagerdutyLink
	5,  // 30: alertmanager.PushoverConfig.NotifierConfig:type_name -> alertmanager.NotifierConfig
	24, // 31: alertmanager.PushoverConfig.http_config:type_name -> alertmanager.ConfigHTTPClientConfig
	5,  // 32: alertmanager.SNSConfig.NotifierConfig:type_name -> alertmanager.NotifierConfig
	24, // 33: alertmanager.SNSConfig.http_config:type_name -> alertmanager.ConfigHTTPClientConfig
	28, // 34: alertmanager.SNSConfig.sigv4:type_name -> alertmanager.Sigv4SigV4Config
	32, // 35: alertmanager.SNSConfig.attributes:type_name -> alertmanager.SNSConfig.AttributesEntry
	15, // 36: alertmanager.SlackAction.confirm:type_name -> alertmanager.SlackConfirmationField
	5,  // 37: alertmanager.SlackConfig.NotifierConfig:type_name -> alertmanager.NotifierConfig
	24, // 38: alertmanager.SlackConfig.http_config:type_name -> alertmanager.ConfigHTTPClientConfig
	16, // 39: alertmanager.SlackConfig.fields:type_name -> alertmanager.SlackField
	13, // 40: alertmanager.SlackConfig.actions:type_name -> alertmanager.SlackAction
	5,  // 41: alertmanager.TelegramConfig.NotifierConfig:type_name -> alertmanager.NotifierConfig
	24, // 42: alertmanager.TelegramConfig.http_config:type_name -> alertmanager.ConfigHTTPClientConfig
	5,  // 43: alertmanager.VictorOpsConfig.NotifierConfig:type_name -> alertmanager.NotifierConfig
	24, // 44: alertmanager.VictorOpsConfig.http_config:type_name -> alertmanager.ConfigHTTPClientConfig
	33, // 45: alertmanager.VictorOpsConfig.custom_fields:type_name -> alertmanager.VictorOpsConfig.CustomFieldsEntry
	5,  // 46: alertmanager.WebexConfig.NotifierConfig:type_name -> alertmanager.NotifierConfig
	24, // 47: alertmanager.WebexConfig.http_config:type_name -> alertmanager.ConfigHTTPClientConfig
	5,  // 48: alertmanager.WebhookConfig.NotifierConfig:type_name -> alertmanager.NotifierConfig
	24, // 49: alertmanager.WebhookConfig.http_config:type_name -> alertmanager.ConfigHTTPClientConfig
	5,  // 50: alertmanager.WechatConfig.NotifierConfig:type_name -> alertmanager.NotifierConfig
	24, // 51: alertmanager.WechatConfig.http_config:type_name -> alertmanager.ConfigHTTPClientConfig
	23, // 52: alertmanager.ConfigHTTPClientConfig.basic_auth:type_name -> alertmanager.ConfigBasicAuth
	22, // 53: alertmanager.ConfigHTTPClientConfig.authorization:type_name -> alertmanager.ConfigAuthorization
	25, // 54: alertmanager.ConfigHTTPClientConfig.oauth2:type_name -> alertmanager.ConfigOAuth2
	27, // 55: alertmanager.ConfigHTTPClientConfig.tls_config:type_name -> alertmanager.ConfigTLSConfig
	26, // 56: alertmanager.ConfigHTTPClientConfig.ProxyConfig:type_name -> alertmanager.ConfigProxyConfig
	34, // 57: alertmanager.ConfigOAuth2.endpoint_params:type_name -> alertmanager.ConfigOAuth2.EndpointParamsEntry
	27, // 58: alertmanager.ConfigOAuth2.tls_config:type_name -> alertmanager.ConfigTLSConfig
	26, // 59: alertmanager.ConfigOAuth2.ProxyConfig:type_name -> alertmanager.ConfigProxyConfig
	35, // 60: alertmanager.ConfigProxyConfig.proxy_connect_header:type_name -> alertmanager.ConfigProxyConfig.ProxyConnectHeaderEntry
	61, // [61:61] is the sub-list for method output_type
	61, // [61:61] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { file_github_com_rancher_opni_internal_alertmanager_receiver_proto_init() }
func file_github_com_rancher_opni_internal_alertmanager_receiver_proto_init() {
	if File_github_com_rancher_opni_internal_alertmanager_receiver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Receiver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscordConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSTeamsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifierConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpsGenieConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpsGenieConfigResponder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagerdutyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagerdutyImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagerdutyLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushoverConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackConfirmationField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelegramConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VictorOpsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebexConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigAuthorization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigBasicAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigHTTPClientConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigOAuth2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigProxyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigTLSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sigv4SigV4Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes[28].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_rancher_opni_internal_alertmanager_receiver_proto_goTypes,
		DependencyIndexes: file_github_com_rancher_opni_internal_alertmanager_receiver_proto_depIdxs,
		MessageInfos:      file_github_com_rancher_opni_internal_alertmanager_receiver_proto_msgTypes,
	}.Build()
	File_github_com_rancher_opni_internal_alertmanager_receiver_proto = out.File
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_rawDesc = nil
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_goTypes = nil
	file_github_com_rancher_opni_internal_alertmanager_receiver_proto_depIdxs = nil
}
