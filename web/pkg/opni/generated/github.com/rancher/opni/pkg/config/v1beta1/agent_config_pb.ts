// @generated by protoc-gen-es v1.3.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file github.com/rancher/opni/pkg/config/v1beta1/agent_config.proto (package config.v1beta1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message config.v1beta1.RulesSpec
 */
export class RulesSpec extends Message<RulesSpec> {
  /**
   * @generated from field: config.v1beta1.DiscoverySpec discovery = 1;
   */
  discovery?: DiscoverySpec;

  constructor(data?: PartialMessage<RulesSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "config.v1beta1.RulesSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "discovery", kind: "message", T: DiscoverySpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RulesSpec {
    return new RulesSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RulesSpec {
    return new RulesSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RulesSpec {
    return new RulesSpec().fromJsonString(jsonString, options);
  }

  static equals(a: RulesSpec | PlainMessage<RulesSpec> | undefined, b: RulesSpec | PlainMessage<RulesSpec> | undefined): boolean {
    return proto3.util.equals(RulesSpec, a, b);
  }
}

/**
 * @generated from message config.v1beta1.DiscoverySpec
 */
export class DiscoverySpec extends Message<DiscoverySpec> {
  /**
   * @generated from field: config.v1beta1.PrometheusRulesSpec prometheusRules = 1;
   */
  prometheusRules?: PrometheusRulesSpec;

  /**
   * @generated from field: config.v1beta1.FilesystemRulesSpec filesystem = 2;
   */
  filesystem?: FilesystemRulesSpec;

  /**
   * @generated from field: optional string interval = 3;
   */
  interval?: string;

  constructor(data?: PartialMessage<DiscoverySpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "config.v1beta1.DiscoverySpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prometheusRules", kind: "message", T: PrometheusRulesSpec },
    { no: 2, name: "filesystem", kind: "message", T: FilesystemRulesSpec },
    { no: 3, name: "interval", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscoverySpec {
    return new DiscoverySpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscoverySpec {
    return new DiscoverySpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscoverySpec {
    return new DiscoverySpec().fromJsonString(jsonString, options);
  }

  static equals(a: DiscoverySpec | PlainMessage<DiscoverySpec> | undefined, b: DiscoverySpec | PlainMessage<DiscoverySpec> | undefined): boolean {
    return proto3.util.equals(DiscoverySpec, a, b);
  }
}

/**
 * @generated from message config.v1beta1.PrometheusRulesSpec
 */
export class PrometheusRulesSpec extends Message<PrometheusRulesSpec> {
  /**
   * Namespaces to search for rules in. If empty, will search all accessible
   * namespaces.
   *
   * @generated from field: repeated string searchNamespaces = 1;
   */
  searchNamespaces: string[] = [];

  /**
   * Kubeconfig to use for rule discovery. If nil, will use the in-cluster
   * kubeconfig.
   *
   * @generated from field: optional string kubeconfig = 2;
   */
  kubeconfig?: string;

  constructor(data?: PartialMessage<PrometheusRulesSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "config.v1beta1.PrometheusRulesSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "searchNamespaces", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "kubeconfig", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrometheusRulesSpec {
    return new PrometheusRulesSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrometheusRulesSpec {
    return new PrometheusRulesSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrometheusRulesSpec {
    return new PrometheusRulesSpec().fromJsonString(jsonString, options);
  }

  static equals(a: PrometheusRulesSpec | PlainMessage<PrometheusRulesSpec> | undefined, b: PrometheusRulesSpec | PlainMessage<PrometheusRulesSpec> | undefined): boolean {
    return proto3.util.equals(PrometheusRulesSpec, a, b);
  }
}

/**
 * @generated from message config.v1beta1.FilesystemRulesSpec
 */
export class FilesystemRulesSpec extends Message<FilesystemRulesSpec> {
  /**
   * @generated from field: repeated string pathExpressions = 1;
   */
  pathExpressions: string[] = [];

  constructor(data?: PartialMessage<FilesystemRulesSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "config.v1beta1.FilesystemRulesSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pathExpressions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FilesystemRulesSpec {
    return new FilesystemRulesSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FilesystemRulesSpec {
    return new FilesystemRulesSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FilesystemRulesSpec {
    return new FilesystemRulesSpec().fromJsonString(jsonString, options);
  }

  static equals(a: FilesystemRulesSpec | PlainMessage<FilesystemRulesSpec> | undefined, b: FilesystemRulesSpec | PlainMessage<FilesystemRulesSpec> | undefined): boolean {
    return proto3.util.equals(FilesystemRulesSpec, a, b);
  }
}

