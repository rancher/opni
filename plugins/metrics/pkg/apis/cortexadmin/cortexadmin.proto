syntax = "proto3";
option go_package = "github.com/rancher/opni/plugins/metrics/pkg/apis/cortexadmin";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "github.com/rancher/opni/plugins/metrics/pkg/apis/cortexadmin/status.proto";

package cortexadmin;

service CortexAdmin {
  rpc AllUserStats(google.protobuf.Empty) returns (UserIDStatsList) {
    option (google.api.http) = {
      get: "/all_user_stats"
    };
  }
  rpc WriteMetrics(WriteRequest) returns (WriteResponse) {
    option (google.api.http) = {
      post: "/write_metrics"
      body: "*"
    };
  }
  rpc Query(QueryRequest) returns (QueryResponse) {
    option (google.api.http) = {
      get: "/query"
      additional_bindings {
        post: "/query"
        body: "*"
      }
    };
  }
  rpc QueryRange(QueryRangeRequest) returns (QueryResponse) {
    option (google.api.http) = {
      get: "/query_range"
      additional_bindings {
        post: "/query_range"
        body: "*"
      }
    };
  }
  rpc GetRule(RuleRequest) returns (QueryResponse) {
    option (google.api.http) = {
      get: "/rules/{groupName}"
    };
  }

  rpc ListRules(Cluster) returns (QueryResponse) {
    option (google.api.http) = {
      get: "/rules"
    };
  }

  rpc LoadRules(PostRuleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/rules"
    };
  }
  rpc DeleteRule(RuleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/rules/{groupName}"
    };
  }

  rpc FlushBlocks(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/flush_blocks"
    };
  }
  // list all metrics
  rpc GetSeriesMetrics(SeriesRequest) returns (SeriesInfoList) {
    option (google.api.http) = {
      get: "/series/metadata"
    };
  }

  rpc GetMetricLabelSets(LabelRequest) returns (MetricLabels) {
    option (google.api.http) = {
      get: "/series/labels"
    };
  }

  rpc GetCortexStatus(google.protobuf.Empty) returns (CortexStatus) {
    option (google.api.http) = {
      get: "/status"
    };
  }
  
  rpc GetCortexConfig(ConfigRequest) returns (ConfigResponse) {
    option (google.api.http) = {
      get: "/config"
    };
  }
}

message Cluster {
  string clusterId = 1;
}

message SeriesRequest {
  string tenant = 1;
  string jobId = 2;
}

message LabelRequest {
  string tenant = 1;
  string jobId = 2;
  string metricName = 3;
}

message MetricLabels {
  repeated LabelSet items =1;
}

message LabelSet {
  string name = 1;
  repeated string items = 2;
}
message SeriesMetadata {
  string description = 1;
  string type = 2;
  string unit =3;
}

message SeriesInfo{
  string seriesName = 1;
  SeriesMetadata metadata = 2;
}

message SeriesInfoList {
  repeated SeriesInfo items = 1;
}

message UserIDStatsList {
  repeated UserIDStats items = 2;
}

message UserIDStats {
  string userID = 1;
  double ingestionRate = 2;
  uint64 numSeries = 3;
  double APIIngestionRate = 4; // title case to match cortex
  double RuleIngestionRate = 5; // title case to match cortex
}

message WriteRequest {
  string clusterID = 1;
  repeated TimeSeries timeseries = 2;
  repeated MetricMetadata metadata = 3;
}

message WriteResponse {}

message TimeSeries {
  repeated Label labels = 1;
  repeated Sample samples = 2;
  repeated Exemplar exemplars = 3;
}

message Label {
  string name = 1;
  string value = 2;
}

message Sample {
  int64 timestampMs = 1;
  double value = 2;
}

message Exemplar {
  repeated Label labels = 1;
  double value = 2;
  int64 timestampMs = 3;
}

message MetricMetadata {
  enum MetricType {
    UNKNOWN        = 0;
    COUNTER        = 1;
    GAUGE          = 2;
    HISTOGRAM      = 3;
    GAUGEHISTOGRAM = 4;
    SUMMARY        = 5;
    INFO           = 6;
    STATESET       = 7;
  }

  MetricType type = 1;
  string metricFamilyName = 2;
  string help = 4;
  string unit = 5;
}

message QueryRequest {
  repeated string tenants = 1;
  string query = 2;
}

message QueryRangeRequest {
  repeated string tenants = 1;
  string query = 2;
  google.protobuf.Timestamp start = 3;
  google.protobuf.Timestamp end = 4;
  google.protobuf.Duration step = 5;
}

message RuleRequest {
  string clusterId = 1;
  string groupName = 2;
}

message PostRuleRequest{
  string clusterId = 1;
  string yamlContent = 2;
}

message QueryResponse {
  bytes data = 2;
}

message ConfigRequest {
  repeated string configModes = 1;
}

message ConfigResponse {
  repeated string configYaml = 4;
}