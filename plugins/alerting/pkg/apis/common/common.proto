syntax = "proto3";
option go_package = "github.com/rancher/opni/plugins/alerting/pkg/apis/common";

import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "google/api/http.proto";
import "google/api/annotations.proto";
import "google/rpc/status.proto";

import "github.com/rancher/opni/pkg/apis/core/v1/core.proto";

package common;

// ------------------ CONDITION ------------------

enum Severity {
  INFO = 0;
  WARNING = 1;
  ERROR = 2;
  CRITICAL = 3;
}

message AlertCondition {
  string name = 1;
  string description = 2;
  repeated string labels = 3;
  Severity severity = 4;
  AlertTypeDetails alertType = 5;

  optional string notificationId = 6;
  EndpointImplementation details = 7;
  // Set & Unset via the silence API
  SilenceInfo silence = 8;
  // https://github.com/rancher/opni-metrics-service/blob/main/metric-forecasting/metric_anomaly_detector.py#L154
  // bool anomalyDetection = 9;
}

enum AlertType {
  // Reserved for opni-alerting internal use
  SYSTEM = 0;
  // Ready for UI use
  KUBE_STATE = 1;
  // Unimplemented
  COMPOSITION = 2;
  // Unimplemented
  CONTROL_FLOW = 3;
}

enum CompositionAction {
  AND = 0;
  OR = 1;
}

enum ControlFlowAction {
  IF_THEN = 0;
  IF_NOT_THEN = 1;
}

enum AlertConditionState {
  UNSPECIFIED = 0;
  OK = 1;
  FIRING = 2;
  SILENCED = 3;
}

message AlertDetailChoicesRequest {
  AlertType alertType = 1;
}

message AlertDetailChoicesResponse {
  repeated AlertTypeDetails choices = 1;
}

message AlertTypeDetails {
  oneof type {
    // agent disconnect : golden signal -> errors
    AlertConditionSystem system = 1;
    // kube state : golden signal -> errors
    AlertConditionKubeState kubeState = 2;
    AlertConditionComposition composition = 3;
    AlertConditionControlFlow controlFlow = 4;
  }
}

message ListAlertTypeDetails {
  oneof type {
    ListAlertConditionSystem system = 1;
    ListAlertConditionKubeState kubeState = 2;
    ListAlertConditionComposition composition = 3;
    ListAlertConditionControlFlow controlFlow = 4;
  }
}

// Reserved for opni-alerting internal use
message AlertConditionSystem {}

message ListAlertConditionSystem {}

message AlertConditionKubeState {
  string clusterId = 1;
  // must be one of the listed kube objects
  string objectType = 2;
  // kubernetes object name
  string objectName = 3;
  // kubernetes namespace
  string namespace = 4;
  // must be one of the listed kube states
  string state = 5;
  google.protobuf.Duration for = 6;
}

// cluster --> resourceType --> namespace --> resourceName
message ListAlertConditionKubeState {
  map<string, KubeObjectGroups> clusters = 1;
  repeated string states = 2;
  repeated google.protobuf.Duration fors = 3;
}

message ObjectList {
  repeated string objects = 1;
}

message NamespaceObjects {
  map<string, ObjectList> namespaces = 1;
}

message KubeObjectGroups {
  map<string, NamespaceObjects> resourceTypes = 1;
}

message ListSelectAlertInfo {
  AlertType alertType = 1;
}

message AlertConditionList {
  repeated AlertConditionWithId items = 1;
}

message AlertConditionComposition {
  CompositionAction action = 1;
  core.Reference x = 2;
  core.Reference y = 3;
}

message ListAlertConditionComposition {
  repeated core.Reference x = 1;
  repeated core.Reference y = 2;
}

message AlertConditionControlFlow {
  ControlFlowAction action = 1;
  core.Reference x = 2;
  core.Reference y = 3;
  google.protobuf.Duration for = 4;
}

message ListAlertConditionControlFlow {
  repeated core.Reference x = 1;
  repeated core.Reference y = 2;
  repeated google.protobuf.Duration fors = 3;
}

message AlertConditionWithId {
  core.Reference id = 1;
  AlertCondition alertCondition = 2;
}

message ListAlertConditionRequest {}

message UpdateAlertConditionRequest {
  core.Reference id = 1;
  AlertCondition updateAlert = 2;
}

message PreviewAlertConditionRequest {}

message PreviewAlertConditionResponse {}

message SilenceRequest {
  core.Reference conditionId = 1;
  google.protobuf.Duration duration = 2;
}

message SilenceInfo {
  string silenceId = 1;
  google.protobuf.Timestamp startsAt = 2;
  google.protobuf.Timestamp endsAt = 3;
}

message TemplatesResponse {
  repeated string template = 1;
}

message AlertStatusResponse {
  AlertConditionState state = 1;
}

message AlertForest {
  ControlFlowAction action = 1;
}

message AlertTree {
  AlertTreeNode root = 1;
}

message AlertTreeNode {
  oneof condtion {
    AlertConditionWithId item = 1;
  }
  AlertTreeNode left = 2;
  AlertTreeNode right = 3;
}

// ------------------ ENDPOINT ------------------

message EndpointImplementation {
  // title of the alert (required)
  string title = 1;
  // body message of the alert (required)
  string body = 2;
  // initial delay before firing the alert (optional) (default=10s)
  optional google.protobuf.Duration initialDelay = 3;
  // how often to resend alert messages on active alerts (default =10s)
  optional google.protobuf.Duration repeatInterval = 4;
  // How long to wait before sending notifications on new condition that has
  // already fired recently (default= 10m)
  optional google.protobuf.Duration throttlingDuration = 5;
  // send a notification when the alert is no longer firing? yes/no (default =
  // no)
  optional bool sendResolved = 6;
}

// TODO: include general configs such as repeat interval, throttling via
// group_wait, group_interval, etc
message CreateImplementation {
  core.Reference endpointId = 1;
  core.Reference conditionId = 2;
  EndpointImplementation implementation = 3;
}

message AlertEndpoint {
  string name = 1;
  string description = 2;
  oneof endpoint {
    SlackEndpoint slack = 4;
    EmailEndpoint email = 5;
    WebhookEndpoint webhook = 7;
  }
}

message SlackEndpoint {
  string webhookUrl = 1;
  string channel = 2;
}

message EmailEndpoint {
  // email recipient
  string to = 1;
  // smtp server sender email
  optional string smtpFrom = 2;
  // smtp server host & port
  optional string smtpSmartHost = 3;
  // smtp server username
  optional string smtpAuthUsername = 4;
  // smtp server identity
  optional string smtpAuthIdentity = 5;
  // smtp server password
  optional string smtpAuthPassword = 6;
  // does SMTP require TSL : yes or no
  optional bool smtpRequireTLS = 7;
}


message WebhookEndpoint {
  string url = 1;
}

message AlertEndpointList {
  repeated AlertEndpointWithId items = 1;
}

message AlertEndpointWithId {
  AlertEndpoint endpoint = 1;
  core.Reference id = 2;
}

message ListAlertEndpointsRequest {}
message UpdateAlertEndpointRequest {
  core.Reference id = 1;
  AlertEndpoint updateAlert = 2;
}

message TestAlertEndpointRequest {
  AlertEndpoint endpointInfo = 1;
  EndpointImplementation impl = 2;
}

message TestAlertEndpointResponse {}

// ------------------ LOG ------------------

message ListAlertLogRequest {
  repeated string labels = 1;
  uint64 limit = 2;
  google.protobuf.Timestamp startTimestamp = 3;
  google.protobuf.Timestamp endTimestamp = 4;
}

message UpdateAlertLogRequest {
  string id = 1;
  core.AlertLog UpdateAlert = 2;
}

message InformativeAlertLog {
  core.Reference conditionId = 1;
  AlertCondition condition = 2;
  core.AlertLog log = 3;
}

message InformativeAlertLogList {
  repeated InformativeAlertLog items = 1;
}

message TriggerAlertsRequest {
  core.Reference conditionId = 1;
  map<string, string> annotations = 2;
}

message TriggerAlertsResponse {}