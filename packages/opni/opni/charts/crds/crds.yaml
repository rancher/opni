---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.13.0}, name: alertingclusters.core.opni.io}, spec: {group: core.opni.io, names: {kind: AlertingCluster, listKind: AlertingClusterList, plural: alertingclusters, singular: alertingcluster}, scope: Namespaced, versions: [{name: v1beta1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {alertmanager: {properties: {deployConf: {type: string}, enable: {type: boolean}, image: {properties: {image: {type: string}, imagePullPolicy: {type: string}, imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}}, type: object}, logLevel: {type: string}, workloads: {properties: {affinity: {properties: {nodeAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {preference: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, weight: {format: int32, type: integer}}, required: [preference, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {properties: {nodeSelectorTerms: {items: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, type: array}}, required: [nodeSelectorTerms], type: object, x-kubernetes-map-type: atomic}}, type: object}, podAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}, podAntiAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}}, type: object}, emptyDir: {properties: {medium: {type: string}, sizeLimit: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, extraArgs: {items: {type: string}, type: array}, extraEnvVars: {items: {properties: {name: {type: string}, value: {type: string}, valueFrom: {properties: {configMapKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object, x-kubernetes-map-type: atomic}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object, x-kubernetes-map-type: atomic}, secretKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}}, required: [name], type: object}, type: array}, extraVolumeSpec: {items: {properties: {volume: {properties: {awsElasticBlockStore: {properties: {fsType: {type: string}, partition: {format: int32, type: integer}, readOnly: {type: boolean}, volumeID: {type: string}}, required: [volumeID], type: object}, azureDisk: {properties: {cachingMode: {type: string}, diskName: {type: string}, diskURI: {type: string}, fsType: {type: string}, kind: {type: string}, readOnly: {type: boolean}}, required: [diskName, diskURI], type: object}, azureFile: {properties: {readOnly: {type: boolean}, secretName: {type: string}, shareName: {type: string}}, required: [secretName, shareName], type: object}, cephfs: {properties: {monitors: {items: {type: string}, type: array}, path: {type: string}, readOnly: {type: boolean}, secretFile: {type: string}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, user: {type: string}}, required: [monitors], type: object}, cinder: {properties: {fsType: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, volumeID: {type: string}}, required: [volumeID], type: object}, configMap: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, name: {type: string}, optional: {type: boolean}}, type: object, x-kubernetes-map-type: atomic}, csi: {properties: {driver: {type: string}, fsType: {type: string}, nodePublishSecretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, readOnly: {type: boolean}, volumeAttributes: {additionalProperties: {type: string}, type: object}}, required: [driver], type: object}, downwardAPI: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object, x-kubernetes-map-type: atomic}, mode: {format: int32, type: integer}, path: {type: string}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object, x-kubernetes-map-type: atomic}}, required: [path], type: object}, type: array}}, type: object}, emptyDir: {properties: {medium: {type: string}, sizeLimit: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, ephemeral: {properties: {volumeClaimTemplate: {properties: {metadata: {type: object}, spec: {properties: {accessModes: {items: {type: string}, type: array}, dataSource: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}}, required: [kind, name], type: object, x-kubernetes-map-type: atomic}, dataSourceRef: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}, namespace: {type: string}}, required: [kind, name], type: object}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, selector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, storageClassName: {type: string}, volumeMode: {type: string}, volumeName: {type: string}}, type: object}}, required: [spec], type: object}}, type: object}, fc: {properties: {fsType: {type: string}, lun: {format: int32, type: integer}, readOnly: {type: boolean}, targetWWNs: {items: {type: string}, type: array}, wwids: {items: {type: string}, type: array}}, type: object}, flexVolume: {properties: {driver: {type: string}, fsType: {type: string}, options: {additionalProperties: {type: string}, type: object}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}}, required: [driver], type: object}, flocker: {properties: {datasetName: {type: string}, datasetUUID: {type: string}}, type: object}, gcePersistentDisk: {properties: {fsType: {type: string}, partition: {format: int32, type: integer}, pdName: {type: string}, readOnly: {type: boolean}}, required: [pdName], type: object}, gitRepo: {properties: {directory: {type: string}, repository: {type: string}, revision: {type: string}}, required: [repository], type: object}, glusterfs: {properties: {endpoints: {type: string}, path: {type: string}, readOnly: {type: boolean}}, required: [endpoints, path], type: object}, hostPath: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, iscsi: {properties: {chapAuthDiscovery: {type: boolean}, chapAuthSession: {type: boolean}, fsType: {type: string}, initiatorName: {type: string}, iqn: {type: string}, iscsiInterface: {type: string}, lun: {format: int32, type: integer}, portals: {items: {type: string}, type: array}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, targetPortal: {type: string}}, required: [iqn, lun, targetPortal], type: object}, name: {type: string}, nfs: {properties: {path: {type: string}, readOnly: {type: boolean}, server: {type: string}}, required: [path, server], type: object}, persistentVolumeClaim: {properties: {claimName: {type: string}, readOnly: {type: boolean}}, required: [claimName], type: object}, photonPersistentDisk: {properties: {fsType: {type: string}, pdID: {type: string}}, required: [pdID], type: object}, portworxVolume: {properties: {fsType: {type: string}, readOnly: {type: boolean}, volumeID: {type: string}}, required: [volumeID], type: object}, projected: {properties: {defaultMode: {format: int32, type: integer}, sources: {items: {properties: {configMap: {properties: {items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, name: {type: string}, optional: {type: boolean}}, type: object, x-kubernetes-map-type: atomic}, downwardAPI: {properties: {items: {items: {properties: {fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object, x-kubernetes-map-type: atomic}, mode: {format: int32, type: integer}, path: {type: string}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object, x-kubernetes-map-type: atomic}}, required: [path], type: object}, type: array}}, type: object}, secret: {properties: {items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, name: {type: string}, optional: {type: boolean}}, type: object, x-kubernetes-map-type: atomic}, serviceAccountToken: {properties: {audience: {type: string}, expirationSeconds: {format: int64, type: integer}, path: {type: string}}, required: [path], type: object}}, type: object}, type: array}}, type: object}, quobyte: {properties: {group: {type: string}, readOnly: {type: boolean}, registry: {type: string}, tenant: {type: string}, user: {type: string}, volume: {type: string}}, required: [registry, volume], type: object}, rbd: {properties: {fsType: {type: string}, image: {type: string}, keyring: {type: string}, monitors: {items: {type: string}, type: array}, pool: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, user: {type: string}}, required: [image, monitors], type: object}, scaleIO: {properties: {fsType: {type: string}, gateway: {type: string}, protectionDomain: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, sslEnabled: {type: boolean}, storageMode: {type: string}, storagePool: {type: string}, system: {type: string}, volumeName: {type: string}}, required: [gateway, secretRef, system], type: object}, secret: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, optional: {type: boolean}, secretName: {type: string}}, type: object}, storageos: {properties: {fsType: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, volumeName: {type: string}, volumeNamespace: {type: string}}, type: object}, vsphereVolume: {properties: {fsType: {type: string}, storagePolicyID: {type: string}, storagePolicyName: {type: string}, volumePath: {type: string}}, required: [volumePath], type: object}}, required: [name], type: object}, volumeMounts: {properties: {mountPath: {type: string}, mountPropagation: {type: string}, name: {type: string}, readOnly: {type: boolean}, subPath: {type: string}, subPathExpr: {type: string}}, required: [mountPath, name], type: object}}, type: object}, type: array}, hostPath: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, pvc: {properties: {accessModes: {items: {type: string}, type: array}, storageClass: {type: string}}, type: object}, replicas: {format: int32, type: integer}, resourceLimits: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, securityContext: {properties: {allowPrivilegeEscalation: {type: boolean}, capabilities: {properties: {add: {items: {type: string}, type: array}, drop: {items: {type: string}, type: array}}, type: object}, privileged: {type: boolean}, procMount: {type: string}, readOnlyRootFilesystem: {type: boolean}, runAsGroup: {format: int64, type: integer}, runAsNonRoot: {type: boolean}, runAsUser: {format: int64, type: integer}, seLinuxOptions: {properties: {level: {type: string}, role: {type: string}, type: {type: string}, user: {type: string}}, type: object}, seccompProfile: {properties: {localhostProfile: {type: string}, type: {type: string}}, required: [type], type: object}, windowsOptions: {properties: {gmsaCredentialSpec: {type: string}, gmsaCredentialSpecName: {type: string}, hostProcess: {type: boolean}, runAsUserName: {type: string}}, type: object}}, type: object}, sidecarContainers: {items: {properties: {args: {items: {type: string}, type: array}, command: {items: {type: string}, type: array}, env: {items: {properties: {name: {type: string}, value: {type: string}, valueFrom: {properties: {configMapKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object, x-kubernetes-map-type: atomic}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object, x-kubernetes-map-type: atomic}, secretKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}}, required: [name], type: object}, type: array}, envFrom: {items: {properties: {configMapRef: {properties: {name: {type: string}, optional: {type: boolean}}, type: object, x-kubernetes-map-type: atomic}, prefix: {type: string}, secretRef: {properties: {name: {type: string}, optional: {type: boolean}}, type: object, x-kubernetes-map-type: atomic}}, type: object}, type: array}, image: {type: string}, imagePullPolicy: {type: string}, lifecycle: {properties: {postStart: {properties: {exec: {properties: {command: {items: {type: string}, type: array}}, type: object}, httpGet: {properties: {host: {type: string}, httpHeaders: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, path: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, scheme: {type: string}}, required: [port], type: object}, tcpSocket: {properties: {host: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}}, type: object}, preStop: {properties: {exec: {properties: {command: {items: {type: string}, type: array}}, type: object}, httpGet: {properties: {host: {type: string}, httpHeaders: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, path: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, scheme: {type: string}}, required: [port], type: object}, tcpSocket: {properties: {host: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}}, type: object}}, type: object}, livenessProbe: {properties: {exec: {properties: {command: {items: {type: string}, type: array}}, type: object}, failureThreshold: {format: int32, type: integer}, grpc: {properties: {port: {format: int32, type: integer}, service: {type: string}}, required: [port], type: object}, httpGet: {properties: {host: {type: string}, httpHeaders: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, path: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, scheme: {type: string}}, required: [port], type: object}, initialDelaySeconds: {format: int32, type: integer}, periodSeconds: {format: int32, type: integer}, successThreshold: {format: int32, type: integer}, tcpSocket: {properties: {host: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}, terminationGracePeriodSeconds: {format: int64, type: integer}, timeoutSeconds: {format: int32, type: integer}}, type: object}, name: {type: string}, ports: {items: {properties: {containerPort: {format: int32, type: integer}, hostIP: {type: string}, hostPort: {format: int32, type: integer}, name: {type: string}, protocol: {default: TCP, type: string}}, required: [containerPort], type: object}, type: array, x-kubernetes-list-map-keys: [containerPort, protocol], x-kubernetes-list-type: map}, readinessProbe: {properties: {exec: {properties: {command: {items: {type: string}, type: array}}, type: object}, failureThreshold: {format: int32, type: integer}, grpc: {properties: {port: {format: int32, type: integer}, service: {type: string}}, required: [port], type: object}, httpGet: {properties: {host: {type: string}, httpHeaders: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, path: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, scheme: {type: string}}, required: [port], type: object}, initialDelaySeconds: {format: int32, type: integer}, periodSeconds: {format: int32, type: integer}, successThreshold: {format: int32, type: integer}, tcpSocket: {properties: {host: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}, terminationGracePeriodSeconds: {format: int64, type: integer}, timeoutSeconds: {format: int32, type: integer}}, type: object}, resizePolicy: {items: {properties: {resourceName: {type: string}, restartPolicy: {type: string}}, required: [resourceName, restartPolicy], type: object}, type: array, x-kubernetes-list-type: atomic}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, securityContext: {properties: {allowPrivilegeEscalation: {type: boolean}, capabilities: {properties: {add: {items: {type: string}, type: array}, drop: {items: {type: string}, type: array}}, type: object}, privileged: {type: boolean}, procMount: {type: string}, readOnlyRootFilesystem: {type: boolean}, runAsGroup: {format: int64, type: integer}, runAsNonRoot: {type: boolean}, runAsUser: {format: int64, type: integer}, seLinuxOptions: {properties: {level: {type: string}, role: {type: string}, type: {type: string}, user: {type: string}}, type: object}, seccompProfile: {properties: {localhostProfile: {type: string}, type: {type: string}}, required: [type], type: object}, windowsOptions: {properties: {gmsaCredentialSpec: {type: string}, gmsaCredentialSpecName: {type: string}, hostProcess: {type: boolean}, runAsUserName: {type: string}}, type: object}}, type: object}, startupProbe: {properties: {exec: {properties: {command: {items: {type: string}, type: array}}, type: object}, failureThreshold: {format: int32, type: integer}, grpc: {properties: {port: {format: int32, type: integer}, service: {type: string}}, required: [port], type: object}, httpGet: {properties: {host: {type: string}, httpHeaders: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, path: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, scheme: {type: string}}, required: [port], type: object}, initialDelaySeconds: {format: int32, type: integer}, periodSeconds: {format: int32, type: integer}, successThreshold: {format: int32, type: integer}, tcpSocket: {properties: {host: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}, terminationGracePeriodSeconds: {format: int64, type: integer}, timeoutSeconds: {format: int32, type: integer}}, type: object}, stdin: {type: boolean}, stdinOnce: {type: boolean}, terminationMessagePath: {type: string}, terminationMessagePolicy: {type: string}, tty: {type: boolean}, volumeDevices: {items: {properties: {devicePath: {type: string}, name: {type: string}}, required: [devicePath, name], type: object}, type: array}, volumeMounts: {items: {properties: {mountPath: {type: string}, mountPropagation: {type: string}, name: {type: string}, readOnly: {type: boolean}, subPath: {type: string}, subPathExpr: {type: string}}, required: [mountPath, name], type: object}, type: array}, workingDir: {type: string}}, required: [name], type: object}, type: array}, updateStrategy: {properties: {rollingUpdate: {properties: {maxUnavailable: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, partition: {format: int32, type: integer}}, type: object}, type: {type: string}}, type: object}}, type: object}}, type: object}, gateway: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}}, type: object}, status: {properties: {alertmanager: {properties: {conditions: {items: {type: string}, type: array}, ready: {type: boolean}, version: {type: string}}, type: object}, image: {type: string}, imagePullPolicy: {type: string}}, type: object}}, type: object}}, served: true, storage: true, subresources: {status: {}}}]}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.13.0}, name: bootstraptokens.core.opni.io}, spec: {group: core.opni.io, names: {kind: BootstrapToken, listKind: BootstrapTokenList, plural: bootstraptokens, singular: bootstraptoken}, scope: Namespaced, versions: [{name: v1beta1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {metadata: {properties: {capabilities: {items: {properties: {reference: {properties: {id: {type: string}}, type: object}, type: {type: string}}, type: object}, type: array}, labels: {additionalProperties: {type: string}, type: object}, leaseID: {format: int64, type: integer}, maxUsages: {format: int64, type: integer}, resourceVersion: {type: string}, ttl: {format: int64, type: integer}, usageCount: {format: int64, type: integer}}, type: object}, secret: {type: string}, tokenID: {type: string}}, type: object}}, type: object}}, served: true, storage: true}]}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.13.0}, name: datapreppers.logging.opni.io}, spec: {group: logging.opni.io, names: {kind: DataPrepper, listKind: DataPrepperList, plural: datapreppers, singular: dataprepper}, scope: Namespaced, versions: [{additionalPrinterColumns: [{jsonPath: .metadata.creationTimestamp, name: Age, type: date}], name: v1beta1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {cluster: {type: string}, defaultRepo: {type: string}, enableTracing: {type: boolean}, image: {type: string}, imagePullPolicy: {type: string}, imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, nodeSelector: {additionalProperties: {type: string}, type: object}, opensearch: {properties: {endpoint: {type: string}, insecureDisableSSLVerify: {type: boolean}}, type: object}, passwordFrom: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, tolerations: {items: {properties: {effect: {type: string}, key: {type: string}, operator: {type: string}, tolerationSeconds: {format: int64, type: integer}, value: {type: string}}, type: object}, type: array}, username: {type: string}, version: {default: latest, type: string}}, required: [username, version], type: object}, status: {properties: {conditions: {items: {type: string}, type: array}, state: {type: string}}, type: object}}, type: object}}, served: true, storage: true, subresources: {status: {}}}]}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.13.0}, name: gateways.core.opni.io}, spec: {group: core.opni.io, names: {kind: Gateway, listKind: GatewayList, plural: gateways, singular: gateway}, scope: Namespaced, versions: [{name: v1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {affinity: {properties: {nodeAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {preference: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, weight: {format: int32, type: integer}}, required: [preference, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {properties: {nodeSelectorTerms: {items: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, type: array}}, required: [nodeSelectorTerms], type: object, x-kubernetes-map-type: atomic}}, type: object}, podAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}, podAntiAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}}, type: object}, agentImageTagOverride: {type: string}, config: {type: object, x-kubernetes-preserve-unknown-fields: true}, extraEnvVars: {items: {properties: {name: {type: string}, value: {type: string}, valueFrom: {properties: {configMapKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object, x-kubernetes-map-type: atomic}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object, x-kubernetes-map-type: atomic}, secretKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}}, required: [name], type: object}, type: array}, extraVolumeMounts: {items: {properties: {awsElasticBlockStore: {properties: {fsType: {type: string}, partition: {format: int32, type: integer}, readOnly: {type: boolean}, volumeID: {type: string}}, required: [volumeID], type: object}, azureDisk: {properties: {cachingMode: {type: string}, diskName: {type: string}, diskURI: {type: string}, fsType: {type: string}, kind: {type: string}, readOnly: {type: boolean}}, required: [diskName, diskURI], type: object}, azureFile: {properties: {readOnly: {type: boolean}, secretName: {type: string}, shareName: {type: string}}, required: [secretName, shareName], type: object}, cephfs: {properties: {monitors: {items: {type: string}, type: array}, path: {type: string}, readOnly: {type: boolean}, secretFile: {type: string}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, user: {type: string}}, required: [monitors], type: object}, cinder: {properties: {fsType: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, volumeID: {type: string}}, required: [volumeID], type: object}, configMap: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, name: {type: string}, optional: {type: boolean}}, type: object, x-kubernetes-map-type: atomic}, csi: {properties: {driver: {type: string}, fsType: {type: string}, nodePublishSecretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, readOnly: {type: boolean}, volumeAttributes: {additionalProperties: {type: string}, type: object}}, required: [driver], type: object}, downwardAPI: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object, x-kubernetes-map-type: atomic}, mode: {format: int32, type: integer}, path: {type: string}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object, x-kubernetes-map-type: atomic}}, required: [path], type: object}, type: array}}, type: object}, emptyDir: {properties: {medium: {type: string}, sizeLimit: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, ephemeral: {properties: {volumeClaimTemplate: {properties: {metadata: {type: object}, spec: {properties: {accessModes: {items: {type: string}, type: array}, dataSource: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}}, required: [kind, name], type: object, x-kubernetes-map-type: atomic}, dataSourceRef: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}, namespace: {type: string}}, required: [kind, name], type: object}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, selector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, storageClassName: {type: string}, volumeMode: {type: string}, volumeName: {type: string}}, type: object}}, required: [spec], type: object}}, type: object}, fc: {properties: {fsType: {type: string}, lun: {format: int32, type: integer}, readOnly: {type: boolean}, targetWWNs: {items: {type: string}, type: array}, wwids: {items: {type: string}, type: array}}, type: object}, flexVolume: {properties: {driver: {type: string}, fsType: {type: string}, options: {additionalProperties: {type: string}, type: object}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}}, required: [driver], type: object}, flocker: {properties: {datasetName: {type: string}, datasetUUID: {type: string}}, type: object}, gcePersistentDisk: {properties: {fsType: {type: string}, partition: {format: int32, type: integer}, pdName: {type: string}, readOnly: {type: boolean}}, required: [pdName], type: object}, gitRepo: {properties: {directory: {type: string}, repository: {type: string}, revision: {type: string}}, required: [repository], type: object}, glusterfs: {properties: {endpoints: {type: string}, path: {type: string}, readOnly: {type: boolean}}, required: [endpoints, path], type: object}, hostPath: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, iscsi: {properties: {chapAuthDiscovery: {type: boolean}, chapAuthSession: {type: boolean}, fsType: {type: string}, initiatorName: {type: string}, iqn: {type: string}, iscsiInterface: {type: string}, lun: {format: int32, type: integer}, portals: {items: {type: string}, type: array}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, targetPortal: {type: string}}, required: [iqn, lun, targetPortal], type: object}, mountPath: {type: string}, name: {type: string}, nfs: {properties: {path: {type: string}, readOnly: {type: boolean}, server: {type: string}}, required: [path, server], type: object}, persistentVolumeClaim: {properties: {claimName: {type: string}, readOnly: {type: boolean}}, required: [claimName], type: object}, photonPersistentDisk: {properties: {fsType: {type: string}, pdID: {type: string}}, required: [pdID], type: object}, portworxVolume: {properties: {fsType: {type: string}, readOnly: {type: boolean}, volumeID: {type: string}}, required: [volumeID], type: object}, projected: {properties: {defaultMode: {format: int32, type: integer}, sources: {items: {properties: {configMap: {properties: {items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, name: {type: string}, optional: {type: boolean}}, type: object, x-kubernetes-map-type: atomic}, downwardAPI: {properties: {items: {items: {properties: {fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object, x-kubernetes-map-type: atomic}, mode: {format: int32, type: integer}, path: {type: string}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object, x-kubernetes-map-type: atomic}}, required: [path], type: object}, type: array}}, type: object}, secret: {properties: {items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, name: {type: string}, optional: {type: boolean}}, type: object, x-kubernetes-map-type: atomic}, serviceAccountToken: {properties: {audience: {type: string}, expirationSeconds: {format: int64, type: integer}, path: {type: string}}, required: [path], type: object}}, type: object}, type: array}}, type: object}, quobyte: {properties: {group: {type: string}, readOnly: {type: boolean}, registry: {type: string}, tenant: {type: string}, user: {type: string}, volume: {type: string}}, required: [registry, volume], type: object}, rbd: {properties: {fsType: {type: string}, image: {type: string}, keyring: {type: string}, monitors: {items: {type: string}, type: array}, pool: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, user: {type: string}}, required: [image, monitors], type: object}, readOnly: {type: boolean}, scaleIO: {properties: {fsType: {type: string}, gateway: {type: string}, protectionDomain: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, sslEnabled: {type: boolean}, storageMode: {type: string}, storagePool: {type: string}, system: {type: string}, volumeName: {type: string}}, required: [gateway, secretRef, system], type: object}, secret: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, optional: {type: boolean}, secretName: {type: string}}, type: object}, storageos: {properties: {fsType: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, volumeName: {type: string}, volumeNamespace: {type: string}}, type: object}, vsphereVolume: {properties: {fsType: {type: string}, storagePolicyID: {type: string}, storagePolicyName: {type: string}, volumePath: {type: string}}, required: [volumePath], type: object}}, type: object}, type: array}, image: {properties: {image: {type: string}, imagePullPolicy: {type: string}, imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}}, type: object}, natsCluster: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, nodeSelector: {additionalProperties: {type: string}, type: object}, replicas: {format: int32, type: integer}, serviceAnnotations: {additionalProperties: {type: string}, type: object}, serviceType: {type: string}, tolerations: {items: {properties: {effect: {type: string}, key: {type: string}, operator: {type: string}, tolerationSeconds: {format: int64, type: integer}, value: {type: string}}, type: object}, type: array}}, required: [natsCluster], type: object}, status: {properties: {endpoints: {items: {properties: {hostname: {type: string}, ip: {type: string}, nodeName: {type: string}, targetRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}, kind: {type: string}, name: {type: string}, namespace: {type: string}, resourceVersion: {type: string}, uid: {type: string}}, type: object, x-kubernetes-map-type: atomic}}, required: [ip], type: object, x-kubernetes-map-type: atomic}, type: array}, image: {type: string}, imagePullPolicy: {type: string}, loadBalancer: {properties: {hostname: {type: string}, ip: {type: string}, ports: {items: {properties: {error: {maxLength: 316, pattern: '^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$', type: string}, port: {format: int32, type: integer}, protocol: {default: TCP, type: string}}, required: [port, protocol], type: object}, type: array, x-kubernetes-list-type: atomic}}, type: object}, ready: {type: boolean}, serviceName: {type: string}}, type: object}}, type: object}}, served: true, storage: false, subresources: {status: {}}}, {name: v1beta1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {affinity: {properties: {nodeAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {preference: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, weight: {format: int32, type: integer}}, required: [preference, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {properties: {nodeSelectorTerms: {items: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, type: array}}, required: [nodeSelectorTerms], type: object, x-kubernetes-map-type: atomic}}, type: object}, podAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}, podAntiAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}}, type: object}, agentImageTagOverride: {type: string}, alerting: {properties: {alertVolumeMounts: {items: {properties: {awsElasticBlockStore: {properties: {fsType: {type: string}, partition: {format: int32, type: integer}, readOnly: {type: boolean}, volumeID: {type: string}}, required: [volumeID], type: object}, azureDisk: {properties: {cachingMode: {type: string}, diskName: {type: string}, diskURI: {type: string}, fsType: {type: string}, kind: {type: string}, readOnly: {type: boolean}}, required: [diskName, diskURI], type: object}, azureFile: {properties: {readOnly: {type: boolean}, secretName: {type: string}, shareName: {type: string}}, required: [secretName, shareName], type: object}, cephfs: {properties: {monitors: {items: {type: string}, type: array}, path: {type: string}, readOnly: {type: boolean}, secretFile: {type: string}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, user: {type: string}}, required: [monitors], type: object}, cinder: {properties: {fsType: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, volumeID: {type: string}}, required: [volumeID], type: object}, configMap: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, name: {type: string}, optional: {type: boolean}}, type: object, x-kubernetes-map-type: atomic}, csi: {properties: {driver: {type: string}, fsType: {type: string}, nodePublishSecretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, readOnly: {type: boolean}, volumeAttributes: {additionalProperties: {type: string}, type: object}}, required: [driver], type: object}, downwardAPI: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object, x-kubernetes-map-type: atomic}, mode: {format: int32, type: integer}, path: {type: string}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object, x-kubernetes-map-type: atomic}}, required: [path], type: object}, type: array}}, type: object}, emptyDir: {properties: {medium: {type: string}, sizeLimit: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, ephemeral: {properties: {volumeClaimTemplate: {properties: {metadata: {type: object}, spec: {properties: {accessModes: {items: {type: string}, type: array}, dataSource: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}}, required: [kind, name], type: object, x-kubernetes-map-type: atomic}, dataSourceRef: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}, namespace: {type: string}}, required: [kind, name], type: object}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, selector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, storageClassName: {type: string}, volumeMode: {type: string}, volumeName: {type: string}}, type: object}}, required: [spec], type: object}}, type: object}, fc: {properties: {fsType: {type: string}, lun: {format: int32, type: integer}, readOnly: {type: boolean}, targetWWNs: {items: {type: string}, type: array}, wwids: {items: {type: string}, type: array}}, type: object}, flexVolume: {properties: {driver: {type: string}, fsType: {type: string}, options: {additionalProperties: {type: string}, type: object}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}}, required: [driver], type: object}, flocker: {properties: {datasetName: {type: string}, datasetUUID: {type: string}}, type: object}, gcePersistentDisk: {properties: {fsType: {type: string}, partition: {format: int32, type: integer}, pdName: {type: string}, readOnly: {type: boolean}}, required: [pdName], type: object}, gitRepo: {properties: {directory: {type: string}, repository: {type: string}, revision: {type: string}}, required: [repository], type: object}, glusterfs: {properties: {endpoints: {type: string}, path: {type: string}, readOnly: {type: boolean}}, required: [endpoints, path], type: object}, hostPath: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, iscsi: {properties: {chapAuthDiscovery: {type: boolean}, chapAuthSession: {type: boolean}, fsType: {type: string}, initiatorName: {type: string}, iqn: {type: string}, iscsiInterface: {type: string}, lun: {format: int32, type: integer}, portals: {items: {type: string}, type: array}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, targetPortal: {type: string}}, required: [iqn, lun, targetPortal], type: object}, mountPath: {type: string}, name: {type: string}, nfs: {properties: {path: {type: string}, readOnly: {type: boolean}, server: {type: string}}, required: [path, server], type: object}, persistentVolumeClaim: {properties: {claimName: {type: string}, readOnly: {type: boolean}}, required: [claimName], type: object}, photonPersistentDisk: {properties: {fsType: {type: string}, pdID: {type: string}}, required: [pdID], type: object}, portworxVolume: {properties: {fsType: {type: string}, readOnly: {type: boolean}, volumeID: {type: string}}, required: [volumeID], type: object}, projected: {properties: {defaultMode: {format: int32, type: integer}, sources: {items: {properties: {configMap: {properties: {items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, name: {type: string}, optional: {type: boolean}}, type: object, x-kubernetes-map-type: atomic}, downwardAPI: {properties: {items: {items: {properties: {fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object, x-kubernetes-map-type: atomic}, mode: {format: int32, type: integer}, path: {type: string}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object, x-kubernetes-map-type: atomic}}, required: [path], type: object}, type: array}}, type: object}, secret: {properties: {items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, name: {type: string}, optional: {type: boolean}}, type: object, x-kubernetes-map-type: atomic}, serviceAccountToken: {properties: {audience: {type: string}, expirationSeconds: {format: int64, type: integer}, path: {type: string}}, required: [path], type: object}}, type: object}, type: array}}, type: object}, quobyte: {properties: {group: {type: string}, readOnly: {type: boolean}, registry: {type: string}, tenant: {type: string}, user: {type: string}, volume: {type: string}}, required: [registry, volume], type: object}, rbd: {properties: {fsType: {type: string}, image: {type: string}, keyring: {type: string}, monitors: {items: {type: string}, type: array}, pool: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, user: {type: string}}, required: [image, monitors], type: object}, readOnly: {type: boolean}, scaleIO: {properties: {fsType: {type: string}, gateway: {type: string}, protectionDomain: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, sslEnabled: {type: boolean}, storageMode: {type: string}, storagePool: {type: string}, system: {type: string}, volumeName: {type: string}}, required: [gateway, secretRef, system], type: object}, secret: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, optional: {type: boolean}, secretName: {type: string}}, type: object}, storageos: {properties: {fsType: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, volumeName: {type: string}, volumeNamespace: {type: string}}, type: object}, vsphereVolume: {properties: {fsType: {type: string}, storagePolicyID: {type: string}, storagePolicyName: {type: string}, volumePath: {type: string}}, required: [volumePath], type: object}}, type: object}, type: array}, clusterGossipInterval: {default: 200ms, type: string}, clusterPort: {default: 9094, type: integer}, clusterPushPullInterval: {default: 1m0s, type: string}, clusterSettleTimeout: {default: 1m0s, type: string}, configName: {type: string}, cpu: {default: 500m, type: string}, dataMountPath: {default: /var/lib, type: string}, enabled: {type: boolean}, memory: {default: 200Mi, type: string}, rawConfigMap: {type: string}, rawInternalRouting: {type: string}, replicas: {default: 1, format: int32, type: integer}, serviceType: {default: ClusterIP, type: string}, storage: {default: 500Mi, type: string}, webPort: {default: 9093, type: integer}}, type: object}, auth: {properties: {noauth: {properties: {clientID: {type: string}, clientSecret: {type: string}, debug: {type: boolean}, grafanaHostname: {type: string}, issuer: {type: string}, managementAPIEndpoint: {type: string}, openid: {properties: {discovery: {properties: {cacert: {type: string}, issuer: {type: string}, path: {default: /.well-known/openid-configuration, type: string}}, required: [issuer], type: object}, identifyingClaim: {default: sub, type: string}, wellKnownConfiguration: {properties: {authorization_endpoint: {type: string}, claims_supported: {items: {type: string}, type: array}, end_session_endpoint: {type: string}, id_token_signing_alg_values_supported: {items: {type: string}, type: array}, issuer: {type: string}, jwks_uri: {type: string}, request_uri_parameter_supported: {type: boolean}, response_modes_supported: {items: {type: string}, type: array}, response_types_supported: {items: {type: string}, type: array}, revocation_endpoint: {type: string}, scopes_supported: {items: {type: string}, type: array}, token_endpoint: {type: string}, token_endpoint_auth_methods_supported: {items: {type: string}, type: array}, userinfo_endpoint: {type: string}}, type: object}}, type: object}, port: {type: integer}, redirectURI: {type: string}}, type: object}, openid: {properties: {allowSignUp: {type: boolean}, allowedDomains: {items: {type: string}, type: array}, clientID: {type: string}, clientSecret: {type: string}, discovery: {properties: {cacert: {type: string}, issuer: {type: string}, path: {default: /.well-known/openid-configuration, type: string}}, required: [issuer], type: object}, emailAttributePath: {type: string}, identifyingClaim: {default: sub, type: string}, insecureSkipVerify: {type: boolean}, roleAttributePath: {type: string}, roleAttributeStrict: {type: boolean}, scopes: {items: {type: string}, type: array}, tlsClientCA: {type: string}, tlsClientCert: {type: string}, tlsClientKey: {type: string}, wellKnownConfiguration: {properties: {authorization_endpoint: {type: string}, claims_supported: {items: {type: string}, type: array}, end_session_endpoint: {type: string}, id_token_signing_alg_values_supported: {items: {type: string}, type: array}, issuer: {type: string}, jwks_uri: {type: string}, request_uri_parameter_supported: {type: boolean}, response_modes_supported: {items: {type: string}, type: array}, response_types_supported: {items: {type: string}, type: array}, revocation_endpoint: {type: string}, scopes_supported: {items: {type: string}, type: array}, token_endpoint: {type: string}, token_endpoint_auth_methods_supported: {items: {type: string}, type: array}, userinfo_endpoint: {type: string}}, type: object}}, type: object}, provider: {type: string}}, type: object}, extraEnvVars: {items: {properties: {name: {type: string}, value: {type: string}, valueFrom: {properties: {configMapKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object, x-kubernetes-map-type: atomic}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object, x-kubernetes-map-type: atomic}, secretKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}}, required: [name], type: object}, type: array}, extraVolumeMounts: {items: {properties: {awsElasticBlockStore: {properties: {fsType: {type: string}, partition: {format: int32, type: integer}, readOnly: {type: boolean}, volumeID: {type: string}}, required: [volumeID], type: object}, azureDisk: {properties: {cachingMode: {type: string}, diskName: {type: string}, diskURI: {type: string}, fsType: {type: string}, kind: {type: string}, readOnly: {type: boolean}}, required: [diskName, diskURI], type: object}, azureFile: {properties: {readOnly: {type: boolean}, secretName: {type: string}, shareName: {type: string}}, required: [secretName, shareName], type: object}, cephfs: {properties: {monitors: {items: {type: string}, type: array}, path: {type: string}, readOnly: {type: boolean}, secretFile: {type: string}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, user: {type: string}}, required: [monitors], type: object}, cinder: {properties: {fsType: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, volumeID: {type: string}}, required: [volumeID], type: object}, configMap: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, name: {type: string}, optional: {type: boolean}}, type: object, x-kubernetes-map-type: atomic}, csi: {properties: {driver: {type: string}, fsType: {type: string}, nodePublishSecretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, readOnly: {type: boolean}, volumeAttributes: {additionalProperties: {type: string}, type: object}}, required: [driver], type: object}, downwardAPI: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object, x-kubernetes-map-type: atomic}, mode: {format: int32, type: integer}, path: {type: string}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object, x-kubernetes-map-type: atomic}}, required: [path], type: object}, type: array}}, type: object}, emptyDir: {properties: {medium: {type: string}, sizeLimit: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, ephemeral: {properties: {volumeClaimTemplate: {properties: {metadata: {type: object}, spec: {properties: {accessModes: {items: {type: string}, type: array}, dataSource: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}}, required: [kind, name], type: object, x-kubernetes-map-type: atomic}, dataSourceRef: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}, namespace: {type: string}}, required: [kind, name], type: object}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, selector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, storageClassName: {type: string}, volumeMode: {type: string}, volumeName: {type: string}}, type: object}}, required: [spec], type: object}}, type: object}, fc: {properties: {fsType: {type: string}, lun: {format: int32, type: integer}, readOnly: {type: boolean}, targetWWNs: {items: {type: string}, type: array}, wwids: {items: {type: string}, type: array}}, type: object}, flexVolume: {properties: {driver: {type: string}, fsType: {type: string}, options: {additionalProperties: {type: string}, type: object}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}}, required: [driver], type: object}, flocker: {properties: {datasetName: {type: string}, datasetUUID: {type: string}}, type: object}, gcePersistentDisk: {properties: {fsType: {type: string}, partition: {format: int32, type: integer}, pdName: {type: string}, readOnly: {type: boolean}}, required: [pdName], type: object}, gitRepo: {properties: {directory: {type: string}, repository: {type: string}, revision: {type: string}}, required: [repository], type: object}, glusterfs: {properties: {endpoints: {type: string}, path: {type: string}, readOnly: {type: boolean}}, required: [endpoints, path], type: object}, hostPath: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, iscsi: {properties: {chapAuthDiscovery: {type: boolean}, chapAuthSession: {type: boolean}, fsType: {type: string}, initiatorName: {type: string}, iqn: {type: string}, iscsiInterface: {type: string}, lun: {format: int32, type: integer}, portals: {items: {type: string}, type: array}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, targetPortal: {type: string}}, required: [iqn, lun, targetPortal], type: object}, mountPath: {type: string}, name: {type: string}, nfs: {properties: {path: {type: string}, readOnly: {type: boolean}, server: {type: string}}, required: [path, server], type: object}, persistentVolumeClaim: {properties: {claimName: {type: string}, readOnly: {type: boolean}}, required: [claimName], type: object}, photonPersistentDisk: {properties: {fsType: {type: string}, pdID: {type: string}}, required: [pdID], type: object}, portworxVolume: {properties: {fsType: {type: string}, readOnly: {type: boolean}, volumeID: {type: string}}, required: [volumeID], type: object}, projected: {properties: {defaultMode: {format: int32, type: integer}, sources: {items: {properties: {configMap: {properties: {items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, name: {type: string}, optional: {type: boolean}}, type: object, x-kubernetes-map-type: atomic}, downwardAPI: {properties: {items: {items: {properties: {fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object, x-kubernetes-map-type: atomic}, mode: {format: int32, type: integer}, path: {type: string}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object, x-kubernetes-map-type: atomic}}, required: [path], type: object}, type: array}}, type: object}, secret: {properties: {items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, name: {type: string}, optional: {type: boolean}}, type: object, x-kubernetes-map-type: atomic}, serviceAccountToken: {properties: {audience: {type: string}, expirationSeconds: {format: int64, type: integer}, path: {type: string}}, required: [path], type: object}}, type: object}, type: array}}, type: object}, quobyte: {properties: {group: {type: string}, readOnly: {type: boolean}, registry: {type: string}, tenant: {type: string}, user: {type: string}, volume: {type: string}}, required: [registry, volume], type: object}, rbd: {properties: {fsType: {type: string}, image: {type: string}, keyring: {type: string}, monitors: {items: {type: string}, type: array}, pool: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, user: {type: string}}, required: [image, monitors], type: object}, readOnly: {type: boolean}, scaleIO: {properties: {fsType: {type: string}, gateway: {type: string}, protectionDomain: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, sslEnabled: {type: boolean}, storageMode: {type: string}, storagePool: {type: string}, system: {type: string}, volumeName: {type: string}}, required: [gateway, secretRef, system], type: object}, secret: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, optional: {type: boolean}, secretName: {type: string}}, type: object}, storageos: {properties: {fsType: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, volumeName: {type: string}, volumeNamespace: {type: string}}, type: object}, vsphereVolume: {properties: {fsType: {type: string}, storagePolicyID: {type: string}, storagePolicyName: {type: string}, volumePath: {type: string}}, required: [volumePath], type: object}}, type: object}, type: array}, hostname: {type: string}, image: {properties: {image: {type: string}, imagePullPolicy: {type: string}, imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}}, type: object}, management: {properties: {grpcAdvertiseAddress: {type: string}, grpcListenAddress: {default: 'tcp://0.0.0.0:11090', type: string}, httpListenAddress: {default: '0.0.0.0:11080', type: string}, relayAdvertiseAddress: {type: string}, relayListenAddress: {type: string}, webAdvertiseAddress: {type: string}, webCerts: {properties: {caCert: {type: string}, caCertData: {format: byte, type: string}, servingCert: {type: string}, servingCertData: {format: byte, type: string}, servingKey: {type: string}, servingKeyData: {format: byte, type: string}}, type: object}, webListenAddress: {default: '0.0.0.0:12080', type: string}}, type: object}, natsCluster: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, nodeSelector: {additionalProperties: {type: string}, type: object}, patchEngine: {default: bsdiff, type: string}, pluginSearchDirs: {items: {type: string}, type: array}, profiling: {properties: {path: {default: /debug/pprof, type: string}}, type: object}, replicas: {format: int32, type: integer}, serviceAnnotations: {additionalProperties: {type: string}, type: object}, serviceType: {default: LoadBalancer, type: string}, storageType: {default: jetstream, type: string, x-kubernetes-validations: [{message: Value is immutable, rule: self == oldSelf}]}, tolerations: {items: {properties: {effect: {type: string}, key: {type: string}, operator: {type: string}, tolerationSeconds: {format: int64, type: integer}, value: {type: string}}, type: object}, type: array}}, required: [natsCluster], type: object}, status: {properties: {endpoints: {items: {properties: {hostname: {type: string}, ip: {type: string}, nodeName: {type: string}, targetRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}, kind: {type: string}, name: {type: string}, namespace: {type: string}, resourceVersion: {type: string}, uid: {type: string}}, type: object, x-kubernetes-map-type: atomic}}, required: [ip], type: object, x-kubernetes-map-type: atomic}, type: array}, image: {type: string}, imagePullPolicy: {type: string}, loadBalancer: {properties: {hostname: {type: string}, ip: {type: string}, ports: {items: {properties: {error: {maxLength: 316, pattern: '^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$', type: string}, port: {format: int32, type: integer}, protocol: {default: TCP, type: string}}, required: [port, protocol], type: object}, type: array, x-kubernetes-list-type: atomic}}, type: object}, ready: {type: boolean}, serviceName: {type: string}, storageType: {type: string}}, type: object}}, type: object}}, served: true, storage: false, subresources: {status: {}}}]}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.8.0}, creationTimestamp: null, name: grafanadashboards.grafana.opni.io}, spec: {group: grafana.opni.io, names: {kind: GrafanaDashboard, listKind: GrafanaDashboardList, plural: grafanadashboards, singular: grafanadashboard}, scope: Namespaced, versions: [{name: v1alpha1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {configMapRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object}, contentCacheDuration: {type: string}, customFolderName: {type: string}, datasources: {items: {properties: {datasourceName: {type: string}, inputName: {type: string}}, required: [datasourceName, inputName], type: object}, type: array}, grafanaCom: {properties: {id: {type: integer}, revision: {type: integer}}, required: [id], type: object}, gzipConfigMapRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object}, gzipJson: {format: byte, type: string}, json: {type: string}, jsonnet: {type: string}, plugins: {items: {properties: {name: {type: string}, version: {type: string}}, required: [name, version], type: object}, type: array}, url: {type: string}, useAsHomeDashboard: {type: boolean}}, type: object}, status: {properties: {contentCache: {format: byte, type: string}, contentTimestamp: {format: date-time, type: string}, contentUrl: {type: string}, error: {properties: {code: {type: integer}, error: {type: string}, retries: {type: integer}}, required: [code, error], type: object}}, type: object}}, type: object}}, served: true, storage: true, subresources: {status: {}}}]}, status: {acceptedNames: {kind: "", plural: ""}, conditions: [], storedVersions: []}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.8.0}, creationTimestamp: null, name: grafanadatasources.grafana.opni.io}, spec: {group: grafana.opni.io, names: {kind: GrafanaDataSource, listKind: GrafanaDataSourceList, plural: grafanadatasources, singular: grafanadatasource}, scope: Namespaced, versions: [{name: v1alpha1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {datasources: {items: {properties: {access: {type: string}, basicAuth: {type: boolean}, basicAuthPassword: {type: string}, basicAuthUser: {type: string}, customJsonData: {type: object, x-kubernetes-preserve-unknown-fields: true}, customSecureJsonData: {type: object, x-kubernetes-preserve-unknown-fields: true}, database: {type: string}, editable: {type: boolean}, isDefault: {type: boolean}, jsonData: {properties: {addCorsHeader: {type: boolean}, alertmanagerUid: {type: string}, allowInfraExplore: {type: boolean}, apiToken: {type: string}, appInsightsAppId: {type: string}, assumeRoleArn: {type: string}, authType: {type: string}, authenticationType: {type: string}, azureLogAnalyticsSameAs: {type: string}, clientEmail: {type: string}, clientId: {type: string}, cloudName: {type: string}, clusterUrl: {type: string}, connMaxLifetime: {type: integer}, customMetricsNamespaces: {type: string}, customQueryParameters: {type: string}, defaultBucket: {type: string}, defaultDatabase: {type: string}, defaultProject: {type: string}, defaultRegion: {type: string}, derivedFields: {items: {properties: {datasourceUid: {type: string}, matcherRegex: {type: string}, name: {type: string}, url: {type: string}}, type: object}, type: array}, encrypt: {type: string}, esVersion: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, exemplarTraceIdDestinations: {items: {properties: {datasourceUid: {type: string}, name: {type: string}, url: {type: string}, urlDisplayLabel: {type: string}}, type: object}, type: array}, githubUrl: {type: string}, graphiteVersion: {type: string}, httpHeaderName1: {type: string}, httpHeaderName2: {type: string}, httpHeaderName3: {type: string}, httpHeaderName4: {type: string}, httpHeaderName5: {type: string}, httpHeaderName6: {type: string}, httpHeaderName7: {type: string}, httpHeaderName8: {type: string}, httpHeaderName9: {type: string}, httpMethod: {type: string}, httpMode: {type: string}, implementation: {type: string}, interval: {type: string}, logAnalyticsClientId: {type: string}, logAnalyticsDefaultWorkspace: {type: string}, logAnalyticsSubscriptionId: {type: string}, logAnalyticsTenantId: {type: string}, logLevelField: {type: string}, logMessageField: {type: string}, manageAlerts: {type: boolean}, maxIdleConns: {type: integer}, maxLines: {type: integer}, maxOpenConns: {type: integer}, nodeGraph: {properties: {enabled: {type: boolean}}, type: object}, oauthPassThru: {type: boolean}, organization: {type: string}, port: {type: integer}, postgresVersion: {type: integer}, queryTimeout: {type: string}, search: {properties: {hide: {type: boolean}}, type: object}, server: {type: string}, serviceMap: {properties: {datasourceUid: {type: string}}, type: object}, showOffline: {type: boolean}, sigV4AssumeRoleArn: {type: string}, sigV4Auth: {type: boolean}, sigV4AuthType: {type: string}, sigV4ExternalId: {type: string}, sigV4Profile: {type: string}, sigV4Region: {type: string}, sslmode: {type: string}, subscriptionId: {type: string}, tenantId: {type: string}, timeField: {type: string}, timeInterval: {type: string}, timeout: {type: integer}, timescaledb: {type: boolean}, timezone: {type: string}, tlsAuth: {type: boolean}, tlsAuthWithCACert: {type: boolean}, tlsSkipVerify: {type: boolean}, tokenUri: {type: string}, tracesToLogs: {properties: {datasourceUid: {type: string}, filterBySpanID: {type: boolean}, filterByTraceID: {type: boolean}, lokiSearch: {type: boolean}, spanEndTimeShift: {type: string}, spanStartTimeShift: {type: string}, tags: {items: {type: string}, type: array}}, type: object}, tsdbResolution: {type: string}, tsdbVersion: {type: string}, url: {type: string}, usePOST: {type: boolean}, useProxy: {type: boolean}, useYandexCloudAuthorization: {type: boolean}, username: {type: string}, version: {type: string}, xHeaderKey: {type: string}, xHeaderUser: {type: string}}, type: object}, name: {type: string}, orgId: {type: integer}, password: {type: string}, secureJsonData: {properties: {accessKey: {type: string}, accessToken: {type: string}, appInsightsApiKey: {type: string}, basicAuthPassword: {type: string}, clientSecret: {type: string}, httpHeaderValue1: {type: string}, httpHeaderValue2: {type: string}, httpHeaderValue3: {type: string}, httpHeaderValue4: {type: string}, httpHeaderValue5: {type: string}, httpHeaderValue6: {type: string}, httpHeaderValue7: {type: string}, httpHeaderValue8: {type: string}, httpHeaderValue9: {type: string}, logAnalyticsClientSecret: {type: string}, password: {type: string}, privateKey: {type: string}, secretKey: {type: string}, sigV4AccessKey: {type: string}, sigV4SecretKey: {type: string}, tlsCACert: {type: string}, tlsClientCert: {type: string}, tlsClientKey: {type: string}, token: {type: string}}, type: object}, type: {type: string}, uid: {type: string}, url: {type: string}, user: {type: string}, version: {type: integer}, withCredentials: {type: boolean}}, required: [name, type], type: object}, type: array}, name: {type: string}}, required: [datasources, name], type: object}, status: {properties: {message: {type: string}, phase: {type: string}}, required: [message, phase], type: object}}, type: object}}, served: true, storage: true, subresources: {status: {}}}]}, status: {acceptedNames: {kind: "", plural: ""}, conditions: [], storedVersions: []}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.8.0}, creationTimestamp: null, name: grafananotificationchannels.grafana.opni.io}, spec: {group: grafana.opni.io, names: {kind: GrafanaNotificationChannel, listKind: GrafanaNotificationChannelList, plural: grafananotificationchannels, singular: grafananotificationchannel}, scope: Namespaced, versions: [{name: v1alpha1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {json: {type: string}, name: {type: string}}, required: [json, name], type: object}, status: {properties: {hash: {type: string}, id: {type: integer}, message: {type: string}, phase: {type: string}, uid: {type: string}}, required: [hash, id, message, phase, uid], type: object}}, type: object}}, served: true, storage: true, subresources: {status: {}}}]}, status: {acceptedNames: {kind: "", plural: ""}, conditions: [], storedVersions: []}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.8.0}, creationTimestamp: null, name: grafanas.grafana.opni.io}, spec: {group: grafana.opni.io, names: {kind: Grafana, listKind: GrafanaList, plural: grafanas, singular: grafana}, scope: Namespaced, versions: [{name: v1alpha1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {baseImage: {type: string}, client: {properties: {preferService: {nullable: true, type: boolean}, timeout: {nullable: true, type: integer}}, type: object}, config: {properties: {alerting: {properties: {concurrent_render_limit: {nullable: true, type: integer}, enabled: {nullable: true, type: boolean}, error_or_timeout: {type: string}, evaluation_timeout_seconds: {nullable: true, type: integer}, execute_alerts: {nullable: true, type: boolean}, max_attempts: {nullable: true, type: integer}, nodata_or_nullvalues: {type: string}, notification_timeout_seconds: {nullable: true, type: integer}}, type: object}, analytics: {properties: {check_for_updates: {nullable: true, type: boolean}, google_analytics_ua_id: {type: string}, reporting_enabled: {nullable: true, type: boolean}}, type: object}, auth: {properties: {disable_login_form: {nullable: true, type: boolean}, disable_signout_menu: {nullable: true, type: boolean}, login_cookie_name: {type: string}, login_maximum_inactive_lifetime_days: {nullable: true, type: integer}, login_maximum_inactive_lifetime_duration: {type: string}, login_maximum_lifetime_days: {nullable: true, type: integer}, login_maximum_lifetime_duration: {type: string}, oauth_auto_login: {nullable: true, type: boolean}, signout_redirect_url: {type: string}, sigv4_auth_enabled: {nullable: true, type: boolean}, token_rotation_interval_minutes: {nullable: true, type: integer}}, type: object}, auth.anonymous: {properties: {enabled: {nullable: true, type: boolean}, org_name: {type: string}, org_role: {type: string}}, type: object}, auth.azuread: {properties: {allow_sign_up: {nullable: true, type: boolean}, allowed_domains: {type: string}, allowed_groups: {type: string}, auth_url: {type: string}, client_id: {type: string}, client_secret: {type: string}, enabled: {nullable: true, type: boolean}, scopes: {type: string}, token_url: {type: string}}, type: object}, auth.basic: {properties: {enabled: {nullable: true, type: boolean}}, type: object}, auth.generic_oauth: {properties: {allow_sign_up: {nullable: true, type: boolean}, allowed_domains: {type: string}, api_url: {type: string}, auth_url: {type: string}, client_id: {type: string}, client_secret: {type: string}, email_attribute_path: {type: string}, enabled: {nullable: true, type: boolean}, role_attribute_path: {type: string}, role_attribute_strict: {nullable: true, type: boolean}, scopes: {type: string}, team_ids: {type: string}, team_ids_attribute_path: {type: string}, teams_url: {type: string}, tls_client_ca: {type: string}, tls_client_cert: {type: string}, tls_client_key: {type: string}, tls_skip_verify_insecure: {nullable: true, type: boolean}, token_url: {type: string}}, type: object}, auth.github: {properties: {allow_sign_up: {nullable: true, type: boolean}, allowed_organizations: {type: string}, api_url: {type: string}, auth_url: {type: string}, client_id: {type: string}, client_secret: {type: string}, enabled: {nullable: true, type: boolean}, scopes: {type: string}, team_ids: {type: string}, token_url: {type: string}}, type: object}, auth.gitlab: {properties: {allow_sign_up: {nullable: true, type: boolean}, allowed_groups: {type: string}, api_url: {type: string}, auth_url: {type: string}, client_id: {type: string}, client_secret: {type: string}, enabled: {nullable: true, type: boolean}, scopes: {type: string}, token_url: {type: string}}, type: object}, auth.google: {properties: {allow_sign_up: {type: boolean}, allowed_domains: {type: string}, auth_url: {type: string}, client_id: {type: string}, client_secret: {type: string}, enabled: {nullable: true, type: boolean}, scopes: {type: string}, token_url: {type: string}}, type: object}, auth.ldap: {properties: {allow_sign_up: {nullable: true, type: boolean}, config_file: {type: string}, enabled: {nullable: true, type: boolean}}, type: object}, auth.okta: {properties: {allow_sign_up: {nullable: true, type: boolean}, allowed_domains: {type: string}, allowed_groups: {type: string}, api_url: {type: string}, auth_url: {type: string}, client_id: {type: string}, client_secret: {type: string}, enabled: {nullable: true, type: boolean}, name: {type: string}, role_attribute_path: {type: string}, role_attribute_strict: {nullable: true, type: boolean}, scopes: {type: string}, token_url: {type: string}}, type: object}, auth.proxy: {properties: {auto_sign_up: {nullable: true, type: boolean}, enable_login_token: {nullable: true, type: boolean}, enabled: {nullable: true, type: boolean}, header_name: {type: string}, header_property: {type: string}, headers: {type: string}, ldap_sync_ttl: {type: string}, whitelist: {type: string}}, type: object}, auth.saml: {properties: {allow_idp_initiated: {nullable: true, type: boolean}, allowed_organizations: {type: string}, assertion_attribute_email: {type: string}, assertion_attribute_groups: {type: string}, assertion_attribute_login: {type: string}, assertion_attribute_name: {type: string}, assertion_attribute_org: {type: string}, assertion_attribute_role: {type: string}, certificate_path: {type: string}, enabled: {nullable: true, type: boolean}, idp_metadata_url: {type: string}, max_issue_delay: {type: string}, metadata_valid_duration: {type: string}, org_mapping: {type: string}, private_key_path: {type: string}, relay_state: {type: string}, role_values_admin: {type: string}, role_values_editor: {type: string}, role_values_grafana_admin: {type: string}, signature_algorithm: {type: string}, single_logout: {nullable: true, type: boolean}}, type: object}, dashboards: {properties: {default_home_dashboard_path: {type: string}, versions_to_keep: {nullable: true, type: integer}}, type: object}, database: {properties: {ca_cert_path: {type: string}, cache_mode: {type: string}, client_cert_path: {type: string}, client_key_path: {type: string}, conn_max_lifetime: {nullable: true, type: integer}, host: {type: string}, log_queries: {nullable: true, type: boolean}, max_idle_conn: {nullable: true, type: integer}, max_open_conn: {nullable: true, type: integer}, name: {type: string}, password: {type: string}, path: {type: string}, server_cert_name: {type: string}, ssl_mode: {type: string}, type: {type: string}, url: {type: string}, user: {type: string}}, type: object}, dataproxy: {properties: {logging: {nullable: true, type: boolean}, send_user_header: {nullable: true, type: boolean}, timeout: {nullable: true, type: integer}}, type: object}, external_image_storage: {properties: {provider: {type: string}}, type: object}, external_image_storage.azure_blob: {properties: {account_key: {type: string}, account_name: {type: string}, container_name: {type: string}}, type: object}, external_image_storage.gcs: {properties: {bucket: {type: string}, key_file: {type: string}, path: {type: string}}, type: object}, external_image_storage.s3: {properties: {access_key: {type: string}, bucket: {type: string}, bucket_url: {type: string}, path: {type: string}, region: {type: string}, secret_key: {type: string}}, type: object}, external_image_storage.webdav: {properties: {password: {type: string}, public_url: {type: string}, url: {type: string}, username: {type: string}}, type: object}, feature_toggles: {properties: {enable: {type: string}}, type: object}, live: {properties: {allowed_origins: {type: string}, max_connections: {nullable: true, type: integer}}, type: object}, log: {properties: {filters: {type: string}, level: {type: string}, mode: {type: string}}, type: object}, log.console: {properties: {format: {type: string}, level: {type: string}}, type: object}, log.frontend: {properties: {custom_endpoint: {type: string}, enabled: {nullable: true, type: boolean}, log_endpoint_burst_limit: {nullable: true, type: integer}, log_endpoint_requests_per_second_limit: {nullable: true, type: integer}, sample_rate: {type: string}, sentry_dsn: {type: string}}, type: object}, metrics: {properties: {basic_auth_password: {type: string}, basic_auth_username: {type: string}, enabled: {nullable: true, type: boolean}, interval_seconds: {nullable: true, type: integer}}, type: object}, metrics.graphite: {properties: {address: {type: string}, prefix: {type: string}}, type: object}, panels: {properties: {disable_sanitize_html: {nullable: true, type: boolean}}, type: object}, paths: {properties: {temp_data_lifetime: {type: string}}, type: object}, plugins: {properties: {allow_loading_unsigned_plugins: {type: string}, enable_alpha: {nullable: true, type: boolean}, plugin_admin_enabled: {nullable: true, type: boolean}, plugin_catalog_hidden_plugins: {type: string}, plugin_catalog_url: {type: string}}, required: [plugin_admin_enabled], type: object}, remote_cache: {properties: {connstr: {type: string}, type: {type: string}}, type: object}, rendering: {properties: {callback_url: {type: string}, concurrent_render_request_limit: {nullable: true, type: integer}, server_url: {type: string}}, type: object}, security: {properties: {admin_password: {type: string}, admin_user: {type: string}, allow_embedding: {nullable: true, type: boolean}, cookie_samesite: {type: string}, cookie_secure: {nullable: true, type: boolean}, data_source_proxy_whitelist: {type: string}, disable_gravatar: {nullable: true, type: boolean}, login_remember_days: {nullable: true, type: integer}, secret_key: {type: string}, strict_transport_security: {nullable: true, type: boolean}, strict_transport_security_max_age_seconds: {nullable: true, type: integer}, strict_transport_security_preload: {nullable: true, type: boolean}, strict_transport_security_subdomains: {nullable: true, type: boolean}, x_content_type_options: {nullable: true, type: boolean}, x_xss_protection: {nullable: true, type: boolean}}, type: object}, server: {properties: {cert_file: {type: string}, cert_key: {type: string}, domain: {type: string}, enable_gzip: {nullable: true, type: boolean}, enforce_domain: {nullable: true, type: boolean}, http_addr: {type: string}, http_port: {type: string}, protocol: {enum: [http, https], type: string}, root_url: {type: string}, router_logging: {nullable: true, type: boolean}, serve_from_sub_path: {nullable: true, type: boolean}, socket: {type: string}, static_root_path: {type: string}}, type: object}, smtp: {properties: {cert_file: {type: string}, ehlo_identity: {type: string}, enabled: {nullable: true, type: boolean}, from_address: {type: string}, from_name: {type: string}, host: {type: string}, key_file: {type: string}, password: {type: string}, skip_verify: {nullable: true, type: boolean}, user: {type: string}}, type: object}, snapshots: {properties: {external_enabled: {nullable: true, type: boolean}, external_snapshot_name: {type: string}, external_snapshot_url: {type: string}, snapshot_remove_expired: {nullable: true, type: boolean}}, type: object}, unified_alerting: {properties: {enabled: {nullable: true, type: boolean}, evaluation_timeout: {type: string}, execute_alerts: {type: boolean}, max_attempts: {type: integer}, min_interval: {type: string}}, type: object}, users: {properties: {allow_org_create: {nullable: true, type: boolean}, allow_sign_up: {nullable: true, type: boolean}, auto_assign_org: {nullable: true, type: boolean}, auto_assign_org_id: {type: string}, auto_assign_org_role: {type: string}, default_theme: {type: string}, editors_can_admin: {nullable: true, type: boolean}, login_hint: {type: string}, password_hint: {type: string}, viewers_can_edit: {nullable: true, type: boolean}}, type: object}}, type: object}, configMaps: {items: {type: string}, type: array}, containers: {items: {properties: {args: {items: {type: string}, type: array}, command: {items: {type: string}, type: array}, env: {items: {properties: {name: {type: string}, value: {type: string}, valueFrom: {properties: {configMapKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object}, fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object}, secretKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object}}, type: object}}, required: [name], type: object}, type: array}, envFrom: {items: {properties: {configMapRef: {properties: {name: {type: string}, optional: {type: boolean}}, type: object}, prefix: {type: string}, secretRef: {properties: {name: {type: string}, optional: {type: boolean}}, type: object}}, type: object}, type: array}, image: {type: string}, imagePullPolicy: {type: string}, lifecycle: {properties: {postStart: {properties: {exec: {properties: {command: {items: {type: string}, type: array}}, type: object}, httpGet: {properties: {host: {type: string}, httpHeaders: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, path: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, scheme: {type: string}}, required: [port], type: object}, tcpSocket: {properties: {host: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}}, type: object}, preStop: {properties: {exec: {properties: {command: {items: {type: string}, type: array}}, type: object}, httpGet: {properties: {host: {type: string}, httpHeaders: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, path: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, scheme: {type: string}}, required: [port], type: object}, tcpSocket: {properties: {host: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}}, type: object}}, type: object}, livenessProbe: {properties: {exec: {properties: {command: {items: {type: string}, type: array}}, type: object}, failureThreshold: {format: int32, type: integer}, grpc: {properties: {port: {format: int32, type: integer}, service: {type: string}}, required: [port], type: object}, httpGet: {properties: {host: {type: string}, httpHeaders: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, path: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, scheme: {type: string}}, required: [port], type: object}, initialDelaySeconds: {format: int32, type: integer}, periodSeconds: {format: int32, type: integer}, successThreshold: {format: int32, type: integer}, tcpSocket: {properties: {host: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}, terminationGracePeriodSeconds: {format: int64, type: integer}, timeoutSeconds: {format: int32, type: integer}}, type: object}, name: {type: string}, ports: {items: {properties: {containerPort: {format: int32, type: integer}, hostIP: {type: string}, hostPort: {format: int32, type: integer}, name: {type: string}, protocol: {default: TCP, type: string}}, required: [containerPort], type: object}, type: array, x-kubernetes-list-map-keys: [containerPort, protocol], x-kubernetes-list-type: map}, readinessProbe: {properties: {exec: {properties: {command: {items: {type: string}, type: array}}, type: object}, failureThreshold: {format: int32, type: integer}, grpc: {properties: {port: {format: int32, type: integer}, service: {type: string}}, required: [port], type: object}, httpGet: {properties: {host: {type: string}, httpHeaders: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, path: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, scheme: {type: string}}, required: [port], type: object}, initialDelaySeconds: {format: int32, type: integer}, periodSeconds: {format: int32, type: integer}, successThreshold: {format: int32, type: integer}, tcpSocket: {properties: {host: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}, terminationGracePeriodSeconds: {format: int64, type: integer}, timeoutSeconds: {format: int32, type: integer}}, type: object}, resources: {properties: {limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, securityContext: {properties: {allowPrivilegeEscalation: {type: boolean}, capabilities: {properties: {add: {items: {type: string}, type: array}, drop: {items: {type: string}, type: array}}, type: object}, privileged: {type: boolean}, procMount: {type: string}, readOnlyRootFilesystem: {type: boolean}, runAsGroup: {format: int64, type: integer}, runAsNonRoot: {type: boolean}, runAsUser: {format: int64, type: integer}, seLinuxOptions: {properties: {level: {type: string}, role: {type: string}, type: {type: string}, user: {type: string}}, type: object}, seccompProfile: {properties: {localhostProfile: {type: string}, type: {type: string}}, required: [type], type: object}, windowsOptions: {properties: {gmsaCredentialSpec: {type: string}, gmsaCredentialSpecName: {type: string}, hostProcess: {type: boolean}, runAsUserName: {type: string}}, type: object}}, type: object}, startupProbe: {properties: {exec: {properties: {command: {items: {type: string}, type: array}}, type: object}, failureThreshold: {format: int32, type: integer}, grpc: {properties: {port: {format: int32, type: integer}, service: {type: string}}, required: [port], type: object}, httpGet: {properties: {host: {type: string}, httpHeaders: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, path: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, scheme: {type: string}}, required: [port], type: object}, initialDelaySeconds: {format: int32, type: integer}, periodSeconds: {format: int32, type: integer}, successThreshold: {format: int32, type: integer}, tcpSocket: {properties: {host: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}, terminationGracePeriodSeconds: {format: int64, type: integer}, timeoutSeconds: {format: int32, type: integer}}, type: object}, stdin: {type: boolean}, stdinOnce: {type: boolean}, terminationMessagePath: {type: string}, terminationMessagePolicy: {type: string}, tty: {type: boolean}, volumeDevices: {items: {properties: {devicePath: {type: string}, name: {type: string}}, required: [devicePath, name], type: object}, type: array}, volumeMounts: {items: {properties: {mountPath: {type: string}, mountPropagation: {type: string}, name: {type: string}, readOnly: {type: boolean}, subPath: {type: string}, subPathExpr: {type: string}}, required: [mountPath, name], type: object}, type: array}, workingDir: {type: string}}, required: [name], type: object}, type: array}, dashboardContentCacheDuration: {type: string}, dashboardLabelSelector: {items: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object}, type: array}, dashboardNamespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object}, dataStorage: {properties: {accessModes: {items: {type: string}, type: array}, annotations: {additionalProperties: {type: string}, type: object}, class: {type: string}, labels: {additionalProperties: {type: string}, type: object}, size: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, volumeName: {type: string}}, type: object}, deployment: {properties: {affinity: {properties: {nodeAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {preference: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object}, weight: {format: int32, type: integer}}, required: [preference, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {properties: {nodeSelectorTerms: {items: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object}, type: array}}, required: [nodeSelectorTerms], type: object}}, type: object}, podAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}, podAntiAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}}, type: object}, annotations: {additionalProperties: {type: string}, type: object}, containerSecurityContext: {properties: {allowPrivilegeEscalation: {type: boolean}, capabilities: {properties: {add: {items: {type: string}, type: array}, drop: {items: {type: string}, type: array}}, type: object}, privileged: {type: boolean}, procMount: {type: string}, readOnlyRootFilesystem: {type: boolean}, runAsGroup: {format: int64, type: integer}, runAsNonRoot: {type: boolean}, runAsUser: {format: int64, type: integer}, seLinuxOptions: {properties: {level: {type: string}, role: {type: string}, type: {type: string}, user: {type: string}}, type: object}, seccompProfile: {properties: {localhostProfile: {type: string}, type: {type: string}}, required: [type], type: object}, windowsOptions: {properties: {gmsaCredentialSpec: {type: string}, gmsaCredentialSpecName: {type: string}, hostProcess: {type: boolean}, runAsUserName: {type: string}}, type: object}}, type: object}, env: {items: {properties: {name: {type: string}, value: {type: string}, valueFrom: {properties: {configMapKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object}, fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object}, secretKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object}}, type: object}}, required: [name], type: object}, type: array}, envFrom: {items: {properties: {configMapRef: {properties: {name: {type: string}, optional: {type: boolean}}, type: object}, prefix: {type: string}, secretRef: {properties: {name: {type: string}, optional: {type: boolean}}, type: object}}, type: object}, type: array}, extraInitContainers: {items: {properties: {args: {items: {type: string}, type: array}, command: {items: {type: string}, type: array}, env: {items: {properties: {name: {type: string}, value: {type: string}, valueFrom: {properties: {configMapKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object}, fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object}, secretKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object}}, type: object}}, required: [name], type: object}, type: array}, envFrom: {items: {properties: {configMapRef: {properties: {name: {type: string}, optional: {type: boolean}}, type: object}, prefix: {type: string}, secretRef: {properties: {name: {type: string}, optional: {type: boolean}}, type: object}}, type: object}, type: array}, image: {type: string}, imagePullPolicy: {type: string}, lifecycle: {properties: {postStart: {properties: {exec: {properties: {command: {items: {type: string}, type: array}}, type: object}, httpGet: {properties: {host: {type: string}, httpHeaders: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, path: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, scheme: {type: string}}, required: [port], type: object}, tcpSocket: {properties: {host: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}}, type: object}, preStop: {properties: {exec: {properties: {command: {items: {type: string}, type: array}}, type: object}, httpGet: {properties: {host: {type: string}, httpHeaders: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, path: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, scheme: {type: string}}, required: [port], type: object}, tcpSocket: {properties: {host: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}}, type: object}}, type: object}, livenessProbe: {properties: {exec: {properties: {command: {items: {type: string}, type: array}}, type: object}, failureThreshold: {format: int32, type: integer}, grpc: {properties: {port: {format: int32, type: integer}, service: {type: string}}, required: [port], type: object}, httpGet: {properties: {host: {type: string}, httpHeaders: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, path: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, scheme: {type: string}}, required: [port], type: object}, initialDelaySeconds: {format: int32, type: integer}, periodSeconds: {format: int32, type: integer}, successThreshold: {format: int32, type: integer}, tcpSocket: {properties: {host: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}, terminationGracePeriodSeconds: {format: int64, type: integer}, timeoutSeconds: {format: int32, type: integer}}, type: object}, name: {type: string}, ports: {items: {properties: {containerPort: {format: int32, type: integer}, hostIP: {type: string}, hostPort: {format: int32, type: integer}, name: {type: string}, protocol: {default: TCP, type: string}}, required: [containerPort], type: object}, type: array, x-kubernetes-list-map-keys: [containerPort, protocol], x-kubernetes-list-type: map}, readinessProbe: {properties: {exec: {properties: {command: {items: {type: string}, type: array}}, type: object}, failureThreshold: {format: int32, type: integer}, grpc: {properties: {port: {format: int32, type: integer}, service: {type: string}}, required: [port], type: object}, httpGet: {properties: {host: {type: string}, httpHeaders: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, path: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, scheme: {type: string}}, required: [port], type: object}, initialDelaySeconds: {format: int32, type: integer}, periodSeconds: {format: int32, type: integer}, successThreshold: {format: int32, type: integer}, tcpSocket: {properties: {host: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}, terminationGracePeriodSeconds: {format: int64, type: integer}, timeoutSeconds: {format: int32, type: integer}}, type: object}, resources: {properties: {limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, securityContext: {properties: {allowPrivilegeEscalation: {type: boolean}, capabilities: {properties: {add: {items: {type: string}, type: array}, drop: {items: {type: string}, type: array}}, type: object}, privileged: {type: boolean}, procMount: {type: string}, readOnlyRootFilesystem: {type: boolean}, runAsGroup: {format: int64, type: integer}, runAsNonRoot: {type: boolean}, runAsUser: {format: int64, type: integer}, seLinuxOptions: {properties: {level: {type: string}, role: {type: string}, type: {type: string}, user: {type: string}}, type: object}, seccompProfile: {properties: {localhostProfile: {type: string}, type: {type: string}}, required: [type], type: object}, windowsOptions: {properties: {gmsaCredentialSpec: {type: string}, gmsaCredentialSpecName: {type: string}, hostProcess: {type: boolean}, runAsUserName: {type: string}}, type: object}}, type: object}, startupProbe: {properties: {exec: {properties: {command: {items: {type: string}, type: array}}, type: object}, failureThreshold: {format: int32, type: integer}, grpc: {properties: {port: {format: int32, type: integer}, service: {type: string}}, required: [port], type: object}, httpGet: {properties: {host: {type: string}, httpHeaders: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, path: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, scheme: {type: string}}, required: [port], type: object}, initialDelaySeconds: {format: int32, type: integer}, periodSeconds: {format: int32, type: integer}, successThreshold: {format: int32, type: integer}, tcpSocket: {properties: {host: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}, terminationGracePeriodSeconds: {format: int64, type: integer}, timeoutSeconds: {format: int32, type: integer}}, type: object}, stdin: {type: boolean}, stdinOnce: {type: boolean}, terminationMessagePath: {type: string}, terminationMessagePolicy: {type: string}, tty: {type: boolean}, volumeDevices: {items: {properties: {devicePath: {type: string}, name: {type: string}}, required: [devicePath, name], type: object}, type: array}, volumeMounts: {items: {properties: {mountPath: {type: string}, mountPropagation: {type: string}, name: {type: string}, readOnly: {type: boolean}, subPath: {type: string}, subPathExpr: {type: string}}, required: [mountPath, name], type: object}, type: array}, workingDir: {type: string}}, required: [name], type: object}, type: array}, extraVolumeMounts: {items: {properties: {mountPath: {type: string}, mountPropagation: {type: string}, name: {type: string}, readOnly: {type: boolean}, subPath: {type: string}, subPathExpr: {type: string}}, required: [mountPath, name], type: object}, type: array}, extraVolumes: {items: {properties: {awsElasticBlockStore: {properties: {fsType: {type: string}, partition: {format: int32, type: integer}, readOnly: {type: boolean}, volumeID: {type: string}}, required: [volumeID], type: object}, azureDisk: {properties: {cachingMode: {type: string}, diskName: {type: string}, diskURI: {type: string}, fsType: {type: string}, kind: {type: string}, readOnly: {type: boolean}}, required: [diskName, diskURI], type: object}, azureFile: {properties: {readOnly: {type: boolean}, secretName: {type: string}, shareName: {type: string}}, required: [secretName, shareName], type: object}, cephfs: {properties: {monitors: {items: {type: string}, type: array}, path: {type: string}, readOnly: {type: boolean}, secretFile: {type: string}, secretRef: {properties: {name: {type: string}}, type: object}, user: {type: string}}, required: [monitors], type: object}, cinder: {properties: {fsType: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object}, volumeID: {type: string}}, required: [volumeID], type: object}, configMap: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, name: {type: string}, optional: {type: boolean}}, type: object}, csi: {properties: {driver: {type: string}, fsType: {type: string}, nodePublishSecretRef: {properties: {name: {type: string}}, type: object}, readOnly: {type: boolean}, volumeAttributes: {additionalProperties: {type: string}, type: object}}, required: [driver], type: object}, downwardAPI: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object}, mode: {format: int32, type: integer}, path: {type: string}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object}}, required: [path], type: object}, type: array}}, type: object}, emptyDir: {properties: {medium: {type: string}, sizeLimit: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, ephemeral: {properties: {volumeClaimTemplate: {properties: {metadata: {type: object}, spec: {properties: {accessModes: {items: {type: string}, type: array}, dataSource: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}}, required: [kind, name], type: object}, dataSourceRef: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}}, required: [kind, name], type: object}, resources: {properties: {limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, selector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object}, storageClassName: {type: string}, volumeMode: {type: string}, volumeName: {type: string}}, type: object}}, required: [spec], type: object}}, type: object}, fc: {properties: {fsType: {type: string}, lun: {format: int32, type: integer}, readOnly: {type: boolean}, targetWWNs: {items: {type: string}, type: array}, wwids: {items: {type: string}, type: array}}, type: object}, flexVolume: {properties: {driver: {type: string}, fsType: {type: string}, options: {additionalProperties: {type: string}, type: object}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object}}, required: [driver], type: object}, flocker: {properties: {datasetName: {type: string}, datasetUUID: {type: string}}, type: object}, gcePersistentDisk: {properties: {fsType: {type: string}, partition: {format: int32, type: integer}, pdName: {type: string}, readOnly: {type: boolean}}, required: [pdName], type: object}, gitRepo: {properties: {directory: {type: string}, repository: {type: string}, revision: {type: string}}, required: [repository], type: object}, glusterfs: {properties: {endpoints: {type: string}, path: {type: string}, readOnly: {type: boolean}}, required: [endpoints, path], type: object}, hostPath: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, iscsi: {properties: {chapAuthDiscovery: {type: boolean}, chapAuthSession: {type: boolean}, fsType: {type: string}, initiatorName: {type: string}, iqn: {type: string}, iscsiInterface: {type: string}, lun: {format: int32, type: integer}, portals: {items: {type: string}, type: array}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object}, targetPortal: {type: string}}, required: [iqn, lun, targetPortal], type: object}, name: {type: string}, nfs: {properties: {path: {type: string}, readOnly: {type: boolean}, server: {type: string}}, required: [path, server], type: object}, persistentVolumeClaim: {properties: {claimName: {type: string}, readOnly: {type: boolean}}, required: [claimName], type: object}, photonPersistentDisk: {properties: {fsType: {type: string}, pdID: {type: string}}, required: [pdID], type: object}, portworxVolume: {properties: {fsType: {type: string}, readOnly: {type: boolean}, volumeID: {type: string}}, required: [volumeID], type: object}, projected: {properties: {defaultMode: {format: int32, type: integer}, sources: {items: {properties: {configMap: {properties: {items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, name: {type: string}, optional: {type: boolean}}, type: object}, downwardAPI: {properties: {items: {items: {properties: {fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object}, mode: {format: int32, type: integer}, path: {type: string}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object}}, required: [path], type: object}, type: array}}, type: object}, secret: {properties: {items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, name: {type: string}, optional: {type: boolean}}, type: object}, serviceAccountToken: {properties: {audience: {type: string}, expirationSeconds: {format: int64, type: integer}, path: {type: string}}, required: [path], type: object}}, type: object}, type: array}}, type: object}, quobyte: {properties: {group: {type: string}, readOnly: {type: boolean}, registry: {type: string}, tenant: {type: string}, user: {type: string}, volume: {type: string}}, required: [registry, volume], type: object}, rbd: {properties: {fsType: {type: string}, image: {type: string}, keyring: {type: string}, monitors: {items: {type: string}, type: array}, pool: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object}, user: {type: string}}, required: [image, monitors], type: object}, scaleIO: {properties: {fsType: {type: string}, gateway: {type: string}, protectionDomain: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object}, sslEnabled: {type: boolean}, storageMode: {type: string}, storagePool: {type: string}, system: {type: string}, volumeName: {type: string}}, required: [gateway, secretRef, system], type: object}, secret: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, optional: {type: boolean}, secretName: {type: string}}, type: object}, storageos: {properties: {fsType: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object}, volumeName: {type: string}, volumeNamespace: {type: string}}, type: object}, vsphereVolume: {properties: {fsType: {type: string}, storagePolicyID: {type: string}, storagePolicyName: {type: string}, volumePath: {type: string}}, required: [volumePath], type: object}}, required: [name], type: object}, type: array}, hostNetwork: {nullable: true, type: boolean}, httpProxy: {properties: {enabled: {type: boolean}, noProxy: {type: string}, secureUrl: {type: string}, url: {type: string}}, required: [enabled], type: object}, labels: {additionalProperties: {type: string}, type: object}, nodeSelector: {additionalProperties: {type: string}, type: object}, priorityClassName: {type: string}, replicas: {format: int32, nullable: true, type: integer}, securityContext: {properties: {fsGroup: {format: int64, type: integer}, fsGroupChangePolicy: {type: string}, runAsGroup: {format: int64, type: integer}, runAsNonRoot: {type: boolean}, runAsUser: {format: int64, type: integer}, seLinuxOptions: {properties: {level: {type: string}, role: {type: string}, type: {type: string}, user: {type: string}}, type: object}, seccompProfile: {properties: {localhostProfile: {type: string}, type: {type: string}}, required: [type], type: object}, supplementalGroups: {items: {format: int64, type: integer}, type: array}, sysctls: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, windowsOptions: {properties: {gmsaCredentialSpec: {type: string}, gmsaCredentialSpecName: {type: string}, hostProcess: {type: boolean}, runAsUserName: {type: string}}, type: object}}, type: object}, skipCreateAdminAccount: {nullable: true, type: boolean}, strategy: {properties: {rollingUpdate: {properties: {maxSurge: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, maxUnavailable: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, type: object}, type: {type: string}}, type: object}, terminationGracePeriodSeconds: {format: int64, type: integer}, tolerations: {items: {properties: {effect: {type: string}, key: {type: string}, operator: {type: string}, tolerationSeconds: {format: int64, type: integer}, value: {type: string}}, type: object}, type: array}}, type: object}, ingress: {properties: {annotations: {additionalProperties: {type: string}, type: object}, enabled: {type: boolean}, hostname: {type: string}, ingressClassName: {type: string}, labels: {additionalProperties: {type: string}, type: object}, path: {type: string}, pathType: {type: string}, targetPort: {type: string}, termination: {type: string}, tlsEnabled: {type: boolean}, tlsSecretName: {type: string}}, type: object}, initImage: {type: string}, initResources: {properties: {limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, jsonnet: {properties: {libraryLabelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object}}, type: object}, livenessProbeSpec: {properties: {failureThreshold: {format: int32, type: integer}, initialDelaySeconds: {format: int32, type: integer}, periodSeconds: {format: int32, type: integer}, scheme: {type: string}, successThreshold: {format: int32, type: integer}, timeoutSeconds: {format: int32, type: integer}}, type: object}, readinessProbeSpec: {properties: {failureThreshold: {format: int32, type: integer}, initialDelaySeconds: {format: int32, type: integer}, periodSeconds: {format: int32, type: integer}, scheme: {type: string}, successThreshold: {format: int32, type: integer}, timeoutSeconds: {format: int32, type: integer}}, type: object}, resources: {properties: {limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, secrets: {items: {type: string}, type: array}, service: {properties: {annotations: {additionalProperties: {type: string}, type: object}, clusterIP: {type: string}, labels: {additionalProperties: {type: string}, type: object}, name: {type: string}, ports: {items: {properties: {appProtocol: {type: string}, name: {type: string}, nodePort: {format: int32, type: integer}, port: {format: int32, type: integer}, protocol: {default: TCP, type: string}, targetPort: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}, type: array}, type: {type: string}}, type: object}, serviceAccount: {properties: {annotations: {additionalProperties: {type: string}, type: object}, imagePullSecrets: {items: {properties: {name: {type: string}}, type: object}, type: array}, labels: {additionalProperties: {type: string}, type: object}, skip: {type: boolean}}, type: object}}, type: object}, status: {properties: {dashboards: {items: {properties: {folderId: {format: int64, type: integer}, folderName: {type: string}, hash: {type: string}, name: {type: string}, namespace: {type: string}, uid: {type: string}}, required: [folderId, folderName, hash, name, namespace, uid], type: object}, nullable: true, type: array}, failedPlugins: {items: {properties: {name: {type: string}, version: {type: string}}, required: [name, version], type: object}, nullable: true, type: array}, installedPlugins: {items: {properties: {name: {type: string}, version: {type: string}}, required: [name, version], type: object}, nullable: true, type: array}, message: {type: string}, phase: {type: string}, previousServiceName: {type: string}}, type: object}}, type: object}}, served: true, storage: true, subresources: {status: {}}}]}, status: {acceptedNames: {kind: "", plural: ""}, conditions: [], storedVersions: []}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.13.0}, name: keyrings.core.opni.io}, spec: {group: core.opni.io, names: {kind: Keyring, listKind: KeyringList, plural: keyrings, singular: keyring}, scope: Namespaced, versions: [{name: v1beta1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, data: {format: byte, type: string}, kind: {type: string}, metadata: {type: object}}, type: object}}, served: true, storage: true}]}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.11.3}, creationTimestamp: null, name: logadapters.logging.opni.io}, spec: {group: logging.opni.io, names: {kind: LogAdapter, listKind: LogAdapterList, plural: logadapters, singular: logadapter}, scope: Cluster, versions: [{name: v1beta1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {aks: {type: object}, containerLogDir: {type: string}, controlNamespace: {type: string}, eks: {type: object}, fluentConfig: {properties: {fluentbit: {properties: {HostNetwork: {type: boolean}, affinity: {properties: {nodeAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {preference: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, weight: {format: int32, type: integer}}, required: [preference, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {properties: {nodeSelectorTerms: {items: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, type: array}}, required: [nodeSelectorTerms], type: object, x-kubernetes-map-type: atomic}}, type: object}, podAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}, podAntiAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}}, type: object}, annotations: {additionalProperties: {type: string}, type: object}, bufferStorage: {properties: {storage.backlog.mem_limit: {type: string}, storage.checksum: {type: string}, storage.path: {type: string}, storage.sync: {type: string}}, type: object}, bufferStorageVolume: {properties: {emptyDir: {properties: {medium: {type: string}, sizeLimit: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, host_path: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, hostPath: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, pvc: {properties: {source: {properties: {claimName: {type: string}, readOnly: {type: boolean}}, required: [claimName], type: object}, spec: {properties: {accessModes: {items: {type: string}, type: array}, dataSource: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}}, required: [kind, name], type: object, x-kubernetes-map-type: atomic}, dataSourceRef: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}, namespace: {type: string}}, required: [kind, name], type: object}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, selector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, storageClassName: {type: string}, volumeMode: {type: string}, volumeName: {type: string}}, type: object}}, type: object}}, type: object}, bufferVolumeArgs: {items: {type: string}, type: array}, bufferVolumeImage: {properties: {imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, pullPolicy: {type: string}, repository: {type: string}, tag: {type: string}}, type: object}, bufferVolumeMetrics: {properties: {interval: {type: string}, path: {type: string}, port: {format: int32, type: integer}, prometheusAnnotations: {type: boolean}, prometheusRules: {type: boolean}, serviceMonitor: {type: boolean}, serviceMonitorConfig: {properties: {additionalLabels: {additionalProperties: {type: string}, type: object}, honorLabels: {type: boolean}, metricRelabelings: {items: {properties: {action: {default: replace, enum: [replace, Replace, keep, Keep, drop, Drop, hashmod, HashMod, labelmap, LabelMap, labeldrop, LabelDrop, labelkeep, LabelKeep, lowercase, Lowercase, uppercase, Uppercase], type: string}, modulus: {format: int64, type: integer}, regex: {type: string}, replacement: {type: string}, separator: {type: string}, sourceLabels: {items: {pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$', type: string}, type: array}, targetLabel: {type: string}}, type: object}, type: array}, relabelings: {items: {properties: {action: {default: replace, enum: [replace, Replace, keep, Keep, drop, Drop, hashmod, HashMod, labelmap, LabelMap, labeldrop, LabelDrop, labelkeep, LabelKeep, lowercase, Lowercase, uppercase, Uppercase], type: string}, modulus: {format: int64, type: integer}, regex: {type: string}, replacement: {type: string}, separator: {type: string}, sourceLabels: {items: {pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$', type: string}, type: array}, targetLabel: {type: string}}, type: object}, type: array}, scheme: {type: string}, tlsConfig: {properties: {ca: {properties: {configMap: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, secret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}, caFile: {type: string}, cert: {properties: {configMap: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, secret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}, certFile: {type: string}, insecureSkipVerify: {type: boolean}, keyFile: {type: string}, keySecret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, serverName: {type: string}}, type: object}}, type: object}, timeout: {type: string}}, type: object}, coroStackSize: {format: int32, type: integer}, customConfigSecret: {type: string}, daemonsetAnnotations: {additionalProperties: {type: string}, type: object}, disableKubernetesFilter: {type: boolean}, dnsConfig: {properties: {nameservers: {items: {type: string}, type: array}, options: {items: {properties: {name: {type: string}, value: {type: string}}, type: object}, type: array}, searches: {items: {type: string}, type: array}}, type: object}, dnsPolicy: {type: string}, enableUpstream: {type: boolean}, envVars: {items: {properties: {name: {type: string}, value: {type: string}, valueFrom: {properties: {configMapKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object, x-kubernetes-map-type: atomic}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object, x-kubernetes-map-type: atomic}, secretKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}}, required: [name], type: object}, type: array}, extraVolumeMounts: {items: {properties: {destination: {pattern: ^/.+$, type: string}, readOnly: {type: boolean}, source: {pattern: ^/.+$, type: string}}, required: [destination, source], type: object}, type: array}, filterAws: {properties: {Match: {type: string}, account_id: {type: boolean}, ami_id: {type: boolean}, az: {type: boolean}, ec2_instance_id: {type: boolean}, ec2_instance_type: {type: boolean}, hostname: {type: boolean}, imds_version: {type: string}, private_ip: {type: boolean}, vpc_id: {type: boolean}}, type: object}, filterKubernetes: {properties: {Annotations: {type: string}, Buffer_Size: {type: string}, Cache_Use_Docker_Id: {type: string}, DNS_Retries: {type: string}, DNS_Wait_Time: {type: string}, Dummy_Meta: {type: string}, K8S-Logging.Exclude: {type: string}, K8S-Logging.Parser: {type: string}, Keep_Log: {type: string}, Kube_CA_File: {type: string}, Kube_CA_Path: {type: string}, Kube_Meta_Cache_TTL: {type: string}, Kube_Tag_Prefix: {type: string}, Kube_Token_File: {type: string}, Kube_Token_TTL: {type: string}, Kube_URL: {type: string}, Kube_meta_preload_cache_dir: {type: string}, Kubelet_Port: {type: string}, Labels: {type: string}, Match: {type: string}, Merge_Log: {type: string}, Merge_Log_Key: {type: string}, Merge_Log_Trim: {type: string}, Merge_Parser: {type: string}, Regex_Parser: {type: string}, Use_Journal: {type: string}, Use_Kubelet: {type: string}, tls.debug: {type: string}, tls.verify: {type: string}}, type: object}, filterModify: {items: {properties: {conditions: {items: {properties: {A_key_matches: {properties: {key: {type: string}}, type: object}, Key_does_not_exist: {properties: {key: {type: string}, value: {type: string}}, type: object}, Key_exists: {properties: {key: {type: string}}, type: object}, Key_value_does_not_equal: {properties: {key: {type: string}, value: {type: string}}, type: object}, Key_value_does_not_match: {properties: {key: {type: string}, value: {type: string}}, type: object}, Key_value_equals: {properties: {key: {type: string}, value: {type: string}}, type: object}, Key_value_matches: {properties: {key: {type: string}, value: {type: string}}, type: object}, Matching_keys_do_not_have_matching_values: {properties: {key: {type: string}, value: {type: string}}, type: object}, Matching_keys_have_matching_values: {properties: {key: {type: string}, value: {type: string}}, type: object}, No_key_matches: {properties: {key: {type: string}}, type: object}}, type: object}, type: array}, rules: {items: {properties: {Add: {properties: {key: {type: string}, value: {type: string}}, type: object}, Copy: {properties: {key: {type: string}, value: {type: string}}, type: object}, Hard_copy: {properties: {key: {type: string}, value: {type: string}}, type: object}, Hard_rename: {properties: {key: {type: string}, value: {type: string}}, type: object}, Remove: {properties: {key: {type: string}}, type: object}, Remove_regex: {properties: {key: {type: string}}, type: object}, Remove_wildcard: {properties: {key: {type: string}}, type: object}, Rename: {properties: {key: {type: string}, value: {type: string}}, type: object}, Set: {properties: {key: {type: string}, value: {type: string}}, type: object}}, type: object}, type: array}}, type: object}, type: array}, flush: {format: int32, type: integer}, forwardOptions: {properties: {Require_ack_response: {type: boolean}, Retry_Limit: {type: string}, Send_options: {type: boolean}, Tag: {type: string}, Time_as_Integer: {type: boolean}, storage.total_limit_size: {type: string}}, type: object}, grace: {format: int32, type: integer}, image: {properties: {imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, pullPolicy: {type: string}, repository: {type: string}, tag: {type: string}}, type: object}, inputTail: {properties: {Buffer_Chunk_Size: {type: string}, Buffer_Max_Size: {type: string}, DB: {type: string}, DB.journal_mode: {type: string}, DB.locking: {type: boolean}, DB_Sync: {type: string}, Docker_Mode: {type: string}, Docker_Mode_Flush: {type: string}, Docker_Mode_Parser: {type: string}, Exclude_Path: {type: string}, Ignore_Older: {type: string}, Key: {type: string}, Mem_Buf_Limit: {type: string}, Multiline: {type: string}, Multiline_Flush: {type: string}, Parser: {type: string}, Parser_Firstline: {type: string}, Parser_N: {items: {type: string}, type: array}, Path: {type: string}, Path_Key: {type: string}, Read_From_Head: {type: boolean}, Refresh_Interval: {type: string}, Rotate_Wait: {type: string}, Skip_Long_Lines: {type: string}, Tag: {type: string}, Tag_Regex: {type: string}, multiline.parser: {items: {type: string}, type: array}, storage.type: {type: string}}, type: object}, labels: {additionalProperties: {type: string}, type: object}, livenessDefaultCheck: {type: boolean}, livenessProbe: {properties: {exec: {properties: {command: {items: {type: string}, type: array}}, type: object}, failureThreshold: {format: int32, type: integer}, grpc: {properties: {port: {format: int32, type: integer}, service: {type: string}}, required: [port], type: object}, httpGet: {properties: {host: {type: string}, httpHeaders: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, path: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, scheme: {type: string}}, required: [port], type: object}, initialDelaySeconds: {format: int32, type: integer}, periodSeconds: {format: int32, type: integer}, successThreshold: {format: int32, type: integer}, tcpSocket: {properties: {host: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}, terminationGracePeriodSeconds: {format: int64, type: integer}, timeoutSeconds: {format: int32, type: integer}}, type: object}, logLevel: {type: string}, metrics: {properties: {interval: {type: string}, path: {type: string}, port: {format: int32, type: integer}, prometheusAnnotations: {type: boolean}, prometheusRules: {type: boolean}, serviceMonitor: {type: boolean}, serviceMonitorConfig: {properties: {additionalLabels: {additionalProperties: {type: string}, type: object}, honorLabels: {type: boolean}, metricRelabelings: {items: {properties: {action: {default: replace, enum: [replace, Replace, keep, Keep, drop, Drop, hashmod, HashMod, labelmap, LabelMap, labeldrop, LabelDrop, labelkeep, LabelKeep, lowercase, Lowercase, uppercase, Uppercase], type: string}, modulus: {format: int64, type: integer}, regex: {type: string}, replacement: {type: string}, separator: {type: string}, sourceLabels: {items: {pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$', type: string}, type: array}, targetLabel: {type: string}}, type: object}, type: array}, relabelings: {items: {properties: {action: {default: replace, enum: [replace, Replace, keep, Keep, drop, Drop, hashmod, HashMod, labelmap, LabelMap, labeldrop, LabelDrop, labelkeep, LabelKeep, lowercase, Lowercase, uppercase, Uppercase], type: string}, modulus: {format: int64, type: integer}, regex: {type: string}, replacement: {type: string}, separator: {type: string}, sourceLabels: {items: {pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$', type: string}, type: array}, targetLabel: {type: string}}, type: object}, type: array}, scheme: {type: string}, tlsConfig: {properties: {ca: {properties: {configMap: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, secret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}, caFile: {type: string}, cert: {properties: {configMap: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, secret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}, certFile: {type: string}, insecureSkipVerify: {type: boolean}, keyFile: {type: string}, keySecret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, serverName: {type: string}}, type: object}}, type: object}, timeout: {type: string}}, type: object}, mountPath: {type: string}, network: {properties: {connectTimeout: {format: int32, type: integer}, connectTimeoutLogError: {type: boolean}, dnsMode: {type: string}, dnsPreferIpv4: {type: boolean}, dnsResolver: {type: string}, keepalive: {type: boolean}, keepaliveIdleTimeout: {format: int32, type: integer}, keepaliveMaxRecycle: {format: int32, type: integer}, sourceAddress: {type: string}}, type: object}, nodeSelector: {additionalProperties: {type: string}, type: object}, parser: {type: string}, podPriorityClassName: {type: string}, position_db: {properties: {emptyDir: {properties: {medium: {type: string}, sizeLimit: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, host_path: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, hostPath: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, pvc: {properties: {source: {properties: {claimName: {type: string}, readOnly: {type: boolean}}, required: [claimName], type: object}, spec: {properties: {accessModes: {items: {type: string}, type: array}, dataSource: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}}, required: [kind, name], type: object, x-kubernetes-map-type: atomic}, dataSourceRef: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}, namespace: {type: string}}, required: [kind, name], type: object}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, selector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, storageClassName: {type: string}, volumeMode: {type: string}, volumeName: {type: string}}, type: object}}, type: object}}, type: object}, positiondb: {properties: {emptyDir: {properties: {medium: {type: string}, sizeLimit: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, host_path: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, hostPath: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, pvc: {properties: {source: {properties: {claimName: {type: string}, readOnly: {type: boolean}}, required: [claimName], type: object}, spec: {properties: {accessModes: {items: {type: string}, type: array}, dataSource: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}}, required: [kind, name], type: object, x-kubernetes-map-type: atomic}, dataSourceRef: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}, namespace: {type: string}}, required: [kind, name], type: object}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, selector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, storageClassName: {type: string}, volumeMode: {type: string}, volumeName: {type: string}}, type: object}}, type: object}}, type: object}, readinessProbe: {properties: {exec: {properties: {command: {items: {type: string}, type: array}}, type: object}, failureThreshold: {format: int32, type: integer}, grpc: {properties: {port: {format: int32, type: integer}, service: {type: string}}, required: [port], type: object}, httpGet: {properties: {host: {type: string}, httpHeaders: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, path: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, scheme: {type: string}}, required: [port], type: object}, initialDelaySeconds: {format: int32, type: integer}, periodSeconds: {format: int32, type: integer}, successThreshold: {format: int32, type: integer}, tcpSocket: {properties: {host: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}, terminationGracePeriodSeconds: {format: int64, type: integer}, timeoutSeconds: {format: int32, type: integer}}, type: object}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, security: {properties: {podSecurityContext: {properties: {fsGroup: {format: int64, type: integer}, fsGroupChangePolicy: {type: string}, runAsGroup: {format: int64, type: integer}, runAsNonRoot: {type: boolean}, runAsUser: {format: int64, type: integer}, seLinuxOptions: {properties: {level: {type: string}, role: {type: string}, type: {type: string}, user: {type: string}}, type: object}, seccompProfile: {properties: {localhostProfile: {type: string}, type: {type: string}}, required: [type], type: object}, supplementalGroups: {items: {format: int64, type: integer}, type: array}, sysctls: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, windowsOptions: {properties: {gmsaCredentialSpec: {type: string}, gmsaCredentialSpecName: {type: string}, hostProcess: {type: boolean}, runAsUserName: {type: string}}, type: object}}, type: object}, podSecurityPolicyCreate: {type: boolean}, roleBasedAccessControlCreate: {type: boolean}, securityContext: {properties: {allowPrivilegeEscalation: {type: boolean}, capabilities: {properties: {add: {items: {type: string}, type: array}, drop: {items: {type: string}, type: array}}, type: object}, privileged: {type: boolean}, procMount: {type: string}, readOnlyRootFilesystem: {type: boolean}, runAsGroup: {format: int64, type: integer}, runAsNonRoot: {type: boolean}, runAsUser: {format: int64, type: integer}, seLinuxOptions: {properties: {level: {type: string}, role: {type: string}, type: {type: string}, user: {type: string}}, type: object}, seccompProfile: {properties: {localhostProfile: {type: string}, type: {type: string}}, required: [type], type: object}, windowsOptions: {properties: {gmsaCredentialSpec: {type: string}, gmsaCredentialSpecName: {type: string}, hostProcess: {type: boolean}, runAsUserName: {type: string}}, type: object}}, type: object}, serviceAccount: {type: string}}, type: object}, serviceAccount: {properties: {automountServiceAccountToken: {type: boolean}, imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, metadata: {properties: {annotations: {additionalProperties: {type: string}, type: object}, labels: {additionalProperties: {type: string}, type: object}}, type: object}, secrets: {items: {properties: {apiVersion: {type: string}, fieldPath: {type: string}, kind: {type: string}, name: {type: string}, namespace: {type: string}, resourceVersion: {type: string}, uid: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}}, type: object}, syslogng_output: {properties: {json_date_format: {type: string}, json_date_key: {type: string}}, type: object}, targetHost: {type: string}, targetPort: {format: int32, type: integer}, tls: {properties: {enabled: {type: boolean}, secretName: {type: string}, sharedKey: {type: string}}, required: [enabled], type: object}, tolerations: {items: {properties: {effect: {type: string}, key: {type: string}, operator: {type: string}, tolerationSeconds: {format: int64, type: integer}, value: {type: string}}, type: object}, type: array}, updateStrategy: {properties: {rollingUpdate: {properties: {maxSurge: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, maxUnavailable: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, type: object}, type: {type: string}}, type: object}}, type: object}, fluentd: {properties: {affinity: {properties: {nodeAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {preference: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, weight: {format: int32, type: integer}}, required: [preference, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {properties: {nodeSelectorTerms: {items: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, type: array}}, required: [nodeSelectorTerms], type: object, x-kubernetes-map-type: atomic}}, type: object}, podAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}, podAntiAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}}, type: object}, annotations: {additionalProperties: {type: string}, type: object}, bufferStorageVolume: {properties: {emptyDir: {properties: {medium: {type: string}, sizeLimit: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, host_path: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, hostPath: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, pvc: {properties: {source: {properties: {claimName: {type: string}, readOnly: {type: boolean}}, required: [claimName], type: object}, spec: {properties: {accessModes: {items: {type: string}, type: array}, dataSource: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}}, required: [kind, name], type: object, x-kubernetes-map-type: atomic}, dataSourceRef: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}, namespace: {type: string}}, required: [kind, name], type: object}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, selector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, storageClassName: {type: string}, volumeMode: {type: string}, volumeName: {type: string}}, type: object}}, type: object}}, type: object}, bufferVolumeArgs: {items: {type: string}, type: array}, bufferVolumeImage: {properties: {imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, pullPolicy: {type: string}, repository: {type: string}, tag: {type: string}}, type: object}, bufferVolumeMetrics: {properties: {interval: {type: string}, path: {type: string}, port: {format: int32, type: integer}, prometheusAnnotations: {type: boolean}, prometheusRules: {type: boolean}, serviceMonitor: {type: boolean}, serviceMonitorConfig: {properties: {additionalLabels: {additionalProperties: {type: string}, type: object}, honorLabels: {type: boolean}, metricRelabelings: {items: {properties: {action: {default: replace, enum: [replace, Replace, keep, Keep, drop, Drop, hashmod, HashMod, labelmap, LabelMap, labeldrop, LabelDrop, labelkeep, LabelKeep, lowercase, Lowercase, uppercase, Uppercase], type: string}, modulus: {format: int64, type: integer}, regex: {type: string}, replacement: {type: string}, separator: {type: string}, sourceLabels: {items: {pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$', type: string}, type: array}, targetLabel: {type: string}}, type: object}, type: array}, relabelings: {items: {properties: {action: {default: replace, enum: [replace, Replace, keep, Keep, drop, Drop, hashmod, HashMod, labelmap, LabelMap, labeldrop, LabelDrop, labelkeep, LabelKeep, lowercase, Lowercase, uppercase, Uppercase], type: string}, modulus: {format: int64, type: integer}, regex: {type: string}, replacement: {type: string}, separator: {type: string}, sourceLabels: {items: {pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$', type: string}, type: array}, targetLabel: {type: string}}, type: object}, type: array}, scheme: {type: string}, tlsConfig: {properties: {ca: {properties: {configMap: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, secret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}, caFile: {type: string}, cert: {properties: {configMap: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, secret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}, certFile: {type: string}, insecureSkipVerify: {type: boolean}, keyFile: {type: string}, keySecret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, serverName: {type: string}}, type: object}}, type: object}, timeout: {type: string}}, type: object}, compressConfigFile: {type: boolean}, configCheckAnnotations: {additionalProperties: {type: string}, type: object}, configCheckResources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, configReloaderImage: {properties: {imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, pullPolicy: {type: string}, repository: {type: string}, tag: {type: string}}, type: object}, configReloaderResources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, disablePvc: {type: boolean}, dnsConfig: {properties: {nameservers: {items: {type: string}, type: array}, options: {items: {properties: {name: {type: string}, value: {type: string}}, type: object}, type: array}, searches: {items: {type: string}, type: array}}, type: object}, dnsPolicy: {type: string}, enableMsgpackTimeSupport: {type: boolean}, envVars: {items: {properties: {name: {type: string}, value: {type: string}, valueFrom: {properties: {configMapKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object, x-kubernetes-map-type: atomic}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object, x-kubernetes-map-type: atomic}, secretKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}}, required: [name], type: object}, type: array}, extraArgs: {items: {type: string}, type: array}, extraVolumes: {items: {properties: {containerName: {type: string}, path: {type: string}, volume: {properties: {emptyDir: {properties: {medium: {type: string}, sizeLimit: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, host_path: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, hostPath: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, pvc: {properties: {source: {properties: {claimName: {type: string}, readOnly: {type: boolean}}, required: [claimName], type: object}, spec: {properties: {accessModes: {items: {type: string}, type: array}, dataSource: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}}, required: [kind, name], type: object, x-kubernetes-map-type: atomic}, dataSourceRef: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}, namespace: {type: string}}, required: [kind, name], type: object}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, selector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, storageClassName: {type: string}, volumeMode: {type: string}, volumeName: {type: string}}, type: object}}, type: object}}, type: object}, volumeName: {type: string}}, type: object}, type: array}, fluentLogDestination: {type: string}, fluentOutLogrotate: {properties: {age: {type: string}, enabled: {type: boolean}, path: {type: string}, size: {type: string}}, required: [enabled], type: object}, fluentdPvcSpec: {properties: {emptyDir: {properties: {medium: {type: string}, sizeLimit: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, host_path: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, hostPath: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, pvc: {properties: {source: {properties: {claimName: {type: string}, readOnly: {type: boolean}}, required: [claimName], type: object}, spec: {properties: {accessModes: {items: {type: string}, type: array}, dataSource: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}}, required: [kind, name], type: object, x-kubernetes-map-type: atomic}, dataSourceRef: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}, namespace: {type: string}}, required: [kind, name], type: object}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, selector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, storageClassName: {type: string}, volumeMode: {type: string}, volumeName: {type: string}}, type: object}}, type: object}}, type: object}, forwardInputConfig: {properties: {add_tag_prefix: {type: string}, bind: {type: string}, chunk_size_limit: {type: string}, chunk_size_warn_limit: {type: string}, deny_keepalive: {type: boolean}, linger_timeout: {type: integer}, port: {type: string}, resolve_hostname: {type: boolean}, security: {properties: {allow_anonymous_source: {type: boolean}, self_hostname: {type: string}, shared_key: {type: string}, user_auth: {type: boolean}}, required: [self_hostname, shared_key], type: object}, send_keepalive_packet: {type: boolean}, skip_invalid_event: {type: boolean}, source_address_key: {type: string}, sourceHostnameKey: {type: string}, tag: {type: string}, transport: {properties: {ca_cert_path: {type: string}, ca_path: {type: string}, ca_private_key_passphrase: {type: string}, ca_private_key_path: {type: string}, cert_path: {type: string}, ciphers: {type: string}, client_cert_auth: {type: boolean}, insecure: {type: boolean}, private_key_passphrase: {type: string}, private_key_path: {type: string}, protocol: {type: string}, version: {type: string}}, type: object}}, type: object}, ignoreRepeatedLogInterval: {type: string}, ignoreSameLogInterval: {type: string}, image: {properties: {imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, pullPolicy: {type: string}, repository: {type: string}, tag: {type: string}}, type: object}, labels: {additionalProperties: {type: string}, type: object}, livenessDefaultCheck: {type: boolean}, livenessProbe: {properties: {exec: {properties: {command: {items: {type: string}, type: array}}, type: object}, failureThreshold: {format: int32, type: integer}, grpc: {properties: {port: {format: int32, type: integer}, service: {type: string}}, required: [port], type: object}, httpGet: {properties: {host: {type: string}, httpHeaders: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, path: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, scheme: {type: string}}, required: [port], type: object}, initialDelaySeconds: {format: int32, type: integer}, periodSeconds: {format: int32, type: integer}, successThreshold: {format: int32, type: integer}, tcpSocket: {properties: {host: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}, terminationGracePeriodSeconds: {format: int64, type: integer}, timeoutSeconds: {format: int32, type: integer}}, type: object}, logLevel: {type: string}, metrics: {properties: {interval: {type: string}, path: {type: string}, port: {format: int32, type: integer}, prometheusAnnotations: {type: boolean}, prometheusRules: {type: boolean}, serviceMonitor: {type: boolean}, serviceMonitorConfig: {properties: {additionalLabels: {additionalProperties: {type: string}, type: object}, honorLabels: {type: boolean}, metricRelabelings: {items: {properties: {action: {default: replace, enum: [replace, Replace, keep, Keep, drop, Drop, hashmod, HashMod, labelmap, LabelMap, labeldrop, LabelDrop, labelkeep, LabelKeep, lowercase, Lowercase, uppercase, Uppercase], type: string}, modulus: {format: int64, type: integer}, regex: {type: string}, replacement: {type: string}, separator: {type: string}, sourceLabels: {items: {pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$', type: string}, type: array}, targetLabel: {type: string}}, type: object}, type: array}, relabelings: {items: {properties: {action: {default: replace, enum: [replace, Replace, keep, Keep, drop, Drop, hashmod, HashMod, labelmap, LabelMap, labeldrop, LabelDrop, labelkeep, LabelKeep, lowercase, Lowercase, uppercase, Uppercase], type: string}, modulus: {format: int64, type: integer}, regex: {type: string}, replacement: {type: string}, separator: {type: string}, sourceLabels: {items: {pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$', type: string}, type: array}, targetLabel: {type: string}}, type: object}, type: array}, scheme: {type: string}, tlsConfig: {properties: {ca: {properties: {configMap: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, secret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}, caFile: {type: string}, cert: {properties: {configMap: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, secret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}, certFile: {type: string}, insecureSkipVerify: {type: boolean}, keyFile: {type: string}, keySecret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, serverName: {type: string}}, type: object}}, type: object}, timeout: {type: string}}, type: object}, nodeSelector: {additionalProperties: {type: string}, type: object}, podPriorityClassName: {type: string}, port: {format: int32, type: integer}, readinessDefaultCheck: {properties: {bufferFileNumber: {type: boolean}, bufferFileNumberMax: {format: int32, type: integer}, bufferFreeSpace: {type: boolean}, bufferFreeSpaceThreshold: {format: int32, type: integer}, failureThreshold: {format: int32, type: integer}, initialDelaySeconds: {format: int32, type: integer}, periodSeconds: {format: int32, type: integer}, successThreshold: {format: int32, type: integer}, timeoutSeconds: {format: int32, type: integer}}, type: object}, readinessProbe: {properties: {exec: {properties: {command: {items: {type: string}, type: array}}, type: object}, failureThreshold: {format: int32, type: integer}, grpc: {properties: {port: {format: int32, type: integer}, service: {type: string}}, required: [port], type: object}, httpGet: {properties: {host: {type: string}, httpHeaders: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, path: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, scheme: {type: string}}, required: [port], type: object}, initialDelaySeconds: {format: int32, type: integer}, periodSeconds: {format: int32, type: integer}, successThreshold: {format: int32, type: integer}, tcpSocket: {properties: {host: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}, terminationGracePeriodSeconds: {format: int64, type: integer}, timeoutSeconds: {format: int32, type: integer}}, type: object}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, rootDir: {type: string}, scaling: {properties: {drain: {properties: {annotations: {additionalProperties: {type: string}, type: object}, deleteVolume: {type: boolean}, enabled: {type: boolean}, image: {properties: {imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, pullPolicy: {type: string}, repository: {type: string}, tag: {type: string}}, type: object}, pauseImage: {properties: {imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, pullPolicy: {type: string}, repository: {type: string}, tag: {type: string}}, type: object}}, type: object}, podManagementPolicy: {type: string}, replicas: {type: integer}}, type: object}, security: {properties: {podSecurityContext: {properties: {fsGroup: {format: int64, type: integer}, fsGroupChangePolicy: {type: string}, runAsGroup: {format: int64, type: integer}, runAsNonRoot: {type: boolean}, runAsUser: {format: int64, type: integer}, seLinuxOptions: {properties: {level: {type: string}, role: {type: string}, type: {type: string}, user: {type: string}}, type: object}, seccompProfile: {properties: {localhostProfile: {type: string}, type: {type: string}}, required: [type], type: object}, supplementalGroups: {items: {format: int64, type: integer}, type: array}, sysctls: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, windowsOptions: {properties: {gmsaCredentialSpec: {type: string}, gmsaCredentialSpecName: {type: string}, hostProcess: {type: boolean}, runAsUserName: {type: string}}, type: object}}, type: object}, podSecurityPolicyCreate: {type: boolean}, roleBasedAccessControlCreate: {type: boolean}, securityContext: {properties: {allowPrivilegeEscalation: {type: boolean}, capabilities: {properties: {add: {items: {type: string}, type: array}, drop: {items: {type: string}, type: array}}, type: object}, privileged: {type: boolean}, procMount: {type: string}, readOnlyRootFilesystem: {type: boolean}, runAsGroup: {format: int64, type: integer}, runAsNonRoot: {type: boolean}, runAsUser: {format: int64, type: integer}, seLinuxOptions: {properties: {level: {type: string}, role: {type: string}, type: {type: string}, user: {type: string}}, type: object}, seccompProfile: {properties: {localhostProfile: {type: string}, type: {type: string}}, required: [type], type: object}, windowsOptions: {properties: {gmsaCredentialSpec: {type: string}, gmsaCredentialSpecName: {type: string}, hostProcess: {type: boolean}, runAsUserName: {type: string}}, type: object}}, type: object}, serviceAccount: {type: string}}, type: object}, serviceAccount: {properties: {automountServiceAccountToken: {type: boolean}, imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, metadata: {properties: {annotations: {additionalProperties: {type: string}, type: object}, labels: {additionalProperties: {type: string}, type: object}}, type: object}, secrets: {items: {properties: {apiVersion: {type: string}, fieldPath: {type: string}, kind: {type: string}, name: {type: string}, namespace: {type: string}, resourceVersion: {type: string}, uid: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}}, type: object}, statefulsetAnnotations: {additionalProperties: {type: string}, type: object}, tls: {properties: {enabled: {type: boolean}, secretName: {type: string}, sharedKey: {type: string}}, required: [enabled], type: object}, tolerations: {items: {properties: {effect: {type: string}, key: {type: string}, operator: {type: string}, tolerationSeconds: {format: int64, type: integer}, value: {type: string}}, type: object}, type: array}, topologySpreadConstraints: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, matchLabelKeys: {items: {type: string}, type: array, x-kubernetes-list-type: atomic}, maxSkew: {format: int32, type: integer}, minDomains: {format: int32, type: integer}, nodeAffinityPolicy: {type: string}, nodeTaintsPolicy: {type: string}, topologyKey: {type: string}, whenUnsatisfiable: {type: string}}, required: [maxSkew, topologyKey, whenUnsatisfiable], type: object}, type: array}, volumeModImage: {properties: {imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, pullPolicy: {type: string}, repository: {type: string}, tag: {type: string}}, type: object}, volumeMountChmod: {type: boolean}, workers: {format: int32, type: integer}}, type: object}}, type: object}, gke: {type: object}, k3s: {properties: {containerEngine: {type: string}, logPath: {type: string}}, type: object}, opniCluster: {properties: {name: {type: string}, namespace: {type: string}}, type: object}, provider: {enum: [aks, eks, gke, k3s, rke, rke2, generic], type: string}, rke: {properties: {logLevel: {type: string}}, type: object}, rke2: {properties: {logPath: {type: string}}, type: object}, rootFluentConfig: {properties: {fluentbit: {properties: {HostNetwork: {type: boolean}, affinity: {properties: {nodeAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {preference: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, weight: {format: int32, type: integer}}, required: [preference, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {properties: {nodeSelectorTerms: {items: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, type: array}}, required: [nodeSelectorTerms], type: object, x-kubernetes-map-type: atomic}}, type: object}, podAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}, podAntiAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}}, type: object}, annotations: {additionalProperties: {type: string}, type: object}, bufferStorage: {properties: {storage.backlog.mem_limit: {type: string}, storage.checksum: {type: string}, storage.path: {type: string}, storage.sync: {type: string}}, type: object}, bufferStorageVolume: {properties: {emptyDir: {properties: {medium: {type: string}, sizeLimit: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, host_path: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, hostPath: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, pvc: {properties: {source: {properties: {claimName: {type: string}, readOnly: {type: boolean}}, required: [claimName], type: object}, spec: {properties: {accessModes: {items: {type: string}, type: array}, dataSource: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}}, required: [kind, name], type: object, x-kubernetes-map-type: atomic}, dataSourceRef: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}, namespace: {type: string}}, required: [kind, name], type: object}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, selector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, storageClassName: {type: string}, volumeMode: {type: string}, volumeName: {type: string}}, type: object}}, type: object}}, type: object}, bufferVolumeArgs: {items: {type: string}, type: array}, bufferVolumeImage: {properties: {imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, pullPolicy: {type: string}, repository: {type: string}, tag: {type: string}}, type: object}, bufferVolumeMetrics: {properties: {interval: {type: string}, path: {type: string}, port: {format: int32, type: integer}, prometheusAnnotations: {type: boolean}, prometheusRules: {type: boolean}, serviceMonitor: {type: boolean}, serviceMonitorConfig: {properties: {additionalLabels: {additionalProperties: {type: string}, type: object}, honorLabels: {type: boolean}, metricRelabelings: {items: {properties: {action: {default: replace, enum: [replace, Replace, keep, Keep, drop, Drop, hashmod, HashMod, labelmap, LabelMap, labeldrop, LabelDrop, labelkeep, LabelKeep, lowercase, Lowercase, uppercase, Uppercase], type: string}, modulus: {format: int64, type: integer}, regex: {type: string}, replacement: {type: string}, separator: {type: string}, sourceLabels: {items: {pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$', type: string}, type: array}, targetLabel: {type: string}}, type: object}, type: array}, relabelings: {items: {properties: {action: {default: replace, enum: [replace, Replace, keep, Keep, drop, Drop, hashmod, HashMod, labelmap, LabelMap, labeldrop, LabelDrop, labelkeep, LabelKeep, lowercase, Lowercase, uppercase, Uppercase], type: string}, modulus: {format: int64, type: integer}, regex: {type: string}, replacement: {type: string}, separator: {type: string}, sourceLabels: {items: {pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$', type: string}, type: array}, targetLabel: {type: string}}, type: object}, type: array}, scheme: {type: string}, tlsConfig: {properties: {ca: {properties: {configMap: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, secret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}, caFile: {type: string}, cert: {properties: {configMap: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, secret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}, certFile: {type: string}, insecureSkipVerify: {type: boolean}, keyFile: {type: string}, keySecret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, serverName: {type: string}}, type: object}}, type: object}, timeout: {type: string}}, type: object}, coroStackSize: {format: int32, type: integer}, customConfigSecret: {type: string}, daemonsetAnnotations: {additionalProperties: {type: string}, type: object}, disableKubernetesFilter: {type: boolean}, dnsConfig: {properties: {nameservers: {items: {type: string}, type: array}, options: {items: {properties: {name: {type: string}, value: {type: string}}, type: object}, type: array}, searches: {items: {type: string}, type: array}}, type: object}, dnsPolicy: {type: string}, enableUpstream: {type: boolean}, envVars: {items: {properties: {name: {type: string}, value: {type: string}, valueFrom: {properties: {configMapKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object, x-kubernetes-map-type: atomic}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object, x-kubernetes-map-type: atomic}, secretKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}}, required: [name], type: object}, type: array}, extraVolumeMounts: {items: {properties: {destination: {pattern: ^/.+$, type: string}, readOnly: {type: boolean}, source: {pattern: ^/.+$, type: string}}, required: [destination, source], type: object}, type: array}, filterAws: {properties: {Match: {type: string}, account_id: {type: boolean}, ami_id: {type: boolean}, az: {type: boolean}, ec2_instance_id: {type: boolean}, ec2_instance_type: {type: boolean}, hostname: {type: boolean}, imds_version: {type: string}, private_ip: {type: boolean}, vpc_id: {type: boolean}}, type: object}, filterKubernetes: {properties: {Annotations: {type: string}, Buffer_Size: {type: string}, Cache_Use_Docker_Id: {type: string}, DNS_Retries: {type: string}, DNS_Wait_Time: {type: string}, Dummy_Meta: {type: string}, K8S-Logging.Exclude: {type: string}, K8S-Logging.Parser: {type: string}, Keep_Log: {type: string}, Kube_CA_File: {type: string}, Kube_CA_Path: {type: string}, Kube_Meta_Cache_TTL: {type: string}, Kube_Tag_Prefix: {type: string}, Kube_Token_File: {type: string}, Kube_Token_TTL: {type: string}, Kube_URL: {type: string}, Kube_meta_preload_cache_dir: {type: string}, Kubelet_Port: {type: string}, Labels: {type: string}, Match: {type: string}, Merge_Log: {type: string}, Merge_Log_Key: {type: string}, Merge_Log_Trim: {type: string}, Merge_Parser: {type: string}, Regex_Parser: {type: string}, Use_Journal: {type: string}, Use_Kubelet: {type: string}, tls.debug: {type: string}, tls.verify: {type: string}}, type: object}, filterModify: {items: {properties: {conditions: {items: {properties: {A_key_matches: {properties: {key: {type: string}}, type: object}, Key_does_not_exist: {properties: {key: {type: string}, value: {type: string}}, type: object}, Key_exists: {properties: {key: {type: string}}, type: object}, Key_value_does_not_equal: {properties: {key: {type: string}, value: {type: string}}, type: object}, Key_value_does_not_match: {properties: {key: {type: string}, value: {type: string}}, type: object}, Key_value_equals: {properties: {key: {type: string}, value: {type: string}}, type: object}, Key_value_matches: {properties: {key: {type: string}, value: {type: string}}, type: object}, Matching_keys_do_not_have_matching_values: {properties: {key: {type: string}, value: {type: string}}, type: object}, Matching_keys_have_matching_values: {properties: {key: {type: string}, value: {type: string}}, type: object}, No_key_matches: {properties: {key: {type: string}}, type: object}}, type: object}, type: array}, rules: {items: {properties: {Add: {properties: {key: {type: string}, value: {type: string}}, type: object}, Copy: {properties: {key: {type: string}, value: {type: string}}, type: object}, Hard_copy: {properties: {key: {type: string}, value: {type: string}}, type: object}, Hard_rename: {properties: {key: {type: string}, value: {type: string}}, type: object}, Remove: {properties: {key: {type: string}}, type: object}, Remove_regex: {properties: {key: {type: string}}, type: object}, Remove_wildcard: {properties: {key: {type: string}}, type: object}, Rename: {properties: {key: {type: string}, value: {type: string}}, type: object}, Set: {properties: {key: {type: string}, value: {type: string}}, type: object}}, type: object}, type: array}}, type: object}, type: array}, flush: {format: int32, type: integer}, forwardOptions: {properties: {Require_ack_response: {type: boolean}, Retry_Limit: {type: string}, Send_options: {type: boolean}, Tag: {type: string}, Time_as_Integer: {type: boolean}, storage.total_limit_size: {type: string}}, type: object}, grace: {format: int32, type: integer}, image: {properties: {imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, pullPolicy: {type: string}, repository: {type: string}, tag: {type: string}}, type: object}, inputTail: {properties: {Buffer_Chunk_Size: {type: string}, Buffer_Max_Size: {type: string}, DB: {type: string}, DB.journal_mode: {type: string}, DB.locking: {type: boolean}, DB_Sync: {type: string}, Docker_Mode: {type: string}, Docker_Mode_Flush: {type: string}, Docker_Mode_Parser: {type: string}, Exclude_Path: {type: string}, Ignore_Older: {type: string}, Key: {type: string}, Mem_Buf_Limit: {type: string}, Multiline: {type: string}, Multiline_Flush: {type: string}, Parser: {type: string}, Parser_Firstline: {type: string}, Parser_N: {items: {type: string}, type: array}, Path: {type: string}, Path_Key: {type: string}, Read_From_Head: {type: boolean}, Refresh_Interval: {type: string}, Rotate_Wait: {type: string}, Skip_Long_Lines: {type: string}, Tag: {type: string}, Tag_Regex: {type: string}, multiline.parser: {items: {type: string}, type: array}, storage.type: {type: string}}, type: object}, labels: {additionalProperties: {type: string}, type: object}, livenessDefaultCheck: {type: boolean}, livenessProbe: {properties: {exec: {properties: {command: {items: {type: string}, type: array}}, type: object}, failureThreshold: {format: int32, type: integer}, grpc: {properties: {port: {format: int32, type: integer}, service: {type: string}}, required: [port], type: object}, httpGet: {properties: {host: {type: string}, httpHeaders: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, path: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, scheme: {type: string}}, required: [port], type: object}, initialDelaySeconds: {format: int32, type: integer}, periodSeconds: {format: int32, type: integer}, successThreshold: {format: int32, type: integer}, tcpSocket: {properties: {host: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}, terminationGracePeriodSeconds: {format: int64, type: integer}, timeoutSeconds: {format: int32, type: integer}}, type: object}, logLevel: {type: string}, metrics: {properties: {interval: {type: string}, path: {type: string}, port: {format: int32, type: integer}, prometheusAnnotations: {type: boolean}, prometheusRules: {type: boolean}, serviceMonitor: {type: boolean}, serviceMonitorConfig: {properties: {additionalLabels: {additionalProperties: {type: string}, type: object}, honorLabels: {type: boolean}, metricRelabelings: {items: {properties: {action: {default: replace, enum: [replace, Replace, keep, Keep, drop, Drop, hashmod, HashMod, labelmap, LabelMap, labeldrop, LabelDrop, labelkeep, LabelKeep, lowercase, Lowercase, uppercase, Uppercase], type: string}, modulus: {format: int64, type: integer}, regex: {type: string}, replacement: {type: string}, separator: {type: string}, sourceLabels: {items: {pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$', type: string}, type: array}, targetLabel: {type: string}}, type: object}, type: array}, relabelings: {items: {properties: {action: {default: replace, enum: [replace, Replace, keep, Keep, drop, Drop, hashmod, HashMod, labelmap, LabelMap, labeldrop, LabelDrop, labelkeep, LabelKeep, lowercase, Lowercase, uppercase, Uppercase], type: string}, modulus: {format: int64, type: integer}, regex: {type: string}, replacement: {type: string}, separator: {type: string}, sourceLabels: {items: {pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$', type: string}, type: array}, targetLabel: {type: string}}, type: object}, type: array}, scheme: {type: string}, tlsConfig: {properties: {ca: {properties: {configMap: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, secret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}, caFile: {type: string}, cert: {properties: {configMap: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, secret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}, certFile: {type: string}, insecureSkipVerify: {type: boolean}, keyFile: {type: string}, keySecret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, serverName: {type: string}}, type: object}}, type: object}, timeout: {type: string}}, type: object}, mountPath: {type: string}, network: {properties: {connectTimeout: {format: int32, type: integer}, connectTimeoutLogError: {type: boolean}, dnsMode: {type: string}, dnsPreferIpv4: {type: boolean}, dnsResolver: {type: string}, keepalive: {type: boolean}, keepaliveIdleTimeout: {format: int32, type: integer}, keepaliveMaxRecycle: {format: int32, type: integer}, sourceAddress: {type: string}}, type: object}, nodeSelector: {additionalProperties: {type: string}, type: object}, parser: {type: string}, podPriorityClassName: {type: string}, position_db: {properties: {emptyDir: {properties: {medium: {type: string}, sizeLimit: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, host_path: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, hostPath: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, pvc: {properties: {source: {properties: {claimName: {type: string}, readOnly: {type: boolean}}, required: [claimName], type: object}, spec: {properties: {accessModes: {items: {type: string}, type: array}, dataSource: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}}, required: [kind, name], type: object, x-kubernetes-map-type: atomic}, dataSourceRef: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}, namespace: {type: string}}, required: [kind, name], type: object}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, selector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, storageClassName: {type: string}, volumeMode: {type: string}, volumeName: {type: string}}, type: object}}, type: object}}, type: object}, positiondb: {properties: {emptyDir: {properties: {medium: {type: string}, sizeLimit: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, host_path: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, hostPath: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, pvc: {properties: {source: {properties: {claimName: {type: string}, readOnly: {type: boolean}}, required: [claimName], type: object}, spec: {properties: {accessModes: {items: {type: string}, type: array}, dataSource: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}}, required: [kind, name], type: object, x-kubernetes-map-type: atomic}, dataSourceRef: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}, namespace: {type: string}}, required: [kind, name], type: object}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, selector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, storageClassName: {type: string}, volumeMode: {type: string}, volumeName: {type: string}}, type: object}}, type: object}}, type: object}, readinessProbe: {properties: {exec: {properties: {command: {items: {type: string}, type: array}}, type: object}, failureThreshold: {format: int32, type: integer}, grpc: {properties: {port: {format: int32, type: integer}, service: {type: string}}, required: [port], type: object}, httpGet: {properties: {host: {type: string}, httpHeaders: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, path: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, scheme: {type: string}}, required: [port], type: object}, initialDelaySeconds: {format: int32, type: integer}, periodSeconds: {format: int32, type: integer}, successThreshold: {format: int32, type: integer}, tcpSocket: {properties: {host: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}, terminationGracePeriodSeconds: {format: int64, type: integer}, timeoutSeconds: {format: int32, type: integer}}, type: object}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, security: {properties: {podSecurityContext: {properties: {fsGroup: {format: int64, type: integer}, fsGroupChangePolicy: {type: string}, runAsGroup: {format: int64, type: integer}, runAsNonRoot: {type: boolean}, runAsUser: {format: int64, type: integer}, seLinuxOptions: {properties: {level: {type: string}, role: {type: string}, type: {type: string}, user: {type: string}}, type: object}, seccompProfile: {properties: {localhostProfile: {type: string}, type: {type: string}}, required: [type], type: object}, supplementalGroups: {items: {format: int64, type: integer}, type: array}, sysctls: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, windowsOptions: {properties: {gmsaCredentialSpec: {type: string}, gmsaCredentialSpecName: {type: string}, hostProcess: {type: boolean}, runAsUserName: {type: string}}, type: object}}, type: object}, podSecurityPolicyCreate: {type: boolean}, roleBasedAccessControlCreate: {type: boolean}, securityContext: {properties: {allowPrivilegeEscalation: {type: boolean}, capabilities: {properties: {add: {items: {type: string}, type: array}, drop: {items: {type: string}, type: array}}, type: object}, privileged: {type: boolean}, procMount: {type: string}, readOnlyRootFilesystem: {type: boolean}, runAsGroup: {format: int64, type: integer}, runAsNonRoot: {type: boolean}, runAsUser: {format: int64, type: integer}, seLinuxOptions: {properties: {level: {type: string}, role: {type: string}, type: {type: string}, user: {type: string}}, type: object}, seccompProfile: {properties: {localhostProfile: {type: string}, type: {type: string}}, required: [type], type: object}, windowsOptions: {properties: {gmsaCredentialSpec: {type: string}, gmsaCredentialSpecName: {type: string}, hostProcess: {type: boolean}, runAsUserName: {type: string}}, type: object}}, type: object}, serviceAccount: {type: string}}, type: object}, serviceAccount: {properties: {automountServiceAccountToken: {type: boolean}, imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, metadata: {properties: {annotations: {additionalProperties: {type: string}, type: object}, labels: {additionalProperties: {type: string}, type: object}}, type: object}, secrets: {items: {properties: {apiVersion: {type: string}, fieldPath: {type: string}, kind: {type: string}, name: {type: string}, namespace: {type: string}, resourceVersion: {type: string}, uid: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}}, type: object}, syslogng_output: {properties: {json_date_format: {type: string}, json_date_key: {type: string}}, type: object}, targetHost: {type: string}, targetPort: {format: int32, type: integer}, tls: {properties: {enabled: {type: boolean}, secretName: {type: string}, sharedKey: {type: string}}, required: [enabled], type: object}, tolerations: {items: {properties: {effect: {type: string}, key: {type: string}, operator: {type: string}, tolerationSeconds: {format: int64, type: integer}, value: {type: string}}, type: object}, type: array}, updateStrategy: {properties: {rollingUpdate: {properties: {maxSurge: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, maxUnavailable: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, type: object}, type: {type: string}}, type: object}}, type: object}, fluentd: {properties: {affinity: {properties: {nodeAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {preference: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, weight: {format: int32, type: integer}}, required: [preference, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {properties: {nodeSelectorTerms: {items: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, type: array}}, required: [nodeSelectorTerms], type: object, x-kubernetes-map-type: atomic}}, type: object}, podAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}, podAntiAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}}, type: object}, annotations: {additionalProperties: {type: string}, type: object}, bufferStorageVolume: {properties: {emptyDir: {properties: {medium: {type: string}, sizeLimit: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, host_path: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, hostPath: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, pvc: {properties: {source: {properties: {claimName: {type: string}, readOnly: {type: boolean}}, required: [claimName], type: object}, spec: {properties: {accessModes: {items: {type: string}, type: array}, dataSource: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}}, required: [kind, name], type: object, x-kubernetes-map-type: atomic}, dataSourceRef: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}, namespace: {type: string}}, required: [kind, name], type: object}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, selector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, storageClassName: {type: string}, volumeMode: {type: string}, volumeName: {type: string}}, type: object}}, type: object}}, type: object}, bufferVolumeArgs: {items: {type: string}, type: array}, bufferVolumeImage: {properties: {imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, pullPolicy: {type: string}, repository: {type: string}, tag: {type: string}}, type: object}, bufferVolumeMetrics: {properties: {interval: {type: string}, path: {type: string}, port: {format: int32, type: integer}, prometheusAnnotations: {type: boolean}, prometheusRules: {type: boolean}, serviceMonitor: {type: boolean}, serviceMonitorConfig: {properties: {additionalLabels: {additionalProperties: {type: string}, type: object}, honorLabels: {type: boolean}, metricRelabelings: {items: {properties: {action: {default: replace, enum: [replace, Replace, keep, Keep, drop, Drop, hashmod, HashMod, labelmap, LabelMap, labeldrop, LabelDrop, labelkeep, LabelKeep, lowercase, Lowercase, uppercase, Uppercase], type: string}, modulus: {format: int64, type: integer}, regex: {type: string}, replacement: {type: string}, separator: {type: string}, sourceLabels: {items: {pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$', type: string}, type: array}, targetLabel: {type: string}}, type: object}, type: array}, relabelings: {items: {properties: {action: {default: replace, enum: [replace, Replace, keep, Keep, drop, Drop, hashmod, HashMod, labelmap, LabelMap, labeldrop, LabelDrop, labelkeep, LabelKeep, lowercase, Lowercase, uppercase, Uppercase], type: string}, modulus: {format: int64, type: integer}, regex: {type: string}, replacement: {type: string}, separator: {type: string}, sourceLabels: {items: {pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$', type: string}, type: array}, targetLabel: {type: string}}, type: object}, type: array}, scheme: {type: string}, tlsConfig: {properties: {ca: {properties: {configMap: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, secret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}, caFile: {type: string}, cert: {properties: {configMap: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, secret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}, certFile: {type: string}, insecureSkipVerify: {type: boolean}, keyFile: {type: string}, keySecret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, serverName: {type: string}}, type: object}}, type: object}, timeout: {type: string}}, type: object}, compressConfigFile: {type: boolean}, configCheckAnnotations: {additionalProperties: {type: string}, type: object}, configCheckResources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, configReloaderImage: {properties: {imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, pullPolicy: {type: string}, repository: {type: string}, tag: {type: string}}, type: object}, configReloaderResources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, disablePvc: {type: boolean}, dnsConfig: {properties: {nameservers: {items: {type: string}, type: array}, options: {items: {properties: {name: {type: string}, value: {type: string}}, type: object}, type: array}, searches: {items: {type: string}, type: array}}, type: object}, dnsPolicy: {type: string}, enableMsgpackTimeSupport: {type: boolean}, envVars: {items: {properties: {name: {type: string}, value: {type: string}, valueFrom: {properties: {configMapKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object, x-kubernetes-map-type: atomic}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object, x-kubernetes-map-type: atomic}, secretKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}}, required: [name], type: object}, type: array}, extraArgs: {items: {type: string}, type: array}, extraVolumes: {items: {properties: {containerName: {type: string}, path: {type: string}, volume: {properties: {emptyDir: {properties: {medium: {type: string}, sizeLimit: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, host_path: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, hostPath: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, pvc: {properties: {source: {properties: {claimName: {type: string}, readOnly: {type: boolean}}, required: [claimName], type: object}, spec: {properties: {accessModes: {items: {type: string}, type: array}, dataSource: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}}, required: [kind, name], type: object, x-kubernetes-map-type: atomic}, dataSourceRef: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}, namespace: {type: string}}, required: [kind, name], type: object}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, selector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, storageClassName: {type: string}, volumeMode: {type: string}, volumeName: {type: string}}, type: object}}, type: object}}, type: object}, volumeName: {type: string}}, type: object}, type: array}, fluentLogDestination: {type: string}, fluentOutLogrotate: {properties: {age: {type: string}, enabled: {type: boolean}, path: {type: string}, size: {type: string}}, required: [enabled], type: object}, fluentdPvcSpec: {properties: {emptyDir: {properties: {medium: {type: string}, sizeLimit: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, host_path: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, hostPath: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, pvc: {properties: {source: {properties: {claimName: {type: string}, readOnly: {type: boolean}}, required: [claimName], type: object}, spec: {properties: {accessModes: {items: {type: string}, type: array}, dataSource: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}}, required: [kind, name], type: object, x-kubernetes-map-type: atomic}, dataSourceRef: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}, namespace: {type: string}}, required: [kind, name], type: object}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, selector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, storageClassName: {type: string}, volumeMode: {type: string}, volumeName: {type: string}}, type: object}}, type: object}}, type: object}, forwardInputConfig: {properties: {add_tag_prefix: {type: string}, bind: {type: string}, chunk_size_limit: {type: string}, chunk_size_warn_limit: {type: string}, deny_keepalive: {type: boolean}, linger_timeout: {type: integer}, port: {type: string}, resolve_hostname: {type: boolean}, security: {properties: {allow_anonymous_source: {type: boolean}, self_hostname: {type: string}, shared_key: {type: string}, user_auth: {type: boolean}}, required: [self_hostname, shared_key], type: object}, send_keepalive_packet: {type: boolean}, skip_invalid_event: {type: boolean}, source_address_key: {type: string}, sourceHostnameKey: {type: string}, tag: {type: string}, transport: {properties: {ca_cert_path: {type: string}, ca_path: {type: string}, ca_private_key_passphrase: {type: string}, ca_private_key_path: {type: string}, cert_path: {type: string}, ciphers: {type: string}, client_cert_auth: {type: boolean}, insecure: {type: boolean}, private_key_passphrase: {type: string}, private_key_path: {type: string}, protocol: {type: string}, version: {type: string}}, type: object}}, type: object}, ignoreRepeatedLogInterval: {type: string}, ignoreSameLogInterval: {type: string}, image: {properties: {imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, pullPolicy: {type: string}, repository: {type: string}, tag: {type: string}}, type: object}, labels: {additionalProperties: {type: string}, type: object}, livenessDefaultCheck: {type: boolean}, livenessProbe: {properties: {exec: {properties: {command: {items: {type: string}, type: array}}, type: object}, failureThreshold: {format: int32, type: integer}, grpc: {properties: {port: {format: int32, type: integer}, service: {type: string}}, required: [port], type: object}, httpGet: {properties: {host: {type: string}, httpHeaders: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, path: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, scheme: {type: string}}, required: [port], type: object}, initialDelaySeconds: {format: int32, type: integer}, periodSeconds: {format: int32, type: integer}, successThreshold: {format: int32, type: integer}, tcpSocket: {properties: {host: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}, terminationGracePeriodSeconds: {format: int64, type: integer}, timeoutSeconds: {format: int32, type: integer}}, type: object}, logLevel: {type: string}, metrics: {properties: {interval: {type: string}, path: {type: string}, port: {format: int32, type: integer}, prometheusAnnotations: {type: boolean}, prometheusRules: {type: boolean}, serviceMonitor: {type: boolean}, serviceMonitorConfig: {properties: {additionalLabels: {additionalProperties: {type: string}, type: object}, honorLabels: {type: boolean}, metricRelabelings: {items: {properties: {action: {default: replace, enum: [replace, Replace, keep, Keep, drop, Drop, hashmod, HashMod, labelmap, LabelMap, labeldrop, LabelDrop, labelkeep, LabelKeep, lowercase, Lowercase, uppercase, Uppercase], type: string}, modulus: {format: int64, type: integer}, regex: {type: string}, replacement: {type: string}, separator: {type: string}, sourceLabels: {items: {pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$', type: string}, type: array}, targetLabel: {type: string}}, type: object}, type: array}, relabelings: {items: {properties: {action: {default: replace, enum: [replace, Replace, keep, Keep, drop, Drop, hashmod, HashMod, labelmap, LabelMap, labeldrop, LabelDrop, labelkeep, LabelKeep, lowercase, Lowercase, uppercase, Uppercase], type: string}, modulus: {format: int64, type: integer}, regex: {type: string}, replacement: {type: string}, separator: {type: string}, sourceLabels: {items: {pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$', type: string}, type: array}, targetLabel: {type: string}}, type: object}, type: array}, scheme: {type: string}, tlsConfig: {properties: {ca: {properties: {configMap: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, secret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}, caFile: {type: string}, cert: {properties: {configMap: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, secret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}, certFile: {type: string}, insecureSkipVerify: {type: boolean}, keyFile: {type: string}, keySecret: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, serverName: {type: string}}, type: object}}, type: object}, timeout: {type: string}}, type: object}, nodeSelector: {additionalProperties: {type: string}, type: object}, podPriorityClassName: {type: string}, port: {format: int32, type: integer}, readinessDefaultCheck: {properties: {bufferFileNumber: {type: boolean}, bufferFileNumberMax: {format: int32, type: integer}, bufferFreeSpace: {type: boolean}, bufferFreeSpaceThreshold: {format: int32, type: integer}, failureThreshold: {format: int32, type: integer}, initialDelaySeconds: {format: int32, type: integer}, periodSeconds: {format: int32, type: integer}, successThreshold: {format: int32, type: integer}, timeoutSeconds: {format: int32, type: integer}}, type: object}, readinessProbe: {properties: {exec: {properties: {command: {items: {type: string}, type: array}}, type: object}, failureThreshold: {format: int32, type: integer}, grpc: {properties: {port: {format: int32, type: integer}, service: {type: string}}, required: [port], type: object}, httpGet: {properties: {host: {type: string}, httpHeaders: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, path: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, scheme: {type: string}}, required: [port], type: object}, initialDelaySeconds: {format: int32, type: integer}, periodSeconds: {format: int32, type: integer}, successThreshold: {format: int32, type: integer}, tcpSocket: {properties: {host: {type: string}, port: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, required: [port], type: object}, terminationGracePeriodSeconds: {format: int64, type: integer}, timeoutSeconds: {format: int32, type: integer}}, type: object}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, rootDir: {type: string}, scaling: {properties: {drain: {properties: {annotations: {additionalProperties: {type: string}, type: object}, deleteVolume: {type: boolean}, enabled: {type: boolean}, image: {properties: {imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, pullPolicy: {type: string}, repository: {type: string}, tag: {type: string}}, type: object}, pauseImage: {properties: {imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, pullPolicy: {type: string}, repository: {type: string}, tag: {type: string}}, type: object}}, type: object}, podManagementPolicy: {type: string}, replicas: {type: integer}}, type: object}, security: {properties: {podSecurityContext: {properties: {fsGroup: {format: int64, type: integer}, fsGroupChangePolicy: {type: string}, runAsGroup: {format: int64, type: integer}, runAsNonRoot: {type: boolean}, runAsUser: {format: int64, type: integer}, seLinuxOptions: {properties: {level: {type: string}, role: {type: string}, type: {type: string}, user: {type: string}}, type: object}, seccompProfile: {properties: {localhostProfile: {type: string}, type: {type: string}}, required: [type], type: object}, supplementalGroups: {items: {format: int64, type: integer}, type: array}, sysctls: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, windowsOptions: {properties: {gmsaCredentialSpec: {type: string}, gmsaCredentialSpecName: {type: string}, hostProcess: {type: boolean}, runAsUserName: {type: string}}, type: object}}, type: object}, podSecurityPolicyCreate: {type: boolean}, roleBasedAccessControlCreate: {type: boolean}, securityContext: {properties: {allowPrivilegeEscalation: {type: boolean}, capabilities: {properties: {add: {items: {type: string}, type: array}, drop: {items: {type: string}, type: array}}, type: object}, privileged: {type: boolean}, procMount: {type: string}, readOnlyRootFilesystem: {type: boolean}, runAsGroup: {format: int64, type: integer}, runAsNonRoot: {type: boolean}, runAsUser: {format: int64, type: integer}, seLinuxOptions: {properties: {level: {type: string}, role: {type: string}, type: {type: string}, user: {type: string}}, type: object}, seccompProfile: {properties: {localhostProfile: {type: string}, type: {type: string}}, required: [type], type: object}, windowsOptions: {properties: {gmsaCredentialSpec: {type: string}, gmsaCredentialSpecName: {type: string}, hostProcess: {type: boolean}, runAsUserName: {type: string}}, type: object}}, type: object}, serviceAccount: {type: string}}, type: object}, serviceAccount: {properties: {automountServiceAccountToken: {type: boolean}, imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, metadata: {properties: {annotations: {additionalProperties: {type: string}, type: object}, labels: {additionalProperties: {type: string}, type: object}}, type: object}, secrets: {items: {properties: {apiVersion: {type: string}, fieldPath: {type: string}, kind: {type: string}, name: {type: string}, namespace: {type: string}, resourceVersion: {type: string}, uid: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}}, type: object}, statefulsetAnnotations: {additionalProperties: {type: string}, type: object}, tls: {properties: {enabled: {type: boolean}, secretName: {type: string}, sharedKey: {type: string}}, required: [enabled], type: object}, tolerations: {items: {properties: {effect: {type: string}, key: {type: string}, operator: {type: string}, tolerationSeconds: {format: int64, type: integer}, value: {type: string}}, type: object}, type: array}, topologySpreadConstraints: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, matchLabelKeys: {items: {type: string}, type: array, x-kubernetes-list-type: atomic}, maxSkew: {format: int32, type: integer}, minDomains: {format: int32, type: integer}, nodeAffinityPolicy: {type: string}, nodeTaintsPolicy: {type: string}, topologyKey: {type: string}, whenUnsatisfiable: {type: string}}, required: [maxSkew, topologyKey, whenUnsatisfiable], type: object}, type: array}, volumeModImage: {properties: {imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, pullPolicy: {type: string}, repository: {type: string}, tag: {type: string}}, type: object}, volumeMountChmod: {type: boolean}, workers: {format: int32, type: integer}}, type: object}}, type: object}, seLinuxEnabled: {type: boolean}}, required: [provider], type: object}, status: {properties: {conditions: {items: {type: string}, type: array}, message: {type: string}, phase: {type: string}}, type: object}}, type: object}}, served: true, storage: true, subresources: {status: {}}}]}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.13.0}, name: loggingclusterbindings.logging.opni.io}, spec: {group: logging.opni.io, names: {kind: LoggingClusterBinding, listKind: LoggingClusterBindingList, plural: loggingclusterbindings, singular: loggingclusterbinding}, scope: Namespaced, versions: [{additionalPrinterColumns: [{jsonPath: .metadata.creationTimestamp, name: Age, type: date}, {jsonPath: .status.state, name: State, type: boolean}], name: v1beta1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {loggingCluster: {properties: {id: {type: string}, loggingClusterName: {properties: {name: {type: string}, namespace: {type: string}}, type: object}}, type: object}, opensearchClusterRef: {properties: {name: {type: string}, namespace: {type: string}}, type: object}, user: {properties: {name: {type: string}, namespace: {type: string}}, type: object}}, required: [opensearchClusterRef], type: object}, status: {properties: {conditions: {items: {type: string}, type: array}, rolename: {type: string}, state: {type: string}, username: {type: string}}, type: object}}, type: object}}, served: true, storage: true, subresources: {status: {}}}]}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.13.0}, name: loggingclusters.core.opni.io}, spec: {group: core.opni.io, names: {kind: LoggingCluster, listKind: LoggingClusterList, plural: loggingclusters, singular: loggingcluster}, scope: Namespaced, versions: [{additionalPrinterColumns: [{jsonPath: .metadata.creationTimestamp, name: Age, type: date}, {jsonPath: .status.indexUserState, name: IndexUser, type: boolean}], name: v1beta1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {enabled: {type: boolean}, friendlyName: {type: string}, indexUser: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, lastSync: {format: date-time, type: string}, opensearchCluster: {properties: {name: {type: string}, namespace: {type: string}}, type: object}}, type: object}, status: {properties: {conditions: {items: {type: string}, type: array}, indexUserState: {type: string}, readRole: {type: string}, state: {type: string}}, type: object}}, type: object}}, served: true, storage: true, subresources: {status: {}}}]}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.13.0, internal.opni.io/schemaless: "true"}, name: monitoringclusters.core.opni.io}, spec: {group: core.opni.io, names: {kind: MonitoringCluster, listKind: MonitoringClusterList, plural: monitoringclusters, singular: monitoringcluster}, scope: Namespaced, versions: [{name: v1beta1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {type: object, x-kubernetes-preserve-unknown-fields: true}, status: {type: object, x-kubernetes-preserve-unknown-fields: true}}, type: object}}, served: true, storage: true, subresources: {status: {}}}]}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.13.0}, name: multiclusterrolebindings.logging.opni.io}, spec: {group: logging.opni.io, names: {kind: MulticlusterRoleBinding, listKind: MulticlusterRoleBindingList, plural: multiclusterrolebindings, singular: multiclusterrolebinding}, scope: Namespaced, versions: [{additionalPrinterColumns: [{jsonPath: .metadata.creationTimestamp, name: Age, type: date}, {jsonPath: .status.state, name: State, type: boolean}], name: v1beta1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {opensearch: {properties: {name: {type: string}, namespace: {type: string}}, type: object}, opensearchConfig: {properties: {indexRetention: {type: string}}, type: object}, opensearchExternalURL: {type: string}}, type: object}, status: {properties: {conditions: {items: {type: string}, type: array}, state: {type: string}}, type: object}}, type: object}}, served: true, storage: true, subresources: {status: {}}}]}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.13.0}, name: multiclusterusers.logging.opni.io}, spec: {group: logging.opni.io, names: {kind: MulticlusterUser, listKind: MulticlusterUserList, plural: multiclusterusers, singular: multiclusteruser}, scope: Namespaced, versions: [{additionalPrinterColumns: [{jsonPath: .metadata.creationTimestamp, name: Age, type: date}, {jsonPath: .status.state, name: State, type: boolean}], name: v1beta1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {opensearchClusterRef: {properties: {name: {type: string}, namespace: {type: string}}, type: object}, password: {type: string}}, required: [opensearchClusterRef], type: object}, status: {properties: {conditions: {items: {type: string}, type: array}, state: {type: string}}, type: object}}, type: object}}, served: true, storage: true, subresources: {status: {}}}]}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.13.0}, name: natsclusters.core.opni.io}, spec: {group: core.opni.io, names: {kind: NatsCluster, listKind: NatsClusterList, plural: natsclusters, singular: natscluster}, scope: Namespaced, versions: [{name: v1beta1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {authMethod: {default: password, enum: [password, nkey], type: string}, jetStream: {properties: {enabled: {type: boolean}, fileStorage: {properties: {emptyDir: {properties: {medium: {type: string}, sizeLimit: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, enabled: {type: boolean}, pvc: {properties: {accessModes: {items: {type: string}, type: array}, storageClass: {type: string}}, type: object}, size: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, memoryStorageSize: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, nodeSelector: {additionalProperties: {type: string}, type: object}, passwordFrom: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, replicas: {format: int32, type: integer}, tolerations: {items: {properties: {effect: {type: string}, key: {type: string}, operator: {type: string}, tolerationSeconds: {format: int64, type: integer}, value: {type: string}}, type: object}, type: array}, username: {type: string}}, type: object}, status: {properties: {authSecretKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, nkeyUser: {type: string}, replicas: {format: int32, type: integer}, state: {type: string}}, type: object}}, type: object}}, served: true, storage: true, subresources: {status: {}}}]}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.10.0}, creationTimestamp: null, name: opensearchclusters.opensearch.opster.io}, spec: {group: opensearch.opster.io, names: {kind: OpenSearchCluster, listKind: OpenSearchClusterList, plural: opensearchclusters, shortNames: [os, opensearch], singular: opensearchcluster}, scope: Namespaced, versions: [{additionalPrinterColumns: [{jsonPath: .status.version, name: version, type: string}, {jsonPath: .status.phase, name: phase, type: string}, {jsonPath: .metadata.creationTimestamp, name: age, type: date}], name: v1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {bootstrap: {properties: {additionalConfig: {additionalProperties: {type: string}, type: object}, affinity: {properties: {nodeAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {preference: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, weight: {format: int32, type: integer}}, required: [preference, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {properties: {nodeSelectorTerms: {items: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, type: array}}, required: [nodeSelectorTerms], type: object, x-kubernetes-map-type: atomic}}, type: object}, podAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}, podAntiAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}}, type: object}, jvm: {type: string}, nodeSelector: {additionalProperties: {type: string}, type: object}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, tolerations: {items: {properties: {effect: {type: string}, key: {type: string}, operator: {type: string}, tolerationSeconds: {format: int64, type: integer}, value: {type: string}}, type: object}, type: array}}, type: object}, confMgmt: {properties: {VerUpdate: {type: boolean}, autoScaler: {type: boolean}, smartScaler: {type: boolean}}, type: object}, dashboards: {properties: {additionalConfig: {additionalProperties: {type: string}, type: object}, additionalVolumes: {items: {properties: {configMap: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, name: {type: string}, optional: {type: boolean}}, type: object, x-kubernetes-map-type: atomic}, name: {type: string}, path: {type: string}, restartPods: {type: boolean}, secret: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, optional: {type: boolean}, secretName: {type: string}}, type: object}}, required: [name, path], type: object}, type: array}, affinity: {properties: {nodeAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {preference: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, weight: {format: int32, type: integer}}, required: [preference, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {properties: {nodeSelectorTerms: {items: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, type: array}}, required: [nodeSelectorTerms], type: object, x-kubernetes-map-type: atomic}}, type: object}, podAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}, podAntiAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}}, type: object}, annotations: {additionalProperties: {type: string}, type: object}, basePath: {type: string}, enable: {type: boolean}, env: {items: {properties: {name: {type: string}, value: {type: string}, valueFrom: {properties: {configMapKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object, x-kubernetes-map-type: atomic}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object, x-kubernetes-map-type: atomic}, secretKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}}, required: [name], type: object}, type: array}, image: {type: string}, imagePullPolicy: {type: string}, imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, labels: {additionalProperties: {type: string}, type: object}, nodeSelector: {additionalProperties: {type: string}, type: object}, opensearchCredentialsSecret: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, pluginsList: {items: {type: string}, type: array}, podSecurityContext: {properties: {fsGroup: {format: int64, type: integer}, fsGroupChangePolicy: {type: string}, runAsGroup: {format: int64, type: integer}, runAsNonRoot: {type: boolean}, runAsUser: {format: int64, type: integer}, seLinuxOptions: {properties: {level: {type: string}, role: {type: string}, type: {type: string}, user: {type: string}}, type: object}, seccompProfile: {properties: {localhostProfile: {type: string}, type: {type: string}}, required: [type], type: object}, supplementalGroups: {items: {format: int64, type: integer}, type: array}, sysctls: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, windowsOptions: {properties: {gmsaCredentialSpec: {type: string}, gmsaCredentialSpecName: {type: string}, hostProcess: {type: boolean}, runAsUserName: {type: string}}, type: object}}, type: object}, replicas: {format: int32, type: integer}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, securityContext: {properties: {allowPrivilegeEscalation: {type: boolean}, capabilities: {properties: {add: {items: {type: string}, type: array}, drop: {items: {type: string}, type: array}}, type: object}, privileged: {type: boolean}, procMount: {type: string}, readOnlyRootFilesystem: {type: boolean}, runAsGroup: {format: int64, type: integer}, runAsNonRoot: {type: boolean}, runAsUser: {format: int64, type: integer}, seLinuxOptions: {properties: {level: {type: string}, role: {type: string}, type: {type: string}, user: {type: string}}, type: object}, seccompProfile: {properties: {localhostProfile: {type: string}, type: {type: string}}, required: [type], type: object}, windowsOptions: {properties: {gmsaCredentialSpec: {type: string}, gmsaCredentialSpecName: {type: string}, hostProcess: {type: boolean}, runAsUserName: {type: string}}, type: object}}, type: object}, service: {properties: {loadBalancerSourceRanges: {items: {type: string}, type: array}, type: {default: ClusterIP, enum: [ClusterIP, NodePort, LoadBalancer], type: string}}, type: object}, tls: {properties: {caSecret: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, enable: {type: boolean}, generate: {type: boolean}, secret: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}}, type: object}, tolerations: {items: {properties: {effect: {type: string}, key: {type: string}, operator: {type: string}, tolerationSeconds: {format: int64, type: integer}, value: {type: string}}, type: object}, type: array}, version: {type: string}}, required: [replicas, version], type: object}, general: {properties: {additionalConfig: {additionalProperties: {type: string}, type: object}, additionalVolumes: {items: {properties: {configMap: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, name: {type: string}, optional: {type: boolean}}, type: object, x-kubernetes-map-type: atomic}, name: {type: string}, path: {type: string}, restartPods: {type: boolean}, secret: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, optional: {type: boolean}, secretName: {type: string}}, type: object}}, required: [name, path], type: object}, type: array}, command: {type: string}, defaultRepo: {type: string}, drainDataNodes: {type: boolean}, httpPort: {default: 9200, format: int32, type: integer}, image: {type: string}, imagePullPolicy: {type: string}, imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, keystore: {items: {properties: {keyMappings: {additionalProperties: {type: string}, type: object}, secret: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}}, type: object}, type: array}, monitoring: {properties: {enable: {type: boolean}, monitoringUserSecret: {type: string}, pluginUrl: {type: string}, scrapeInterval: {type: string}, tlsConfig: {properties: {insecureSkipVerify: {type: boolean}, serverName: {type: string}}, type: object}}, type: object}, pluginsList: {items: {type: string}, type: array}, podSecurityContext: {properties: {fsGroup: {format: int64, type: integer}, fsGroupChangePolicy: {type: string}, runAsGroup: {format: int64, type: integer}, runAsNonRoot: {type: boolean}, runAsUser: {format: int64, type: integer}, seLinuxOptions: {properties: {level: {type: string}, role: {type: string}, type: {type: string}, user: {type: string}}, type: object}, seccompProfile: {properties: {localhostProfile: {type: string}, type: {type: string}}, required: [type], type: object}, supplementalGroups: {items: {format: int64, type: integer}, type: array}, sysctls: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, windowsOptions: {properties: {gmsaCredentialSpec: {type: string}, gmsaCredentialSpecName: {type: string}, hostProcess: {type: boolean}, runAsUserName: {type: string}}, type: object}}, type: object}, securityContext: {properties: {allowPrivilegeEscalation: {type: boolean}, capabilities: {properties: {add: {items: {type: string}, type: array}, drop: {items: {type: string}, type: array}}, type: object}, privileged: {type: boolean}, procMount: {type: string}, readOnlyRootFilesystem: {type: boolean}, runAsGroup: {format: int64, type: integer}, runAsNonRoot: {type: boolean}, runAsUser: {format: int64, type: integer}, seLinuxOptions: {properties: {level: {type: string}, role: {type: string}, type: {type: string}, user: {type: string}}, type: object}, seccompProfile: {properties: {localhostProfile: {type: string}, type: {type: string}}, required: [type], type: object}, windowsOptions: {properties: {gmsaCredentialSpec: {type: string}, gmsaCredentialSpecName: {type: string}, hostProcess: {type: boolean}, runAsUserName: {type: string}}, type: object}}, type: object}, serviceAccount: {type: string}, serviceName: {type: string}, setVMMaxMapCount: {type: boolean}, snapshotRepositories: {items: {properties: {name: {type: string}, settings: {additionalProperties: {type: string}, type: object}, type: {type: string}}, required: [name, type], type: object}, type: array}, vendor: {enum: [Opensearch, Op, OP, os, opensearch], type: string}, version: {type: string}}, required: [serviceName], type: object}, initHelper: {properties: {image: {type: string}, imagePullPolicy: {type: string}, imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, version: {type: string}}, type: object}, nodePools: {items: {properties: {additionalConfig: {additionalProperties: {type: string}, type: object}, affinity: {properties: {nodeAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {preference: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, weight: {format: int32, type: integer}}, required: [preference, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {properties: {nodeSelectorTerms: {items: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, type: array}}, required: [nodeSelectorTerms], type: object, x-kubernetes-map-type: atomic}}, type: object}, podAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}, podAntiAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}}, type: object}, annotations: {additionalProperties: {type: string}, type: object}, component: {type: string}, diskSize: {type: string}, env: {items: {properties: {name: {type: string}, value: {type: string}, valueFrom: {properties: {configMapKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object, x-kubernetes-map-type: atomic}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object, x-kubernetes-map-type: atomic}, secretKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}}, required: [name], type: object}, type: array}, jvm: {type: string}, labels: {additionalProperties: {type: string}, type: object}, nodeSelector: {additionalProperties: {type: string}, type: object}, persistence: {properties: {emptyDir: {properties: {medium: {type: string}, sizeLimit: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, hostPath: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, pvc: {properties: {accessModes: {items: {type: string}, type: array}, storageClass: {type: string}}, type: object}}, type: object}, priorityClassName: {type: string}, replicas: {format: int32, type: integer}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, roles: {items: {type: string}, type: array}, tolerations: {items: {properties: {effect: {type: string}, key: {type: string}, operator: {type: string}, tolerationSeconds: {format: int64, type: integer}, value: {type: string}}, type: object}, type: array}, topologySpreadConstraints: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, matchLabelKeys: {items: {type: string}, type: array, x-kubernetes-list-type: atomic}, maxSkew: {format: int32, type: integer}, minDomains: {format: int32, type: integer}, nodeAffinityPolicy: {type: string}, nodeTaintsPolicy: {type: string}, topologyKey: {type: string}, whenUnsatisfiable: {type: string}}, required: [maxSkew, topologyKey, whenUnsatisfiable], type: object}, type: array}}, required: [component, replicas, roles], type: object}, type: array}, security: {properties: {config: {properties: {adminCredentialsSecret: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, adminSecret: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, securityConfigSecret: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}}, type: object}, tls: {properties: {http: {properties: {caSecret: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, generate: {type: boolean}, secret: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}}, type: object}, transport: {properties: {adminDn: {items: {type: string}, type: array}, caSecret: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, generate: {type: boolean}, nodesDn: {items: {type: string}, type: array}, perNode: {type: boolean}, secret: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}}, type: object}}, type: object}}, type: object}}, required: [nodePools], type: object}, status: {properties: {componentsStatus: {items: {properties: {component: {type: string}, conditions: {items: {type: string}, type: array}, description: {type: string}, status: {type: string}}, type: object}, type: array}, initialized: {type: boolean}, phase: {type: string}, version: {type: string}}, required: [componentsStatus], type: object}}, type: object}}, served: true, storage: true, subresources: {status: {}}}]}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.13.0}, name: opensearchrepositories.logging.opni.io}, spec: {group: logging.opni.io, names: {kind: OpensearchRepository, listKind: OpensearchRepositoryList, plural: opensearchrepositories, singular: opensearchrepository}, scope: Namespaced, versions: [{additionalPrinterColumns: [{jsonPath: .metadata.creationTimestamp, name: Age, type: date}, {jsonPath: .status.state, name: State, type: boolean}], name: v1beta1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {opensearchClusterRef: {properties: {name: {type: string}, namespace: {type: string}}, type: object}, settings: {properties: {filesystem: {properties: {location: {type: string}}, required: [location], type: object}, s3: {properties: {bucket: {type: string}, folder: {type: string}}, required: [bucket, folder], type: object}}, type: object}}, required: [opensearchClusterRef, settings], type: object}, status: {properties: {failureMessage: {type: string}, state: {type: string}}, type: object}}, type: object}}, served: true, storage: true, subresources: {status: {}}}]}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.13.0}, name: opniclusters.ai.opni.io}, spec: {group: ai.opni.io, names: {kind: OpniCluster, listKind: OpniClusterList, plural: opniclusters, singular: opnicluster}, scope: Namespaced, versions: [{additionalPrinterColumns: [{jsonPath: .metadata.creationTimestamp, name: Age, type: date}, {jsonPath: .status.state, name: State, type: boolean}], name: v1beta1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {defaultRepo: {type: string}, deployLogCollector: {type: boolean}, globalNodeSelector: {additionalProperties: {type: string}, type: object}, globalTolerations: {items: {properties: {effect: {type: string}, key: {type: string}, operator: {type: string}, tolerationSeconds: {format: int64, type: integer}, value: {type: string}}, type: object}, type: array}, natsCluster: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, nulogHyperparameters: {additionalProperties: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, type: object}, opensearch: {properties: {name: {type: string}, namespace: {type: string}}, type: object}, s3: {properties: {drainS3Bucket: {type: string}, external: {properties: {credentials: {properties: {name: {type: string}, namespace: {type: string}}, type: object, x-kubernetes-map-type: atomic}, endpoint: {type: string}}, required: [credentials, endpoint], type: object}, internal: {properties: {persistence: {properties: {accessModes: {items: {type: string}, type: array}, enabled: {type: boolean}, request: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, storageClass: {type: string}}, type: object}}, type: object}, nulogS3Bucket: {type: string}}, type: object}, services: {properties: {drain: {properties: {enabled: {type: boolean}, image: {type: string}, imagePullPolicy: {type: string}, imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, nodeSelector: {additionalProperties: {type: string}, type: object}, replicas: {format: int32, type: integer}, tolerations: {items: {properties: {effect: {type: string}, key: {type: string}, operator: {type: string}, tolerationSeconds: {format: int64, type: integer}, value: {type: string}}, type: object}, type: array}, workload: {properties: {enabled: {type: boolean}, replicas: {format: int32, type: integer}}, type: object}}, type: object}, gpuController: {properties: {enabled: {type: boolean}, image: {type: string}, imagePullPolicy: {type: string}, imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, nodeSelector: {additionalProperties: {type: string}, type: object}, runtimeClass: {type: string}, tolerations: {items: {properties: {effect: {type: string}, key: {type: string}, operator: {type: string}, tolerationSeconds: {format: int64, type: integer}, value: {type: string}}, type: object}, type: array}}, type: object}, inference: {properties: {enabled: {type: boolean}, image: {type: string}, imagePullPolicy: {type: string}, imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, nodeSelector: {additionalProperties: {type: string}, type: object}, pretrainedModels: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, tolerations: {items: {properties: {effect: {type: string}, key: {type: string}, operator: {type: string}, tolerationSeconds: {format: int64, type: integer}, value: {type: string}}, type: object}, type: array}}, type: object}, metrics: {properties: {enabled: {type: boolean}, extraVolumeMounts: {items: {properties: {awsElasticBlockStore: {properties: {fsType: {type: string}, partition: {format: int32, type: integer}, readOnly: {type: boolean}, volumeID: {type: string}}, required: [volumeID], type: object}, azureDisk: {properties: {cachingMode: {type: string}, diskName: {type: string}, diskURI: {type: string}, fsType: {type: string}, kind: {type: string}, readOnly: {type: boolean}}, required: [diskName, diskURI], type: object}, azureFile: {properties: {readOnly: {type: boolean}, secretName: {type: string}, shareName: {type: string}}, required: [secretName, shareName], type: object}, cephfs: {properties: {monitors: {items: {type: string}, type: array}, path: {type: string}, readOnly: {type: boolean}, secretFile: {type: string}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, user: {type: string}}, required: [monitors], type: object}, cinder: {properties: {fsType: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, volumeID: {type: string}}, required: [volumeID], type: object}, configMap: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, name: {type: string}, optional: {type: boolean}}, type: object, x-kubernetes-map-type: atomic}, csi: {properties: {driver: {type: string}, fsType: {type: string}, nodePublishSecretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, readOnly: {type: boolean}, volumeAttributes: {additionalProperties: {type: string}, type: object}}, required: [driver], type: object}, downwardAPI: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object, x-kubernetes-map-type: atomic}, mode: {format: int32, type: integer}, path: {type: string}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object, x-kubernetes-map-type: atomic}}, required: [path], type: object}, type: array}}, type: object}, emptyDir: {properties: {medium: {type: string}, sizeLimit: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, ephemeral: {properties: {volumeClaimTemplate: {properties: {metadata: {type: object}, spec: {properties: {accessModes: {items: {type: string}, type: array}, dataSource: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}}, required: [kind, name], type: object, x-kubernetes-map-type: atomic}, dataSourceRef: {properties: {apiGroup: {type: string}, kind: {type: string}, name: {type: string}, namespace: {type: string}}, required: [kind, name], type: object}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, selector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, storageClassName: {type: string}, volumeMode: {type: string}, volumeName: {type: string}}, type: object}}, required: [spec], type: object}}, type: object}, fc: {properties: {fsType: {type: string}, lun: {format: int32, type: integer}, readOnly: {type: boolean}, targetWWNs: {items: {type: string}, type: array}, wwids: {items: {type: string}, type: array}}, type: object}, flexVolume: {properties: {driver: {type: string}, fsType: {type: string}, options: {additionalProperties: {type: string}, type: object}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}}, required: [driver], type: object}, flocker: {properties: {datasetName: {type: string}, datasetUUID: {type: string}}, type: object}, gcePersistentDisk: {properties: {fsType: {type: string}, partition: {format: int32, type: integer}, pdName: {type: string}, readOnly: {type: boolean}}, required: [pdName], type: object}, gitRepo: {properties: {directory: {type: string}, repository: {type: string}, revision: {type: string}}, required: [repository], type: object}, glusterfs: {properties: {endpoints: {type: string}, path: {type: string}, readOnly: {type: boolean}}, required: [endpoints, path], type: object}, hostPath: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, iscsi: {properties: {chapAuthDiscovery: {type: boolean}, chapAuthSession: {type: boolean}, fsType: {type: string}, initiatorName: {type: string}, iqn: {type: string}, iscsiInterface: {type: string}, lun: {format: int32, type: integer}, portals: {items: {type: string}, type: array}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, targetPortal: {type: string}}, required: [iqn, lun, targetPortal], type: object}, mountPath: {type: string}, name: {type: string}, nfs: {properties: {path: {type: string}, readOnly: {type: boolean}, server: {type: string}}, required: [path, server], type: object}, persistentVolumeClaim: {properties: {claimName: {type: string}, readOnly: {type: boolean}}, required: [claimName], type: object}, photonPersistentDisk: {properties: {fsType: {type: string}, pdID: {type: string}}, required: [pdID], type: object}, portworxVolume: {properties: {fsType: {type: string}, readOnly: {type: boolean}, volumeID: {type: string}}, required: [volumeID], type: object}, projected: {properties: {defaultMode: {format: int32, type: integer}, sources: {items: {properties: {configMap: {properties: {items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, name: {type: string}, optional: {type: boolean}}, type: object, x-kubernetes-map-type: atomic}, downwardAPI: {properties: {items: {items: {properties: {fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object, x-kubernetes-map-type: atomic}, mode: {format: int32, type: integer}, path: {type: string}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object, x-kubernetes-map-type: atomic}}, required: [path], type: object}, type: array}}, type: object}, secret: {properties: {items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, name: {type: string}, optional: {type: boolean}}, type: object, x-kubernetes-map-type: atomic}, serviceAccountToken: {properties: {audience: {type: string}, expirationSeconds: {format: int64, type: integer}, path: {type: string}}, required: [path], type: object}}, type: object}, type: array}}, type: object}, quobyte: {properties: {group: {type: string}, readOnly: {type: boolean}, registry: {type: string}, tenant: {type: string}, user: {type: string}, volume: {type: string}}, required: [registry, volume], type: object}, rbd: {properties: {fsType: {type: string}, image: {type: string}, keyring: {type: string}, monitors: {items: {type: string}, type: array}, pool: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, user: {type: string}}, required: [image, monitors], type: object}, readOnly: {type: boolean}, scaleIO: {properties: {fsType: {type: string}, gateway: {type: string}, protectionDomain: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, sslEnabled: {type: boolean}, storageMode: {type: string}, storagePool: {type: string}, system: {type: string}, volumeName: {type: string}}, required: [gateway, secretRef, system], type: object}, secret: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, optional: {type: boolean}, secretName: {type: string}}, type: object}, storageos: {properties: {fsType: {type: string}, readOnly: {type: boolean}, secretRef: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, volumeName: {type: string}, volumeNamespace: {type: string}}, type: object}, vsphereVolume: {properties: {fsType: {type: string}, storagePolicyID: {type: string}, storagePolicyName: {type: string}, volumePath: {type: string}}, required: [volumePath], type: object}}, type: object}, type: array}, image: {type: string}, imagePullPolicy: {type: string}, imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, nodeSelector: {additionalProperties: {type: string}, type: object}, prometheus: {properties: {name: {type: string}, namespace: {type: string}}, type: object}, prometheusEndpoint: {type: string}, tolerations: {items: {properties: {effect: {type: string}, key: {type: string}, operator: {type: string}, tolerationSeconds: {format: int64, type: integer}, value: {type: string}}, type: object}, type: array}}, type: object}, opensearchUpdate: {properties: {enabled: {type: boolean}, image: {type: string}, imagePullPolicy: {type: string}, imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, nodeSelector: {additionalProperties: {type: string}, type: object}, tolerations: {items: {properties: {effect: {type: string}, key: {type: string}, operator: {type: string}, tolerationSeconds: {format: int64, type: integer}, value: {type: string}}, type: object}, type: array}}, type: object}, payloadReceiver: {properties: {enabled: {type: boolean}, image: {type: string}, imagePullPolicy: {type: string}, imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, nodeSelector: {additionalProperties: {type: string}, type: object}, tolerations: {items: {properties: {effect: {type: string}, key: {type: string}, operator: {type: string}, tolerationSeconds: {format: int64, type: integer}, value: {type: string}}, type: object}, type: array}}, type: object}, preprocessing: {properties: {enabled: {type: boolean}, image: {type: string}, imagePullPolicy: {type: string}, imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, nodeSelector: {additionalProperties: {type: string}, type: object}, replicas: {format: int32, type: integer}, tolerations: {items: {properties: {effect: {type: string}, key: {type: string}, operator: {type: string}, tolerationSeconds: {format: int64, type: integer}, value: {type: string}}, type: object}, type: array}}, type: object}, trainingController: {properties: {enabled: {type: boolean}, image: {type: string}, imagePullPolicy: {type: string}, imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, nodeSelector: {additionalProperties: {type: string}, type: object}, tolerations: {items: {properties: {effect: {type: string}, key: {type: string}, operator: {type: string}, tolerationSeconds: {format: int64, type: integer}, value: {type: string}}, type: object}, type: array}}, type: object}}, type: object}, version: {default: latest, type: string}}, type: object}, status: {properties: {auth: {properties: {opensearchAuthSecretKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, s3AccessKey: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, s3Endpoint: {type: string}, s3SecretKey: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}, conditions: {items: {type: string}, type: array}, indexState: {type: string}, logState: {type: string}, prometheusRuleNamespace: {type: string}, state: {type: string}}, type: object}}, type: object}}, served: true, storage: true, subresources: {status: {}}}]}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.13.0}, name: opniopensearches.logging.opni.io}, spec: {group: logging.opni.io, names: {kind: OpniOpensearch, listKind: OpniOpensearchList, plural: opniopensearches, singular: opniopensearch}, scope: Namespaced, versions: [{additionalPrinterColumns: [{jsonPath: .metadata.creationTimestamp, name: Age, type: date}, {jsonPath: .status.state, name: State, type: boolean}], name: v1beta1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {externalURL: {type: string}, imageRepo: {type: string}, indexRetention: {type: string}, natsCluster: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, opensearch: {properties: {dashboards: {properties: {additionalConfig: {additionalProperties: {type: string}, type: object}, additionalVolumes: {items: {properties: {configMap: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, name: {type: string}, optional: {type: boolean}}, type: object, x-kubernetes-map-type: atomic}, emptyDir: {properties: {medium: {type: string}, sizeLimit: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, name: {type: string}, path: {type: string}, restartPods: {type: boolean}, secret: {properties: {defaultMode: {format: int32, type: integer}, items: {items: {properties: {key: {type: string}, mode: {format: int32, type: integer}, path: {type: string}}, required: [key, path], type: object}, type: array}, optional: {type: boolean}, secretName: {type: string}}, type: object}}, required: [name, path], type: object}, type: array}, affinity: {properties: {nodeAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {preference: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, weight: {format: int32, type: integer}}, required: [preference, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {properties: {nodeSelectorTerms: {items: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, type: array}}, required: [nodeSelectorTerms], type: object, x-kubernetes-map-type: atomic}}, type: object}, podAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}, podAntiAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}}, type: object}, annotations: {additionalProperties: {type: string}, type: object}, basePath: {type: string}, enable: {type: boolean}, env: {items: {properties: {name: {type: string}, value: {type: string}, valueFrom: {properties: {configMapKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object, x-kubernetes-map-type: atomic}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object, x-kubernetes-map-type: atomic}, secretKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}}, required: [name], type: object}, type: array}, image: {type: string}, imagePullPolicy: {type: string}, imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, labels: {additionalProperties: {type: string}, type: object}, nodeSelector: {additionalProperties: {type: string}, type: object}, opensearchCredentialsSecret: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, pluginsList: {items: {type: string}, type: array}, podSecurityContext: {properties: {fsGroup: {format: int64, type: integer}, fsGroupChangePolicy: {type: string}, runAsGroup: {format: int64, type: integer}, runAsNonRoot: {type: boolean}, runAsUser: {format: int64, type: integer}, seLinuxOptions: {properties: {level: {type: string}, role: {type: string}, type: {type: string}, user: {type: string}}, type: object}, seccompProfile: {properties: {localhostProfile: {type: string}, type: {type: string}}, required: [type], type: object}, supplementalGroups: {items: {format: int64, type: integer}, type: array}, sysctls: {items: {properties: {name: {type: string}, value: {type: string}}, required: [name, value], type: object}, type: array}, windowsOptions: {properties: {gmsaCredentialSpec: {type: string}, gmsaCredentialSpecName: {type: string}, hostProcess: {type: boolean}, runAsUserName: {type: string}}, type: object}}, type: object}, replicas: {format: int32, type: integer}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, securityContext: {properties: {allowPrivilegeEscalation: {type: boolean}, capabilities: {properties: {add: {items: {type: string}, type: array}, drop: {items: {type: string}, type: array}}, type: object}, privileged: {type: boolean}, procMount: {type: string}, readOnlyRootFilesystem: {type: boolean}, runAsGroup: {format: int64, type: integer}, runAsNonRoot: {type: boolean}, runAsUser: {format: int64, type: integer}, seLinuxOptions: {properties: {level: {type: string}, role: {type: string}, type: {type: string}, user: {type: string}}, type: object}, seccompProfile: {properties: {localhostProfile: {type: string}, type: {type: string}}, required: [type], type: object}, windowsOptions: {properties: {gmsaCredentialSpec: {type: string}, gmsaCredentialSpecName: {type: string}, hostProcess: {type: boolean}, runAsUserName: {type: string}}, type: object}}, type: object}, service: {properties: {loadBalancerSourceRanges: {items: {type: string}, type: array}, type: {default: ClusterIP, enum: [ClusterIP, NodePort, LoadBalancer], type: string}}, type: object}, tls: {properties: {caSecret: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, enable: {type: boolean}, generate: {type: boolean}, secret: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}}, type: object}, tolerations: {items: {properties: {effect: {type: string}, key: {type: string}, operator: {type: string}, tolerationSeconds: {format: int64, type: integer}, value: {type: string}}, type: object}, type: array}, version: {type: string}}, required: [replicas, version], type: object}, imageOverride: {type: string}, nodePools: {items: {properties: {additionalConfig: {additionalProperties: {type: string}, type: object}, affinity: {properties: {nodeAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {preference: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, weight: {format: int32, type: integer}}, required: [preference, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {properties: {nodeSelectorTerms: {items: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchFields: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}}, type: object, x-kubernetes-map-type: atomic}, type: array}}, required: [nodeSelectorTerms], type: object, x-kubernetes-map-type: atomic}}, type: object}, podAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}, podAntiAffinity: {properties: {preferredDuringSchedulingIgnoredDuringExecution: {items: {properties: {podAffinityTerm: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, weight: {format: int32, type: integer}}, required: [podAffinityTerm, weight], type: object}, type: array}, requiredDuringSchedulingIgnoredDuringExecution: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaceSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, namespaces: {items: {type: string}, type: array}, topologyKey: {type: string}}, required: [topologyKey], type: object}, type: array}}, type: object}}, type: object}, annotations: {additionalProperties: {type: string}, type: object}, component: {type: string}, diskSize: {type: string}, env: {items: {properties: {name: {type: string}, value: {type: string}, valueFrom: {properties: {configMapKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}, fieldRef: {properties: {apiVersion: {type: string}, fieldPath: {type: string}}, required: [fieldPath], type: object, x-kubernetes-map-type: atomic}, resourceFieldRef: {properties: {containerName: {type: string}, divisor: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, resource: {type: string}}, required: [resource], type: object, x-kubernetes-map-type: atomic}, secretKeyRef: {properties: {key: {type: string}, name: {type: string}, optional: {type: boolean}}, required: [key], type: object, x-kubernetes-map-type: atomic}}, type: object}}, required: [name], type: object}, type: array}, jvm: {type: string}, labels: {additionalProperties: {type: string}, type: object}, nodeSelector: {additionalProperties: {type: string}, type: object}, pdb: {properties: {enable: {type: boolean}, maxUnavailable: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, minAvailable: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}}, type: object}, persistence: {properties: {emptyDir: {properties: {medium: {type: string}, sizeLimit: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}}, type: object}, hostPath: {properties: {path: {type: string}, type: {type: string}}, required: [path], type: object}, pvc: {properties: {accessModes: {items: {type: string}, type: array}, storageClass: {type: string}}, type: object}}, type: object}, priorityClassName: {type: string}, replicas: {format: int32, type: integer}, resources: {properties: {claims: {items: {properties: {name: {type: string}}, required: [name], type: object}, type: array, x-kubernetes-list-map-keys: [name], x-kubernetes-list-type: map}, limits: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}, requests: {additionalProperties: {anyOf: [{type: integer}, {type: string}], pattern: '^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$', x-kubernetes-int-or-string: true}, type: object}}, type: object}, roles: {items: {type: string}, type: array}, tolerations: {items: {properties: {effect: {type: string}, key: {type: string}, operator: {type: string}, tolerationSeconds: {format: int64, type: integer}, value: {type: string}}, type: object}, type: array}, topologySpreadConstraints: {items: {properties: {labelSelector: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, required: [key, operator], type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object, x-kubernetes-map-type: atomic}, matchLabelKeys: {items: {type: string}, type: array, x-kubernetes-list-type: atomic}, maxSkew: {format: int32, type: integer}, minDomains: {format: int32, type: integer}, nodeAffinityPolicy: {type: string}, nodeTaintsPolicy: {type: string}, topologyKey: {type: string}, whenUnsatisfiable: {type: string}}, required: [maxSkew, topologyKey, whenUnsatisfiable], type: object}, type: array}}, required: [component, replicas, roles], type: object}, type: array}, s3: {properties: {credentialSecret: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, endpoint: {type: string}, pathStyleAccess: {type: boolean}, protocol: {type: string}, proxyHost: {type: string}, proxyPort: {format: int32, type: integer}, repository: {properties: {bucket: {type: string}, folder: {type: string}}, required: [bucket, folder], type: object}}, type: object}, security: {properties: {config: {properties: {adminCredentialsSecret: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, adminSecret: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, securityConfigSecret: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}}, type: object}, tls: {properties: {http: {properties: {caSecret: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, generate: {type: boolean}, secret: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}}, type: object}, transport: {properties: {adminDn: {items: {type: string}, type: array}, caSecret: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, generate: {type: boolean}, nodesDn: {items: {type: string}, type: array}, perNode: {type: boolean}, secret: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}}, type: object}}, type: object}}, type: object}}, type: object}, opensearchVersion: {type: string}, version: {type: string}}, required: [imageRepo, natsCluster], type: object}, status: {properties: {conditions: {items: {type: string}, type: array}, opensearchVersion: {type: string}, passwordGenerated: {type: boolean}, state: {type: string}, version: {type: string}}, type: object}}, type: object}}, served: true, storage: true, subresources: {status: {}}}]}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.13.0}, name: preprocessors.logging.opni.io}, spec: {group: logging.opni.io, names: {kind: Preprocessor, listKind: PreprocessorList, plural: preprocessors, singular: preprocessor}, scope: Namespaced, versions: [{name: v1beta1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {image: {type: string}, imagePullPolicy: {type: string}, imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}, opensearch: {properties: {name: {type: string}, namespace: {type: string}}, type: object}, replicas: {format: int32, type: integer}, writeIndex: {type: string}}, type: object}, status: {properties: {conditions: {items: {type: string}, type: array}, state: {type: string}}, type: object}}, type: object}}, served: true, storage: true, subresources: {status: {}}}]}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.13.0}, name: pretrainedmodels.ai.opni.io}, spec: {group: ai.opni.io, names: {kind: PretrainedModel, listKind: PretrainedModelList, plural: pretrainedmodels, singular: pretrainedmodel}, scope: Namespaced, versions: [{name: v1beta1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {hyperparameters: {additionalProperties: {anyOf: [{type: integer}, {type: string}], x-kubernetes-int-or-string: true}, type: object}, replicas: {format: int32, type: integer}, source: {properties: {container: {properties: {image: {type: string}, imagePullSecrets: {items: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}, type: array}}, required: [image], type: object}, http: {properties: {url: {type: string}}, required: [url], type: object}}, type: object}}, required: [source], type: object}, status: {properties: {configMap: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}}, type: object}}, type: object}}, served: true, storage: true, subresources: {status: {}}}]}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.13.0}, name: recurringsnapshots.logging.opni.io}, spec: {group: logging.opni.io, names: {kind: RecurringSnapshot, listKind: RecurringSnapshotList, plural: recurringsnapshots, singular: recurringsnapshot}, scope: Namespaced, versions: [{additionalPrinterColumns: [{jsonPath: .metadata.creationTimestamp, name: Age, type: date}, {jsonPath: .status.state, name: State, type: boolean}], name: v1beta1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {creation: {properties: {cronSchedule: {type: string}, timeLimit: {type: string}}, required: [cronSchedule], type: object}, retention: {properties: {maxAge: {type: string}, maxCount: {format: int32, type: integer}}, type: object}, snapshot: {properties: {allowPartial: {type: boolean}, ignoreUnavailable: {type: boolean}, includeGlobalState: {type: boolean}, indices: {items: {type: string}, type: array}, repository: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}}, required: [repository], type: object}}, required: [creation, snapshot], type: object}, status: {properties: {executionStatus: {properties: {cause: {type: string}, lastExecution: {format: date-time, type: string}, message: {type: string}, status: {type: string}}, type: object}, state: {type: string}}, type: object}}, type: object}}, served: true, storage: true, subresources: {status: {}}}]}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.13.0}, name: rolebindings.monitoring.opni.io}, spec: {group: monitoring.opni.io, names: {kind: RoleBinding, listKind: RoleBindingList, plural: rolebindings, singular: rolebinding}, scope: Namespaced, versions: [{name: v1beta1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {id: {type: string}, metadata: {properties: {capability: {type: string}, resourceVersion: {type: string}}, type: object}, roleId: {type: string}, subjects: {items: {type: string}, type: array}, taints: {items: {type: string}, type: array}}, type: object}}, type: object}}, served: true, storage: true}]}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.13.0}, name: roles.monitoring.opni.io}, spec: {group: monitoring.opni.io, names: {kind: Role, listKind: RoleList, plural: roles, singular: role}, scope: Namespaced, versions: [{name: v1beta1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {id: {type: string}, metadata: {properties: {resourceVersion: {type: string}}, type: object}, permissions: {items: {properties: {ids: {items: {type: string}, type: array}, matchLabels: {properties: {matchExpressions: {items: {properties: {key: {type: string}, operator: {type: string}, values: {items: {type: string}, type: array}}, type: object}, type: array}, matchLabels: {additionalProperties: {type: string}, type: object}}, type: object}, type: {type: string}, verbs: {items: {properties: {verb: {type: string}}, type: object}, type: array}}, type: object}, type: array}}, type: object}}, type: object}}, served: true, storage: true}]}}
---
{apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition, metadata: {annotations: {controller-gen.kubebuilder.io/version: v0.13.0}, name: snapshots.logging.opni.io}, spec: {group: logging.opni.io, names: {kind: Snapshot, listKind: SnapshotList, plural: snapshots, singular: snapshot}, scope: Namespaced, versions: [{additionalPrinterColumns: [{jsonPath: .metadata.creationTimestamp, name: Age, type: date}, {jsonPath: .status.state, name: State, type: boolean}], name: v1beta1, schema: {openAPIV3Schema: {properties: {apiVersion: {type: string}, kind: {type: string}, metadata: {type: object}, spec: {properties: {allowPartial: {type: boolean}, ignoreUnavailable: {type: boolean}, includeGlobalState: {type: boolean}, indices: {items: {type: string}, type: array}, repository: {properties: {name: {type: string}}, type: object, x-kubernetes-map-type: atomic}}, required: [repository], type: object}, status: {properties: {failureMessage: {type: string}, snapshotAPIName: {type: string}, state: {type: string}}, type: object}}, type: object}}, served: true, storage: true, subresources: {status: {}}}]}}
