syntax = "proto3";

package cortexops;

import "github.com/rancher/opni/internal/codegen/cli/cli.proto";
import "github.com/rancher/opni/internal/cortex/config/compactor/compactor.proto";
import "github.com/rancher/opni/internal/cortex/config/querier/querier.proto";
import "github.com/rancher/opni/internal/cortex/config/runtimeconfig/runtimeconfig.proto";
import "github.com/rancher/opni/internal/cortex/config/storage/storage.proto";
import "github.com/rancher/opni/internal/cortex/config/validation/limits.proto";
import "github.com/rancher/opni/pkg/apis/core/v1/core.proto";
import "github.com/rancher/opni/pkg/apis/storage/v1/storage.proto";
import "github.com/rancher/opni/pkg/plugins/driverutil/types.proto";
import "github.com/rancher/opni/pkg/validation/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

option go_package      = "github.com/rancher/opni/plugins/metrics/apis/cortexops";
option (cli.generator) = {
  generate:          true
  generate_deepcopy: true
};

// The CortexOps service contains setup and configuration lifecycle actions for the managed Cortex cluster.
service CortexOps {
  option (cli.command_group) = {
    use: "ops"
  };

  // {{ template "GetDefaultConfiguration" }}
  rpc GetDefaultConfiguration(driverutil.GetRequest) returns (CapabilityBackendConfigSpec) {
    option (cli.command) = {
      use:          "config get-default"
      enable_hooks: true
    };
    option (google.api.http) = {
      get: "/configuration/default"
    };
  }

  // {{ template "SetDefaultConfiguration" }}
  rpc SetDefaultConfiguration(SetRequest) returns (google.protobuf.Empty) {
    option (cli.command) = {
      use:         "config set-default"
      granularity: EditMessage
    };
    option (google.api.http) = {
      put:  "/configuration/default"
      body: "*"
    };
  }

  // {{ template "ResetDefaultConfiguration" }}
  rpc ResetDefaultConfiguration(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (cli.command) = {
      use: "config reset-default"
    };
    option (google.api.http) = {
      post: "/configuration/default/reset"
    };
  }

  // {{ template "GetConfiguration" }}
  rpc GetConfiguration(driverutil.GetRequest) returns (CapabilityBackendConfigSpec) {
    option (cli.command) = {
      use:          "config get"
      enable_hooks: true
    };
    option (google.api.http) = {
      get: "/configuration"
    };
  }

  // {{ template "SetConfiguration" }}
  rpc SetConfiguration(SetRequest) returns (google.protobuf.Empty) {
    option (cli.command) = {
      use:          "config set"
      enable_hooks: true
      granularity:  EditMessage
    };
    option (google.api.http) = {
      put:  "/configuration"
      body: "*"
    };
  }

  // {{ template "ResetConfiguration" }}
  rpc ResetConfiguration(ResetRequest) returns (google.protobuf.Empty) {
    option (cli.command) = {
      use: "config reset"
    };
    option (google.api.http) = {
      post: "/configuration/reset"
      body: "*"
    };
  }

  // {{ template "DryRun" }}
  rpc DryRun(DryRunRequest) returns (DryRunResponse) {
    option (cli.command).skip = true;
    option (google.api.http) = {
      post: "/dry-run"
      body: "*"
    };
  }

  // {{ template "ConfigurationHistory" }}
  rpc ConfigurationHistory(driverutil.ConfigurationHistoryRequest) returns (ConfigurationHistoryResponse) {
    option (cli.command) = {
      use: "config history"
    };
    option (google.api.http) = {
      get: "/configuration/history"
    };
  }

  // Gets the current status of the managed Cortex cluster.
  // The status includes the current install state, version, and metadata. If
  // the cluster is in the process of being reconfigured or uninstalled, it will
  // be reflected in the install state.
  // No guarantees are made about the contents of the metadata field; its
  // contents are strictly informational.
  rpc Status(google.protobuf.Empty) returns (driverutil.InstallStatus) {
    option (cli.command) = {
      use: "status"
    };
    option (google.api.http) = {
      get: "/status"
    };
  }

  // Installs the managed Cortex cluster.
  // The cluster will be installed using the current configuration, or the
  // default configuration if none is explicitly set.
  rpc Install(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (cli.command) = {
      use: "install"
    };
    option (google.api.http) = {
      post: "/install"
    };
  }

  // Uninstalls the managed Cortex cluster.
  // Implementation details including error handling and system state requirements
  // are left to the cluster driver, and this API makes no guarantees about
  // the state of the cluster after the call completes (regardless of success).
  rpc Uninstall(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (cli.command) = {
      use: "uninstall"
    };
    option (google.api.http) = {
      post: "/uninstall"
    };
  }

  // Returns a static list of presets that can be used as a base for configuring the managed Cortex cluster.
  // There are several ways to use the presets, depending
  // on the desired behavior:
  // 1. Set the default configuration to a preset spec, then use SetConfiguration
  //    to fill in any additional required fields (credentials, etc)
  // 2. Add the required fields to the default configuration, then use
  //    SetConfiguration with a preset spec.
  // 3. Leave the default configuration as-is, and use SetConfiguration with a
  //    preset spec plus the required fields.
  rpc ListPresets(google.protobuf.Empty) returns (PresetList) {
    option (cli.command) = {
      use: "presets list"
    };
    option (google.api.http) = {
      get: "/presets"
    };
  }
}

message CapabilityBackendConfigSpec {
  option (buf.validate.message) = {
    cel: [
      {
        id:         "filesystem_target_check"
        message:    "filesystem storage backend can only be used with a single 'all' target"
        expression: 
          "this.cortexConfig.storage.backend == 'filesystem'"
          "? size(this.cortexWorkloads.targets) == 1 && ('all' in this.cortexWorkloads.targets)"
          ": true"
      }
    ]
  };
  optional bool           enabled         = 1 [(cli.flag).skip = true];
  core.Revision           revision        = 2 [(cli.flag).skip = true];
  CortexWorkloadsConfig   cortexWorkloads = 4;
  CortexApplicationConfig cortexConfig    = 5;
  GrafanaConfig           grafana         = 9;
}

message CortexWorkloadsConfig {
  map<string, CortexWorkloadSpec> targets = 1 [
    (cli.flag).skip          = true,
    (buf.validate.field).map = {
      min_pairs: 1
      keys: {
        string: {
          in: [
            "all",
            "compactor",
            "distributor",
            "ingester",
            "purger",
            "querier",
            "query-frontend",
            "ruler",
            "store-gateway"
          ]
        }
      }
    }
  ];
}

message CortexWorkloadSpec {
  optional int32 replicas = 1 [(buf.validate.field).int32.gt = 0];
  repeated string extraArgs = 2 [
    (buf.validate.field).repeated = {
      unique: true
      items: {
        cel: [
          {
            id:         "check_invalid_flags"
            message:    "flags not allowed: -target, -config, -modules, -help"
            expression: "['-target', '-config', '-modules', '-help'].all(s, !this.contains(s))"
          },
          {
            id:         "check_non_flag_args"
            message:    "non-flag arguments not allowed (try '--flag=value' instead of '--flag value')"
            expression: "this.startsWith('-')"
          }
        ]
      }
    }
  ];
}

message CortexApplicationConfig {
  validation.Limits limits = 1 [(cli.flag_set) = {
    default: {
      [type.googleapis.com/validation.Limits]: {
        // these are static overrides to the upstream defaults
        ingestion_rate:                    600000
        ingestion_burst_size:              1000000
        compactor_blocks_retention_period: {seconds: 2592000} /* 30 days */
      }
    }
  }];
  runtimeconfig.RuntimeConfigValues runtime_config = 2 [(buf.validate.field).ignore_empty = true];
  compactor.Config                  compactor      = 3;
  querier.Config                    querier        = 4;
  storage.Config                    storage        = 5;
  optional string log_level = 6 [
    (cli.flag).default          = "debug",
    (buf.validate.field).string = {
      in: [
        "debug",
        "info",
        "warn",
        "error"
      ]
    }
  ];
}

message GrafanaConfig {
  // Whether to deploy a managed Grafana instance.
  optional bool enabled = 1 [(cli.flag).default = "false"];

  // The version of Grafana to deploy.
  optional string version = 2;

  optional string hostname = 3;
}

message PresetList {
  repeated Preset items = 1;
}

message Preset {
  core.Reference              id       = 1;
  driverutil.PresetMetadata   metadata = 2;
  CapabilityBackendConfigSpec spec     = 3;
}

message DryRunRequest {
  driverutil.Target target = 1;
  driverutil.Action action = 2;

  CapabilityBackendConfigSpec spec = 3; // Set

  core.Revision               revision = 4 [(cli.flag_set).no_prefix = true]; // Reset
  CapabilityBackendConfigSpec patch    = 5 [(cli.flag).skip = true]; // Reset
  google.protobuf.FieldMask   mask     = 6 [(cli.flag).skip = true]; // Reset
}

message DryRunResponse {
  CapabilityBackendConfigSpec current          = 1;
  CapabilityBackendConfigSpec modified         = 2;
  buf.validate.Violations     validationErrors = 3;
}

message ConfigurationHistoryResponse {
  repeated CapabilityBackendConfigSpec entries = 1;
}

message SetRequest {
  CapabilityBackendConfigSpec spec = 1;
}

message ResetRequest {
  core.Revision               revision = 1 [(cli.flag_set).no_prefix = true];
  google.protobuf.FieldMask   mask     = 2 [(cli.flag).skip = true];
  CapabilityBackendConfigSpec patch    = 3 [(cli.flag).skip = true];
}
