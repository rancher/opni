// @generated by protoc-gen-es v1.3.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file github.com/rancher/opni/plugins/metrics/apis/cortexops/cortexops.proto (package cortexops, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3 } from "@bufbuild/protobuf";
import { Reference, Revision } from "../../../../pkg/apis/core/v1/core_pb";
import { Limits } from "../../../../internal/cortex/config/validation/limits_pb";
import { RuntimeConfigValues } from "../../../../internal/cortex/config/runtimeconfig/runtimeconfig_pb";
import { Config } from "../../../../internal/cortex/config/compactor/compactor_pb";
import { Config as Config$1 } from "../../../../internal/cortex/config/querier/querier_pb";
import { Config as Config$2 } from "../../../../internal/cortex/config/storage/storage_pb";
import { Action, PresetMetadata, Target, ValidationError } from "../../../../pkg/plugins/driverutil/types_pb";

/**
 * @generated from message cortexops.CapabilityBackendConfigSpec
 */
export class CapabilityBackendConfigSpec extends Message<CapabilityBackendConfigSpec> {
  /**
   * @generated from field: optional bool enabled = 1;
   */
  enabled?: boolean;

  /**
   * @generated from field: core.Revision revision = 2;
   */
  revision?: Revision;

  /**
   * @generated from field: cortexops.CortexWorkloadsConfig cortexWorkloads = 4;
   */
  cortexWorkloads?: CortexWorkloadsConfig;

  /**
   * @generated from field: cortexops.CortexApplicationConfig cortexConfig = 5;
   */
  cortexConfig?: CortexApplicationConfig;

  /**
   * @generated from field: cortexops.GrafanaConfig grafana = 9;
   */
  grafana?: GrafanaConfig;

  constructor(data?: PartialMessage<CapabilityBackendConfigSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexops.CapabilityBackendConfigSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "revision", kind: "message", T: Revision },
    { no: 4, name: "cortexWorkloads", kind: "message", T: CortexWorkloadsConfig },
    { no: 5, name: "cortexConfig", kind: "message", T: CortexApplicationConfig },
    { no: 9, name: "grafana", kind: "message", T: GrafanaConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapabilityBackendConfigSpec {
    return new CapabilityBackendConfigSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapabilityBackendConfigSpec {
    return new CapabilityBackendConfigSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapabilityBackendConfigSpec {
    return new CapabilityBackendConfigSpec().fromJsonString(jsonString, options);
  }

  static equals(a: CapabilityBackendConfigSpec | PlainMessage<CapabilityBackendConfigSpec> | undefined, b: CapabilityBackendConfigSpec | PlainMessage<CapabilityBackendConfigSpec> | undefined): boolean {
    return proto3.util.equals(CapabilityBackendConfigSpec, a, b);
  }
}

/**
 * @generated from message cortexops.CortexWorkloadsConfig
 */
export class CortexWorkloadsConfig extends Message<CortexWorkloadsConfig> {
  /**
   * @generated from field: map<string, cortexops.CortexWorkloadSpec> targets = 1;
   */
  targets: { [key: string]: CortexWorkloadSpec } = {};

  constructor(data?: PartialMessage<CortexWorkloadsConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexops.CortexWorkloadsConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "targets", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: CortexWorkloadSpec} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CortexWorkloadsConfig {
    return new CortexWorkloadsConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CortexWorkloadsConfig {
    return new CortexWorkloadsConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CortexWorkloadsConfig {
    return new CortexWorkloadsConfig().fromJsonString(jsonString, options);
  }

  static equals(a: CortexWorkloadsConfig | PlainMessage<CortexWorkloadsConfig> | undefined, b: CortexWorkloadsConfig | PlainMessage<CortexWorkloadsConfig> | undefined): boolean {
    return proto3.util.equals(CortexWorkloadsConfig, a, b);
  }
}

/**
 * @generated from message cortexops.CortexWorkloadSpec
 */
export class CortexWorkloadSpec extends Message<CortexWorkloadSpec> {
  /**
   * @generated from field: optional int32 replicas = 1;
   */
  replicas?: number;

  /**
   * @generated from field: repeated string extraArgs = 2;
   */
  extraArgs: string[] = [];

  constructor(data?: PartialMessage<CortexWorkloadSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexops.CortexWorkloadSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "extraArgs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CortexWorkloadSpec {
    return new CortexWorkloadSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CortexWorkloadSpec {
    return new CortexWorkloadSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CortexWorkloadSpec {
    return new CortexWorkloadSpec().fromJsonString(jsonString, options);
  }

  static equals(a: CortexWorkloadSpec | PlainMessage<CortexWorkloadSpec> | undefined, b: CortexWorkloadSpec | PlainMessage<CortexWorkloadSpec> | undefined): boolean {
    return proto3.util.equals(CortexWorkloadSpec, a, b);
  }
}

/**
 * @generated from message cortexops.CortexApplicationConfig
 */
export class CortexApplicationConfig extends Message<CortexApplicationConfig> {
  /**
   * @generated from field: validation.Limits limits = 1;
   */
  limits?: Limits;

  /**
   * @generated from field: runtimeconfig.RuntimeConfigValues runtime_config = 2;
   */
  runtimeConfig?: RuntimeConfigValues;

  /**
   * @generated from field: compactor.Config compactor = 3;
   */
  compactor?: Config;

  /**
   * @generated from field: querier.Config querier = 4;
   */
  querier?: Config$1;

  /**
   * @generated from field: storage.Config storage = 5;
   */
  storage?: Config$2;

  /**
   * @generated from field: optional string log_level = 6;
   */
  logLevel?: string;

  constructor(data?: PartialMessage<CortexApplicationConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexops.CortexApplicationConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limits", kind: "message", T: Limits },
    { no: 2, name: "runtime_config", kind: "message", T: RuntimeConfigValues },
    { no: 3, name: "compactor", kind: "message", T: Config },
    { no: 4, name: "querier", kind: "message", T: Config$1 },
    { no: 5, name: "storage", kind: "message", T: Config$2 },
    { no: 6, name: "log_level", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CortexApplicationConfig {
    return new CortexApplicationConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CortexApplicationConfig {
    return new CortexApplicationConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CortexApplicationConfig {
    return new CortexApplicationConfig().fromJsonString(jsonString, options);
  }

  static equals(a: CortexApplicationConfig | PlainMessage<CortexApplicationConfig> | undefined, b: CortexApplicationConfig | PlainMessage<CortexApplicationConfig> | undefined): boolean {
    return proto3.util.equals(CortexApplicationConfig, a, b);
  }
}

/**
 * @generated from message cortexops.GrafanaConfig
 */
export class GrafanaConfig extends Message<GrafanaConfig> {
  /**
   * Whether to deploy a managed Grafana instance.
   *
   * @generated from field: optional bool enabled = 1;
   */
  enabled?: boolean;

  /**
   * The version of Grafana to deploy.
   *
   * @generated from field: optional string version = 2;
   */
  version?: string;

  /**
   * @generated from field: optional string hostname = 3;
   */
  hostname?: string;

  constructor(data?: PartialMessage<GrafanaConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexops.GrafanaConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrafanaConfig {
    return new GrafanaConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrafanaConfig {
    return new GrafanaConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrafanaConfig {
    return new GrafanaConfig().fromJsonString(jsonString, options);
  }

  static equals(a: GrafanaConfig | PlainMessage<GrafanaConfig> | undefined, b: GrafanaConfig | PlainMessage<GrafanaConfig> | undefined): boolean {
    return proto3.util.equals(GrafanaConfig, a, b);
  }
}

/**
 * @generated from message cortexops.PresetList
 */
export class PresetList extends Message<PresetList> {
  /**
   * @generated from field: repeated cortexops.Preset items = 1;
   */
  items: Preset[] = [];

  constructor(data?: PartialMessage<PresetList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexops.PresetList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Preset, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PresetList {
    return new PresetList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PresetList {
    return new PresetList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PresetList {
    return new PresetList().fromJsonString(jsonString, options);
  }

  static equals(a: PresetList | PlainMessage<PresetList> | undefined, b: PresetList | PlainMessage<PresetList> | undefined): boolean {
    return proto3.util.equals(PresetList, a, b);
  }
}

/**
 * @generated from message cortexops.Preset
 */
export class Preset extends Message<Preset> {
  /**
   * @generated from field: core.Reference id = 1;
   */
  id?: Reference;

  /**
   * @generated from field: driverutil.PresetMetadata metadata = 2;
   */
  metadata?: PresetMetadata;

  /**
   * @generated from field: cortexops.CapabilityBackendConfigSpec spec = 3;
   */
  spec?: CapabilityBackendConfigSpec;

  constructor(data?: PartialMessage<Preset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexops.Preset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Reference },
    { no: 2, name: "metadata", kind: "message", T: PresetMetadata },
    { no: 3, name: "spec", kind: "message", T: CapabilityBackendConfigSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Preset {
    return new Preset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Preset {
    return new Preset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Preset {
    return new Preset().fromJsonString(jsonString, options);
  }

  static equals(a: Preset | PlainMessage<Preset> | undefined, b: Preset | PlainMessage<Preset> | undefined): boolean {
    return proto3.util.equals(Preset, a, b);
  }
}

/**
 * @generated from message cortexops.DryRunRequest
 */
export class DryRunRequest extends Message<DryRunRequest> {
  /**
   * @generated from field: driverutil.Target target = 1;
   */
  target = Target.ActiveConfiguration;

  /**
   * @generated from field: driverutil.Action action = 2;
   */
  action = Action.NoAction;

  /**
   * Set
   *
   * @generated from field: cortexops.CapabilityBackendConfigSpec spec = 3;
   */
  spec?: CapabilityBackendConfigSpec;

  /**
   * Reset
   *
   * @generated from field: core.Revision revision = 4;
   */
  revision?: Revision;

  /**
   * Reset
   *
   * @generated from field: cortexops.CapabilityBackendConfigSpec patch = 5;
   */
  patch?: CapabilityBackendConfigSpec;

  /**
   * Reset
   *
   * @generated from field: google.protobuf.FieldMask mask = 6;
   */
  mask?: FieldMask;

  constructor(data?: PartialMessage<DryRunRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexops.DryRunRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "enum", T: proto3.getEnumType(Target) },
    { no: 2, name: "action", kind: "enum", T: proto3.getEnumType(Action) },
    { no: 3, name: "spec", kind: "message", T: CapabilityBackendConfigSpec },
    { no: 4, name: "revision", kind: "message", T: Revision },
    { no: 5, name: "patch", kind: "message", T: CapabilityBackendConfigSpec },
    { no: 6, name: "mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DryRunRequest {
    return new DryRunRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DryRunRequest {
    return new DryRunRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DryRunRequest {
    return new DryRunRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DryRunRequest | PlainMessage<DryRunRequest> | undefined, b: DryRunRequest | PlainMessage<DryRunRequest> | undefined): boolean {
    return proto3.util.equals(DryRunRequest, a, b);
  }
}

/**
 * @generated from message cortexops.DryRunResponse
 */
export class DryRunResponse extends Message<DryRunResponse> {
  /**
   * @generated from field: cortexops.CapabilityBackendConfigSpec current = 1;
   */
  current?: CapabilityBackendConfigSpec;

  /**
   * @generated from field: cortexops.CapabilityBackendConfigSpec modified = 2;
   */
  modified?: CapabilityBackendConfigSpec;

  /**
   * @generated from field: repeated driverutil.ValidationError validationErrors = 3;
   */
  validationErrors: ValidationError[] = [];

  constructor(data?: PartialMessage<DryRunResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexops.DryRunResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "current", kind: "message", T: CapabilityBackendConfigSpec },
    { no: 2, name: "modified", kind: "message", T: CapabilityBackendConfigSpec },
    { no: 3, name: "validationErrors", kind: "message", T: ValidationError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DryRunResponse {
    return new DryRunResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DryRunResponse {
    return new DryRunResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DryRunResponse {
    return new DryRunResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DryRunResponse | PlainMessage<DryRunResponse> | undefined, b: DryRunResponse | PlainMessage<DryRunResponse> | undefined): boolean {
    return proto3.util.equals(DryRunResponse, a, b);
  }
}

/**
 * @generated from message cortexops.ConfigurationHistoryResponse
 */
export class ConfigurationHistoryResponse extends Message<ConfigurationHistoryResponse> {
  /**
   * @generated from field: repeated cortexops.CapabilityBackendConfigSpec entries = 1;
   */
  entries: CapabilityBackendConfigSpec[] = [];

  constructor(data?: PartialMessage<ConfigurationHistoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexops.ConfigurationHistoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entries", kind: "message", T: CapabilityBackendConfigSpec, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigurationHistoryResponse {
    return new ConfigurationHistoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigurationHistoryResponse {
    return new ConfigurationHistoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigurationHistoryResponse {
    return new ConfigurationHistoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigurationHistoryResponse | PlainMessage<ConfigurationHistoryResponse> | undefined, b: ConfigurationHistoryResponse | PlainMessage<ConfigurationHistoryResponse> | undefined): boolean {
    return proto3.util.equals(ConfigurationHistoryResponse, a, b);
  }
}

/**
 * @generated from message cortexops.SetRequest
 */
export class SetRequest extends Message<SetRequest> {
  /**
   * @generated from field: cortexops.CapabilityBackendConfigSpec spec = 1;
   */
  spec?: CapabilityBackendConfigSpec;

  constructor(data?: PartialMessage<SetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexops.SetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "message", T: CapabilityBackendConfigSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetRequest {
    return new SetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetRequest {
    return new SetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetRequest {
    return new SetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetRequest | PlainMessage<SetRequest> | undefined, b: SetRequest | PlainMessage<SetRequest> | undefined): boolean {
    return proto3.util.equals(SetRequest, a, b);
  }
}

/**
 * @generated from message cortexops.ResetRequest
 */
export class ResetRequest extends Message<ResetRequest> {
  /**
   * @generated from field: core.Revision revision = 1;
   */
  revision?: Revision;

  /**
   * @generated from field: google.protobuf.FieldMask mask = 2;
   */
  mask?: FieldMask;

  /**
   * @generated from field: cortexops.CapabilityBackendConfigSpec patch = 3;
   */
  patch?: CapabilityBackendConfigSpec;

  constructor(data?: PartialMessage<ResetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexops.ResetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "revision", kind: "message", T: Revision },
    { no: 2, name: "mask", kind: "message", T: FieldMask },
    { no: 3, name: "patch", kind: "message", T: CapabilityBackendConfigSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetRequest {
    return new ResetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetRequest {
    return new ResetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetRequest {
    return new ResetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResetRequest | PlainMessage<ResetRequest> | undefined, b: ResetRequest | PlainMessage<ResetRequest> | undefined): boolean {
    return proto3.util.equals(ResetRequest, a, b);
  }
}

