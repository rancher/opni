// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/plugins/alerting/pkg/apis/rules/rules.proto

package rules

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RuleSync_SyncRules_FullMethodName = "/alerting.rules.RuleSync/SyncRules"
)

// RuleSyncClient is the client API for RuleSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuleSyncClient interface {
	SyncRules(ctx context.Context, in *RuleManifest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type ruleSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleSyncClient(cc grpc.ClientConnInterface) RuleSyncClient {
	return &ruleSyncClient{cc}
}

func (c *ruleSyncClient) SyncRules(ctx context.Context, in *RuleManifest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RuleSync_SyncRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleSyncServer is the server API for RuleSync service.
// All implementations should embed UnimplementedRuleSyncServer
// for forward compatibility
type RuleSyncServer interface {
	SyncRules(context.Context, *RuleManifest) (*emptypb.Empty, error)
}

// UnimplementedRuleSyncServer should be embedded to have forward compatible implementations.
type UnimplementedRuleSyncServer struct {
}

func (UnimplementedRuleSyncServer) SyncRules(context.Context, *RuleManifest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncRules not implemented")
}

// UnsafeRuleSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuleSyncServer will
// result in compilation errors.
type UnsafeRuleSyncServer interface {
	mustEmbedUnimplementedRuleSyncServer()
}

func RegisterRuleSyncServer(s grpc.ServiceRegistrar, srv RuleSyncServer) {
	s.RegisterService(&RuleSync_ServiceDesc, srv)
}

func _RuleSync_SyncRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleManifest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleSyncServer).SyncRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleSync_SyncRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleSyncServer).SyncRules(ctx, req.(*RuleManifest))
	}
	return interceptor(ctx, in, info, handler)
}

// RuleSync_ServiceDesc is the grpc.ServiceDesc for RuleSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuleSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alerting.rules.RuleSync",
	HandlerType: (*RuleSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncRules",
			Handler:    _RuleSync_SyncRules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/plugins/alerting/pkg/apis/rules/rules.proto",
}
