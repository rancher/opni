// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/pkg/apis/alerting/v2/receiver.proto

package v2

import (
	context "context"
	v1 "github.com/rancher/opni/pkg/apis/core/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReceiverServer_GetReceiver_FullMethodName    = "/alerting.ReceiverServer/GetReceiver"
	ReceiverServer_ListReceivers_FullMethodName  = "/alerting.ReceiverServer/ListReceivers"
	ReceiverServer_PutReceiver_FullMethodName    = "/alerting.ReceiverServer/PutReceiver"
	ReceiverServer_DeleteReceiver_FullMethodName = "/alerting.ReceiverServer/DeleteReceiver"
	ReceiverServer_TestReceiver_FullMethodName   = "/alerting.ReceiverServer/TestReceiver"
)

// ReceiverServerClient is the client API for ReceiverServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReceiverServerClient interface {
	GetReceiver(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*OpniReceiver, error)
	ListReceivers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OpniReceiverList, error)
	PutReceiver(ctx context.Context, in *OpniReceiver, opts ...grpc.CallOption) (*v1.Reference, error)
	DeleteReceiver(ctx context.Context, in *DeleteReceiverRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TestReceiver(ctx context.Context, in *OpniReceiver, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type receiverServerClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiverServerClient(cc grpc.ClientConnInterface) ReceiverServerClient {
	return &receiverServerClient{cc}
}

func (c *receiverServerClient) GetReceiver(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*OpniReceiver, error) {
	out := new(OpniReceiver)
	err := c.cc.Invoke(ctx, ReceiverServer_GetReceiver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverServerClient) ListReceivers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OpniReceiverList, error) {
	out := new(OpniReceiverList)
	err := c.cc.Invoke(ctx, ReceiverServer_ListReceivers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverServerClient) PutReceiver(ctx context.Context, in *OpniReceiver, opts ...grpc.CallOption) (*v1.Reference, error) {
	out := new(v1.Reference)
	err := c.cc.Invoke(ctx, ReceiverServer_PutReceiver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverServerClient) DeleteReceiver(ctx context.Context, in *DeleteReceiverRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ReceiverServer_DeleteReceiver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverServerClient) TestReceiver(ctx context.Context, in *OpniReceiver, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ReceiverServer_TestReceiver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceiverServerServer is the server API for ReceiverServer service.
// All implementations must embed UnimplementedReceiverServerServer
// for forward compatibility
type ReceiverServerServer interface {
	GetReceiver(context.Context, *v1.Reference) (*OpniReceiver, error)
	ListReceivers(context.Context, *emptypb.Empty) (*OpniReceiverList, error)
	PutReceiver(context.Context, *OpniReceiver) (*v1.Reference, error)
	DeleteReceiver(context.Context, *DeleteReceiverRequest) (*emptypb.Empty, error)
	TestReceiver(context.Context, *OpniReceiver) (*emptypb.Empty, error)
	mustEmbedUnimplementedReceiverServerServer()
}

// UnimplementedReceiverServerServer must be embedded to have forward compatible implementations.
type UnimplementedReceiverServerServer struct {
}

func (UnimplementedReceiverServerServer) GetReceiver(context.Context, *v1.Reference) (*OpniReceiver, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceiver not implemented")
}
func (UnimplementedReceiverServerServer) ListReceivers(context.Context, *emptypb.Empty) (*OpniReceiverList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReceivers not implemented")
}
func (UnimplementedReceiverServerServer) PutReceiver(context.Context, *OpniReceiver) (*v1.Reference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutReceiver not implemented")
}
func (UnimplementedReceiverServerServer) DeleteReceiver(context.Context, *DeleteReceiverRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReceiver not implemented")
}
func (UnimplementedReceiverServerServer) TestReceiver(context.Context, *OpniReceiver) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestReceiver not implemented")
}
func (UnimplementedReceiverServerServer) mustEmbedUnimplementedReceiverServerServer() {}

// UnsafeReceiverServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceiverServerServer will
// result in compilation errors.
type UnsafeReceiverServerServer interface {
	mustEmbedUnimplementedReceiverServerServer()
}

func RegisterReceiverServerServer(s grpc.ServiceRegistrar, srv ReceiverServerServer) {
	s.RegisterService(&ReceiverServer_ServiceDesc, srv)
}

func _ReceiverServer_GetReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServerServer).GetReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiverServer_GetReceiver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServerServer).GetReceiver(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiverServer_ListReceivers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServerServer).ListReceivers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiverServer_ListReceivers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServerServer).ListReceivers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiverServer_PutReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpniReceiver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServerServer).PutReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiverServer_PutReceiver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServerServer).PutReceiver(ctx, req.(*OpniReceiver))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiverServer_DeleteReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServerServer).DeleteReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiverServer_DeleteReceiver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServerServer).DeleteReceiver(ctx, req.(*DeleteReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiverServer_TestReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpniReceiver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServerServer).TestReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiverServer_TestReceiver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServerServer).TestReceiver(ctx, req.(*OpniReceiver))
	}
	return interceptor(ctx, in, info, handler)
}

// ReceiverServer_ServiceDesc is the grpc.ServiceDesc for ReceiverServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReceiverServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alerting.ReceiverServer",
	HandlerType: (*ReceiverServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReceiver",
			Handler:    _ReceiverServer_GetReceiver_Handler,
		},
		{
			MethodName: "ListReceivers",
			Handler:    _ReceiverServer_ListReceivers_Handler,
		},
		{
			MethodName: "PutReceiver",
			Handler:    _ReceiverServer_PutReceiver_Handler,
		},
		{
			MethodName: "DeleteReceiver",
			Handler:    _ReceiverServer_DeleteReceiver_Handler,
		},
		{
			MethodName: "TestReceiver",
			Handler:    _ReceiverServer_TestReceiver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/pkg/apis/alerting/v2/receiver.proto",
}
