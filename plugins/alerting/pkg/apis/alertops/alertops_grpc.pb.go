// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/plugins/alerting/pkg/apis/alertops/alertops.proto

package alertops

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlertingAdminClient is the client API for AlertingAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertingAdminClient interface {
	GetClusterConfiguration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterConfiguration, error)
	// Install/Uninstall the alerting cluster by setting enabled=true/false
	ConfigureCluster(ctx context.Context, in *ClusterConfiguration, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetClusterStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InstallStatus, error)
	InstallCluster(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UninstallCluster(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type alertingAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertingAdminClient(cc grpc.ClientConnInterface) AlertingAdminClient {
	return &alertingAdminClient{cc}
}

func (c *alertingAdminClient) GetClusterConfiguration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterConfiguration, error) {
	out := new(ClusterConfiguration)
	err := c.cc.Invoke(ctx, "/alerting.ops.AlertingAdmin/GetClusterConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingAdminClient) ConfigureCluster(ctx context.Context, in *ClusterConfiguration, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alerting.ops.AlertingAdmin/ConfigureCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingAdminClient) GetClusterStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InstallStatus, error) {
	out := new(InstallStatus)
	err := c.cc.Invoke(ctx, "/alerting.ops.AlertingAdmin/GetClusterStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingAdminClient) InstallCluster(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alerting.ops.AlertingAdmin/InstallCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingAdminClient) UninstallCluster(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alerting.ops.AlertingAdmin/UninstallCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertingAdminServer is the server API for AlertingAdmin service.
// All implementations must embed UnimplementedAlertingAdminServer
// for forward compatibility
type AlertingAdminServer interface {
	GetClusterConfiguration(context.Context, *emptypb.Empty) (*ClusterConfiguration, error)
	// Install/Uninstall the alerting cluster by setting enabled=true/false
	ConfigureCluster(context.Context, *ClusterConfiguration) (*emptypb.Empty, error)
	GetClusterStatus(context.Context, *emptypb.Empty) (*InstallStatus, error)
	InstallCluster(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	UninstallCluster(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedAlertingAdminServer()
}

// UnimplementedAlertingAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAlertingAdminServer struct {
}

func (UnimplementedAlertingAdminServer) GetClusterConfiguration(context.Context, *emptypb.Empty) (*ClusterConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterConfiguration not implemented")
}
func (UnimplementedAlertingAdminServer) ConfigureCluster(context.Context, *ClusterConfiguration) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureCluster not implemented")
}
func (UnimplementedAlertingAdminServer) GetClusterStatus(context.Context, *emptypb.Empty) (*InstallStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterStatus not implemented")
}
func (UnimplementedAlertingAdminServer) InstallCluster(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallCluster not implemented")
}
func (UnimplementedAlertingAdminServer) UninstallCluster(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallCluster not implemented")
}
func (UnimplementedAlertingAdminServer) mustEmbedUnimplementedAlertingAdminServer() {}

// UnsafeAlertingAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertingAdminServer will
// result in compilation errors.
type UnsafeAlertingAdminServer interface {
	mustEmbedUnimplementedAlertingAdminServer()
}

func RegisterAlertingAdminServer(s grpc.ServiceRegistrar, srv AlertingAdminServer) {
	s.RegisterService(&AlertingAdmin_ServiceDesc, srv)
}

func _AlertingAdmin_GetClusterConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingAdminServer).GetClusterConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.ops.AlertingAdmin/GetClusterConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingAdminServer).GetClusterConfiguration(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertingAdmin_ConfigureCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingAdminServer).ConfigureCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.ops.AlertingAdmin/ConfigureCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingAdminServer).ConfigureCluster(ctx, req.(*ClusterConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertingAdmin_GetClusterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingAdminServer).GetClusterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.ops.AlertingAdmin/GetClusterStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingAdminServer).GetClusterStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertingAdmin_InstallCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingAdminServer).InstallCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.ops.AlertingAdmin/InstallCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingAdminServer).InstallCluster(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertingAdmin_UninstallCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingAdminServer).UninstallCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.ops.AlertingAdmin/UninstallCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingAdminServer).UninstallCluster(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AlertingAdmin_ServiceDesc is the grpc.ServiceDesc for AlertingAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertingAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alerting.ops.AlertingAdmin",
	HandlerType: (*AlertingAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClusterConfiguration",
			Handler:    _AlertingAdmin_GetClusterConfiguration_Handler,
		},
		{
			MethodName: "ConfigureCluster",
			Handler:    _AlertingAdmin_ConfigureCluster_Handler,
		},
		{
			MethodName: "GetClusterStatus",
			Handler:    _AlertingAdmin_GetClusterStatus_Handler,
		},
		{
			MethodName: "InstallCluster",
			Handler:    _AlertingAdmin_InstallCluster_Handler,
		},
		{
			MethodName: "UninstallCluster",
			Handler:    _AlertingAdmin_UninstallCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/plugins/alerting/pkg/apis/alertops/alertops.proto",
}

// DynamicAlertingClient is the client API for DynamicAlerting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DynamicAlertingClient interface {
	Fetch(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AlertingConfig, error)
	Update(ctx context.Context, in *AlertingConfig, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DynamicStatus, error)
	Reload(ctx context.Context, in *ReloadInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dynamicAlertingClient struct {
	cc grpc.ClientConnInterface
}

func NewDynamicAlertingClient(cc grpc.ClientConnInterface) DynamicAlertingClient {
	return &dynamicAlertingClient{cc}
}

func (c *dynamicAlertingClient) Fetch(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AlertingConfig, error) {
	out := new(AlertingConfig)
	err := c.cc.Invoke(ctx, "/alerting.ops.DynamicAlerting/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicAlertingClient) Update(ctx context.Context, in *AlertingConfig, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alerting.ops.DynamicAlerting/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicAlertingClient) GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DynamicStatus, error) {
	out := new(DynamicStatus)
	err := c.cc.Invoke(ctx, "/alerting.ops.DynamicAlerting/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicAlertingClient) Reload(ctx context.Context, in *ReloadInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alerting.ops.DynamicAlerting/Reload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynamicAlertingServer is the server API for DynamicAlerting service.
// All implementations must embed UnimplementedDynamicAlertingServer
// for forward compatibility
type DynamicAlertingServer interface {
	Fetch(context.Context, *emptypb.Empty) (*AlertingConfig, error)
	Update(context.Context, *AlertingConfig) (*emptypb.Empty, error)
	GetStatus(context.Context, *emptypb.Empty) (*DynamicStatus, error)
	Reload(context.Context, *ReloadInfo) (*emptypb.Empty, error)
	mustEmbedUnimplementedDynamicAlertingServer()
}

// UnimplementedDynamicAlertingServer must be embedded to have forward compatible implementations.
type UnimplementedDynamicAlertingServer struct {
}

func (UnimplementedDynamicAlertingServer) Fetch(context.Context, *emptypb.Empty) (*AlertingConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedDynamicAlertingServer) Update(context.Context, *AlertingConfig) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDynamicAlertingServer) GetStatus(context.Context, *emptypb.Empty) (*DynamicStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedDynamicAlertingServer) Reload(context.Context, *ReloadInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reload not implemented")
}
func (UnimplementedDynamicAlertingServer) mustEmbedUnimplementedDynamicAlertingServer() {}

// UnsafeDynamicAlertingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DynamicAlertingServer will
// result in compilation errors.
type UnsafeDynamicAlertingServer interface {
	mustEmbedUnimplementedDynamicAlertingServer()
}

func RegisterDynamicAlertingServer(s grpc.ServiceRegistrar, srv DynamicAlertingServer) {
	s.RegisterService(&DynamicAlerting_ServiceDesc, srv)
}

func _DynamicAlerting_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicAlertingServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.ops.DynamicAlerting/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicAlertingServer).Fetch(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicAlerting_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertingConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicAlertingServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.ops.DynamicAlerting/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicAlertingServer).Update(ctx, req.(*AlertingConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicAlerting_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicAlertingServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.ops.DynamicAlerting/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicAlertingServer).GetStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicAlerting_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicAlertingServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.ops.DynamicAlerting/Reload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicAlertingServer).Reload(ctx, req.(*ReloadInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// DynamicAlerting_ServiceDesc is the grpc.ServiceDesc for DynamicAlerting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DynamicAlerting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alerting.ops.DynamicAlerting",
	HandlerType: (*DynamicAlertingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _DynamicAlerting_Fetch_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DynamicAlerting_Update_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _DynamicAlerting_GetStatus_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _DynamicAlerting_Reload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/plugins/alerting/pkg/apis/alertops/alertops.proto",
}
