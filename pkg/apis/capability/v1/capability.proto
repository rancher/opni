syntax = "proto3";
option go_package = "github.com/rancher/opni/pkg/apis/capability/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "github.com/rancher/opni/pkg/apis/core/v1/core.proto";

package capability;

service Backend {
  // Returns info about the backend, including capability name
  rpc Info(google.protobuf.Empty) returns (InfoResponse);
  
  // Returns an error if installing the capability would fail.
  rpc CanInstall(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option deprecated = true;
  }

  // Installs the capability on a cluster. 
  rpc Install(InstallRequest) returns (google.protobuf.Empty);

  rpc Status(StatusRequest) returns (NodeCapabilityStatus);

	// Requests the backend to clean up any resources it owns and prepare
	// for uninstallation. This process is asynchronous. The status of the
  // operation can be queried using the UninstallStatus method, or canceled
  // using the CancelUninstall method.
  rpc Uninstall(UninstallRequest) returns (google.protobuf.Empty);

  // Gets the status of the uninstall task for the given cluster.
  rpc UninstallStatus(core.Reference) returns (core.TaskStatus);

	// Cancels an uninstall task for the given cluster, if it is still pending.
  rpc CancelUninstall(core.Reference) returns (google.protobuf.Empty);

	// Returns a go template string which will generate a shell command used to
	// install the capability. This will be displayed to the user in the UI.
	// See InstallerTemplateSpec above for the available template fields.
  rpc InstallerTemplate(google.protobuf.Empty) returns (InstallerTemplateResponse) {
    option deprecated = true;
  }
}

service Node {
  rpc SyncNow(google.protobuf.Empty) returns (google.protobuf.Empty);
}

message InfoResponse {
  string capabilityName = 1;
}

message InstallRequest {
  core.Reference cluster = 1;
}

message UninstallRequest {
  core.Reference cluster = 1;
  string options = 2;
}

message InstallerTemplateResponse {
  string template = 1;
}

message StatusRequest {
  core.Reference cluster = 1;
}

message NodeCapabilityStatus {
  bool enabled = 1;
  google.protobuf.Timestamp lastSync = 2;
}