// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/pkg/plugins/topology/pkg/apis/representation/representation.proto

package representation

import (
	context "context"
	v1 "github.com/rancher/opni/pkg/apis/core/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TopologyRepresentationClient is the client API for TopologyRepresentation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopologyRepresentationClient interface {
	GetGraph(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*TopologyGraph, error)
	StoreGraph(ctx context.Context, in *TopologyGraph, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RenderGraph(ctx context.Context, in *TopologyGraph, opts ...grpc.CallOption) (*GraphHtml, error)
}

type topologyRepresentationClient struct {
	cc grpc.ClientConnInterface
}

func NewTopologyRepresentationClient(cc grpc.ClientConnInterface) TopologyRepresentationClient {
	return &topologyRepresentationClient{cc}
}

func (c *topologyRepresentationClient) GetGraph(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*TopologyGraph, error) {
	out := new(TopologyGraph)
	err := c.cc.Invoke(ctx, "/representation.TopologyRepresentation/GetGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyRepresentationClient) StoreGraph(ctx context.Context, in *TopologyGraph, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/representation.TopologyRepresentation/StoreGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyRepresentationClient) RenderGraph(ctx context.Context, in *TopologyGraph, opts ...grpc.CallOption) (*GraphHtml, error) {
	out := new(GraphHtml)
	err := c.cc.Invoke(ctx, "/representation.TopologyRepresentation/RenderGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopologyRepresentationServer is the server API for TopologyRepresentation service.
// All implementations must embed UnimplementedTopologyRepresentationServer
// for forward compatibility
type TopologyRepresentationServer interface {
	GetGraph(context.Context, *v1.Reference) (*TopologyGraph, error)
	StoreGraph(context.Context, *TopologyGraph) (*emptypb.Empty, error)
	RenderGraph(context.Context, *TopologyGraph) (*GraphHtml, error)
	mustEmbedUnimplementedTopologyRepresentationServer()
}

// UnimplementedTopologyRepresentationServer must be embedded to have forward compatible implementations.
type UnimplementedTopologyRepresentationServer struct {
}

func (UnimplementedTopologyRepresentationServer) GetGraph(context.Context, *v1.Reference) (*TopologyGraph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGraph not implemented")
}
func (UnimplementedTopologyRepresentationServer) StoreGraph(context.Context, *TopologyGraph) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreGraph not implemented")
}
func (UnimplementedTopologyRepresentationServer) RenderGraph(context.Context, *TopologyGraph) (*GraphHtml, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderGraph not implemented")
}
func (UnimplementedTopologyRepresentationServer) mustEmbedUnimplementedTopologyRepresentationServer() {
}

// UnsafeTopologyRepresentationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopologyRepresentationServer will
// result in compilation errors.
type UnsafeTopologyRepresentationServer interface {
	mustEmbedUnimplementedTopologyRepresentationServer()
}

func RegisterTopologyRepresentationServer(s grpc.ServiceRegistrar, srv TopologyRepresentationServer) {
	s.RegisterService(&TopologyRepresentation_ServiceDesc, srv)
}

func _TopologyRepresentation_GetGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyRepresentationServer).GetGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/representation.TopologyRepresentation/GetGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyRepresentationServer).GetGraph(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyRepresentation_StoreGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopologyGraph)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyRepresentationServer).StoreGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/representation.TopologyRepresentation/StoreGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyRepresentationServer).StoreGraph(ctx, req.(*TopologyGraph))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyRepresentation_RenderGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopologyGraph)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyRepresentationServer).RenderGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/representation.TopologyRepresentation/RenderGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyRepresentationServer).RenderGraph(ctx, req.(*TopologyGraph))
	}
	return interceptor(ctx, in, info, handler)
}

// TopologyRepresentation_ServiceDesc is the grpc.ServiceDesc for TopologyRepresentation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopologyRepresentation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "representation.TopologyRepresentation",
	HandlerType: (*TopologyRepresentationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGraph",
			Handler:    _TopologyRepresentation_GetGraph_Handler,
		},
		{
			MethodName: "StoreGraph",
			Handler:    _TopologyRepresentation_StoreGraph_Handler,
		},
		{
			MethodName: "RenderGraph",
			Handler:    _TopologyRepresentation_RenderGraph_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/pkg/plugins/topology/pkg/apis/representation/representation.proto",
}
