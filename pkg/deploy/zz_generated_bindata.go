// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// src/k8s/infra-stack/helm-controller.yaml
// src/k8s/infra-stack/local-path-provisioner.yaml
// src/k8s/infra-stack/namespace.yaml
// src/k8s/opni-stack/minio.yaml
// src/k8s/opni-stack/nats.yaml
// src/k8s/opni-stack/opendistro-es.yaml
// src/k8s/opni-stack/traefik.yaml
// src/k8s/services/drain-service.yaml
// src/k8s/services/nulog-inference-service-control-plane.yaml
// src/k8s/services/nulog-inference-service.yaml
// src/k8s/services/payload-receiver-service.yaml
// src/k8s/services/preprocessing.yaml
// src/k8s/services/training_controller.yaml
// +build !no_stage

package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _infraStackHelmControllerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x3f\x8f\x13\x31\x10\xc5\x7b\x7f\x8a\x51\x4a\x24\x6f\x88\x44\x71\x72\xc7\x1f\x89\x06\x51\x1c\x12\x0d\xa2\x98\x75\x1e\x17\x13\xff\xd3\xd8\x5e\xe9\xf8\xf4\xc8\x21\x8b\x36\xc9\x2d\x3a\x04\x53\x79\x67\xc6\x6f\xde\xfe\xc6\x5a\x6b\xc5\xd9\x7d\x86\x14\x97\xa2\xa1\x69\xa7\x8e\x2e\xee\x0d\x7d\x82\x4c\xce\xe2\xb5\xb5\xa9\xc5\xaa\x02\x2a\xef\xb9\xb2\x51\x44\x91\x03\x0c\x1d\xe0\x83\xb6\x29\x56\x49\xde\x43\xce\xf9\x92\xd9\xc2\xd0\xb1\x8d\xd0\xe5\xb1\x54\x04\x75\x3d\x42\x46\xb6\x03\xb7\x7a\x48\xe2\x7e\x70\x75\x29\x0e\xc7\xbb\x32\xb8\xb4\x9d\x76\x23\x2a\xcf\x0e\xde\xfa\x56\x2a\xe4\x3e\x79\x3c\x63\xbc\x34\x8f\xd2\xcb\x9a\x38\xbb\xf7\x92\x5a\x3e\x7d\xf6\xc4\xe6\xc5\xe6\x74\x12\x94\xd4\xc4\xe2\xa6\x30\x41\xc6\x8b\xe4\x7f\xf0\xfc\xc6\xc5\xbd\x8b\x0f\xcf\xb0\x5e\xda\xf8\x1d\xb6\x16\xa3\x34\x3d\x09\xff\xaf\x91\x4b\xf2\xb8\xc7\xb7\x3e\xf2\x96\xe5\xba\xda\x0c\xee\x0f\xff\x7b\x43\x86\x73\x2e\xdb\xdf\xaf\xe6\x1d\xb2\x4f\x8f\x01\xff\xf6\x62\x88\x3c\x8f\xf0\xe7\x8d\x70\xce\x4f\x30\xcb\xb0\xbd\x2c\xc8\xde\x59\x2e\x86\x76\x8a\xa8\xc0\xc3\xd6\x24\xbf\x2e\x06\xae\xf6\xf0\x61\xa1\xb4\xa2\x45\x54\x11\xb2\xe7\x8a\xf3\xbd\x85\xf3\x1e\xfe\x42\x62\x55\x84\x68\x36\x75\x3a\x5f\xac\xf0\xe3\x0a\x80\x1e\x3d\xc1\x2e\x42\x16\x23\xf4\x2a\xb2\x39\x5c\xe0\x07\x18\x12\x8e\xf6\x00\xd9\x5e\x35\x9a\xe9\xe5\x70\x37\xbc\x5a\xf4\xdb\x14\x02\xf7\x15\x7d\xd9\x5c\xf5\x6e\xbe\xaa\x9f\x01\x00\x00\xff\xff\xc3\xc4\x36\x41\x06\x04\x00\x00")

func infraStackHelmControllerYamlBytes() ([]byte, error) {
	return bindataRead(
		_infraStackHelmControllerYaml,
		"infra-stack/helm-controller.yaml",
	)
}

func infraStackHelmControllerYaml() (*asset, error) {
	bytes, err := infraStackHelmControllerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "infra-stack/helm-controller.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _infraStackLocalPathProvisionerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\xcd\x6e\xe3\x36\x10\xbe\xeb\x29\xa6\x6a\x2e\x2d\x96\x76\xdc\x1e\xd2\x72\xd1\x83\x37\x76\xb6\x01\x12\xdb\x88\xd3\xf6\x10\x2c\x0c\x8a\x1a\xdb\xdc\x50\x24\x41\x52\xce\x7a\xd3\xbc\x7b\x41\x51\x76\x24\xc7\x49\x1c\xb4\xbd\xad\x2e\x02\x87\xf3\xcd\xff\x0f\x99\x11\x7f\xa2\x75\x42\x2b\x0a\xab\x5e\x72\x2b\x54\x4e\x61\x8a\x76\x25\x38\xf6\x39\xd7\xa5\xf2\x49\x81\x9e\xe5\xcc\x33\x9a\x00\x28\x56\x20\x05\xa9\x39\x93\xc4\x30\xbf\x24\xc6\xea\x95\x08\x78\xb4\xc4\x45\x1c\x61\x35\x30\xb2\x3b\xc3\x38\x52\xb8\x2d\x33\x24\x6e\xed\x3c\x16\x09\x21\x24\x69\x6a\xb6\x19\xe3\x1d\x56\xfa\xa5\xb6\xe2\x2b\xf3\x42\xab\xce\xed\x2f\xae\x23\x74\x77\xd5\xcb\xd0\xb3\x8d\x61\xa7\xb2\x74\x1e\xed\x95\x96\x78\xb8\x55\x36\x70\xdb\x52\xa2\xa3\x09\x01\x66\xc4\x47\xab\x4b\xe3\x28\xdc\xa4\xe9\xa7\x04\xc0\xa2\xd3\xa5\xe5\x58\x51\x94\xce\xd1\xa5\xef\x20\x35\xc1\x36\xe7\x51\xf9\x95\x96\x65\x81\x5c\x32\x51\x54\x37\x5c\xab\xb9\x58\x14\xcc\xb8\x0a\xbe\x42\x9b\x55\xd0\x05\xfa\x70\x2d\x85\xab\xfe\x77\xcc\xf3\x65\xfa\xe9\x75\x95\xa8\x72\xa3\x85\xf2\x7b\xd5\x46\xa2\xce\x77\x74\xfd\x78\x90\xe0\x15\x06\xa9\x2d\x20\xb7\xc8\x3c\x56\x42\xf7\xdb\xe7\xbc\xb6\x6c\x81\x75\xfc\x9f\x0a\xad\xef\xb9\x64\xce\xe1\x81\x11\xf8\xf7\xd9\xfe\x20\x54\x2e\xd4\xe2\xf0\xa4\x67\x42\xe5\x49\xc8\xfc\x15\xce\x03\xf3\xc6\xc7\x17\xb4\x27\x00\x4f\xab\xec\x90\xda\x72\x65\xf6\x19\xb9\xaf\xca\x6b\x6f\x03\xfd\x5f\x6d\xc3\x8c\x71\xdd\x6d\xd7\x0e\xd0\x48\xbd\x2e\xf0\x0d\x1d\xfb\xbc\x2a\x67\x90\xd3\x2a\xf7\x46\x0a\xce\x1c\x85\x5e\x02\xe0\x50\x22\xf7\xda\x86\x1b\x80\x22\xe4\xf7\x82\x65\x28\x5d\x24\x84\x30\x9b\x17\x74\x79\x2c\x8c\x64\x1e\x6b\x78\xc3\xc8\xf0\xc9\x96\xa4\xd7\x64\x01\x6c\x4c\x0c\x9f\xb1\x42\x5b\xe1\xd7\xa7\xa1\x2c\x47\x95\xc7\x69\xf4\x84\x84\x8e\x26\xdc\x0a\x2f\x38\x93\x69\xcd\xef\x5a\x09\x1a\xbd\x2d\x3b\xe1\xf3\x5a\xa2\xad\xaa\xa7\x61\x31\x00\x81\x5b\x5c\x53\x48\x4f\x6b\x7d\xfd\x3c\xd7\xca\x8d\x95\x5c\xa7\x0d\x2e\x00\x6d\x02\x5a\x5b\x0a\xe9\xf0\x8b\x70\xde\xa5\x7b\x84\x54\x96\x87\x0a\xeb\x84\xcc\x58\x85\x1e\xab\x2e\xe1\x5a\x79\xab\x25\x31\x92\x29\x7c\x83\x5c\x00\x9c\xcf\x91\x7b\x0a\xe9\x48\x4f\xf9\x12\xf3\x52\xe2\x5b\x14\x17\x2c\xf4\xc5\x7f\xa5\x31\xb8\xc1\x84\x42\xbb\x8d\x20\x79\xad\x58\xe3\x27\x0a\xb6\x40\x0a\x96\x29\xbe\x44\xdb\xdd\xcf\x4d\x57\xc7\x9d\xe3\x4e\xef\xd7\x36\x6a\x52\x4a\x39\xd1\x52\xf0\x35\x85\xf3\xf9\x48\xfb\x89\x45\x87\xdb\xac\x06\xa3\x8a\x82\xa9\xfc\x31\xa7\xe4\x35\x6b\x08\x38\xcf\xac\x6f\x9c\x09\x89\x2b\xa2\x41\xea\xa2\xe7\xdd\x48\xad\x7f\x9d\xcf\x4e\xab\x2d\x47\x1c\xf6\x97\xa1\xc0\x5c\x53\x77\x8c\x47\x44\x90\xc8\xd4\x08\x6f\x11\xf8\x27\xcc\x2f\x69\x4b\xc1\x96\x03\xd5\xea\xa9\xb0\xc9\x78\x30\x1b\xf5\x2f\x87\xd3\x49\xff\x74\xd8\x10\xb6\x62\xb2\xc4\x33\xab\x0b\xda\x4a\xe0\x5c\xa0\xcc\xeb\x21\xfa\x84\x1e\x75\x6f\x1a\xb9\xb3\x9d\x25\x49\xd3\xab\x37\x38\x14\xe9\x97\xcc\xb4\xb5\x3d\xa9\x8a\x3a\xbe\xbb\xf3\xb0\xbd\xbb\x1e\x27\xe3\x34\xd2\xab\xe1\xf0\xe2\x6c\x0c\x8b\x42\x29\xed\x9b\x8d\xdd\x5c\x78\x3b\xfd\x20\x1c\xc9\x71\xce\x4a\xe9\x49\x75\x4d\x21\xf5\xb6\xc4\x34\x69\xd6\xe1\xa6\x4e\x03\xa0\xa1\x29\xfa\x5e\xef\xb5\x4b\x9d\x23\x85\xbf\x98\xf0\x67\xda\x9e\x09\xeb\xfc\xa9\x56\xae\x2c\xd0\x26\x36\xbe\x3c\x36\x45\x3b\x40\x89\x1e\x2b\xcf\xeb\x65\xb5\x09\x59\xb2\xf3\x94\x7b\x71\x07\x6c\x0b\xf4\x99\xf1\xbf\x01\x36\x6a\x95\xc2\xdf\xa4\x0a\xc8\x7d\x9d\x9b\x6a\x4c\x84\x0a\xb8\x64\x26\xa5\x37\x35\xf5\x7e\x9b\xb9\xea\x3e\xa5\xe9\x60\x78\xd6\xff\xe3\xe2\x7a\x36\xe9\x5f\xff\x3e\x3b\x1b\x5f\xcd\x46\xe3\xd1\xec\xe2\x7c\x7a\x3d\x1c\xcc\x46\xe3\xc1\x70\x9a\xbe\x7b\xc4\x04\xeb\x5c\x4a\x6f\xd2\xae\x36\xbe\xcb\x84\xae\x5f\x59\xe1\x7b\xa8\xff\xf1\xfc\x50\xed\x23\x1f\x56\x7a\x6d\xd8\xf7\xdf\x75\x33\xa1\xba\x6e\x59\x9d\xee\x96\x42\x22\x2c\xd0\x6b\xe3\x1d\xa4\x05\x75\xd4\xd0\x14\xb4\x89\xad\x9a\xeb\xc7\x9e\x67\x0e\xe1\x48\x1b\x0f\x42\xb5\xea\xce\xfc\xd0\x3a\xb2\xcc\x69\x59\xfa\xca\xe7\xdf\x8e\xc6\x93\xeb\xfe\xd5\xc7\x16\xc3\xfb\xf7\xad\xa3\x6b\xc3\x9d\xf8\x8a\xe7\xea\xc3\xda\xa3\x3b\x04\x5d\xb4\xd1\x2b\x2d\x43\x95\xbc\x86\x44\xc7\x78\xed\x9f\x8a\x9d\x55\xdc\xe6\xc2\x02\x29\xe0\xf8\xe4\xe4\x04\x88\x81\xa3\xfb\xa6\x23\x0f\xd5\x5e\x66\x36\xd7\x77\xea\x5b\x24\x5f\x8c\xa4\x2d\x80\xd8\xf9\x9e\xf8\x2d\x51\x1a\xb4\x13\x9d\x77\xd6\xac\x90\xdb\x28\xee\x34\x64\x20\xc5\x9e\x9d\xe8\x7c\xef\x0b\x28\xb6\x69\x94\x46\x4c\xcd\xd4\x7c\xe6\x3c\xbf\x32\x77\x40\xb0\x67\x4d\x8a\xcc\x32\xbb\x26\x59\xe9\xd6\x99\xfe\x42\x7b\x9d\x9f\x7f\xea\xf4\x92\x7f\x02\x00\x00\xff\xff\xd5\xf6\xe3\x1f\x01\x0e\x00\x00")

func infraStackLocalPathProvisionerYamlBytes() ([]byte, error) {
	return bindataRead(
		_infraStackLocalPathProvisionerYaml,
		"infra-stack/local-path-provisioner.yaml",
	)
}

func infraStackLocalPathProvisionerYaml() (*asset, error) {
	bytes, err := infraStackLocalPathProvisionerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "infra-stack/local-path-provisioner.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _infraStackNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x0d\x80\x40\x08\x05\xd0\x9e\x29\x58\xc0\xc2\x96\x21\x2c\xed\x7f\xbc\x5f\x10\x03\x77\x11\x62\xe2\xf6\x3e\x2c\x3f\xf9\x94\xcf\x34\x7d\x77\xb9\x3d\x87\xe9\x81\x60\x2d\x5c\x94\x60\x63\xa0\x61\xa2\x9a\x08\x9a\xce\x95\xbe\xd5\x57\xcd\x90\x3f\x00\x00\xff\xff\xc4\xa4\xc4\xe0\x3d\x00\x00\x00")

func infraStackNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_infraStackNamespaceYaml,
		"infra-stack/namespace.yaml",
	)
}

func infraStackNamespaceYaml() (*asset, error) {
	bytes, err := infraStackNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "infra-stack/namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _opniStackMinioYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\xcd\x6a\x02\x41\x0c\xc0\xf1\xfb\x3c\x45\x58\xf0\xe8\x2e\xbd\xce\xad\x0c\x03\x5d\xa4\x0a\x6e\x11\x7a\x92\x10\x43\x77\xe8\x7c\x31\x09\x82\x6f\x5f\x46\x2c\xad\xc7\xc0\x2f\xf9\x07\x6b\x38\x71\x93\x50\xb2\x85\x95\x63\x1a\x09\x55\x23\x8f\xa1\x4c\xd7\x17\xf3\x1d\xf2\xc5\xc2\x1b\xc7\xe4\x56\x6c\x6a\x12\x2b\x5e\x50\xd1\x1a\x80\x8c\x89\x2d\xa4\x90\x43\x81\xc7\x28\x15\x89\x2d\x94\x9a\xc3\x56\x6e\xa2\x9c\x8c\x54\xa6\xae\xa9\xef\x3f\xb8\x01\x68\x5c\x8b\x85\x55\xb5\x8a\x9d\xa6\x7b\x38\x85\xdc\xab\x06\xe0\xfa\xfb\xd0\xb0\x79\x9f\xf7\xf3\xe1\x7c\xf2\xc7\x65\x3e\xec\x37\x83\x01\x10\xd6\x7e\x0f\x00\x89\x58\x64\xc7\xb7\x3f\xf7\xea\x9c\x5f\x96\xf3\xce\x7f\xde\x69\xc7\xd4\x58\x9f\xcc\xe2\xdd\xd1\x7f\xfc\x33\xb5\xd7\x44\x39\x13\x8f\xa2\xa5\xe1\x17\xbb\x88\x22\x16\x86\x58\x08\xe3\xb6\xa2\xae\xc3\x4f\x00\x00\x00\xff\xff\xca\xd0\x92\xa7\x28\x01\x00\x00")

func opniStackMinioYamlBytes() ([]byte, error) {
	return bindataRead(
		_opniStackMinioYaml,
		"opni-stack/minio.yaml",
	)
}

func opniStackMinioYaml() (*asset, error) {
	bytes, err := opniStackMinioYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "opni-stack/minio.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _opniStackNatsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\xcb\x6a\xeb\x30\x10\xc6\xf1\xbd\x9e\x62\x30\x78\x79\x64\xce\x56\x3b\xe1\x14\x5a\x48\x1b\x13\x97\x5e\x56\x61\x22\x0f\x58\x54\x37\x34\xe3\xb6\x79\xfb\xe2\xc6\x34\x3b\x89\xff\xef\x1b\x2c\xfe\x85\x2a\xfb\x9c\x0c\xcc\x14\xa2\x76\x28\x12\x48\xfb\xdc\x7d\xfe\x57\x1f\x3e\x4d\x06\xee\x29\xc4\x7e\xc6\x2a\x2a\x92\xe0\x84\x82\x46\x01\x24\x8c\x64\x20\xa1\x30\x6c\x3f\x2e\xe8\xc8\x40\x2e\xc9\xff\xe3\x0b\x0b\x45\xc5\x85\xdc\x8a\xdd\x3a\xbf\x6a\x05\x50\xa9\x64\x03\xb3\x48\x61\xd3\x75\xbf\x8d\xf5\xd9\x4b\xc2\xe8\xb5\xcb\xb1\xdb\xde\x0a\x80\x49\xd6\x3d\x00\x2e\x32\x6b\x4a\x78\x0e\x34\x19\x68\xa4\x2e\xd4\xdc\x42\x41\xe6\xaf\x5c\xd7\xd2\x3e\xd9\xe7\xf1\x34\xd8\x71\x7c\x3d\x1c\x77\xed\x15\x55\x2a\xc1\x3b\xec\xf3\x92\xe4\xcf\x1c\xef\x86\xfd\x43\x6f\xc7\xcd\x44\xfc\x1e\xf0\x12\x32\xde\xae\x3c\xda\xb7\xd3\x60\xdf\xf7\x07\xbb\x6b\x9b\x9f\x00\x00\x00\xff\xff\x28\xb0\x7f\x2e\x2b\x01\x00\x00")

func opniStackNatsYamlBytes() ([]byte, error) {
	return bindataRead(
		_opniStackNatsYaml,
		"opni-stack/nats.yaml",
	)
}

func opniStackNatsYaml() (*asset, error) {
	bytes, err := opniStackNatsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "opni-stack/nats.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _opniStackOpendistroEsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd0\x3f\x6b\xf4\x30\x0c\x06\xf0\x3d\x9f\x42\x18\x32\x26\x2f\xef\xea\xed\xc8\x05\xae\x4b\x72\xc4\x69\x3b\x06\xd5\x11\x8d\xa9\xff\x61\xe9\x5a\xfa\xed\x4b\x20\x5b\x6f\xe8\xad\xe6\xf9\xf9\x91\x84\xd9\xbd\x50\x61\x97\xa2\x86\x8d\x7c\x68\x2d\x8a\x78\x6a\x5d\xfa\xf7\xf9\xbf\xfa\x70\x71\xd5\x70\x21\x1f\xba\x0d\x8b\x54\x81\x04\x57\x14\xd4\x15\x40\xc4\x40\x1a\x54\xca\x14\x57\xc7\x52\x52\x43\xac\x8e\x77\xce\x68\x49\x43\xca\xd1\x35\xfc\xcd\x42\xa1\xe2\x4c\x76\x67\x76\xff\xa8\x4b\x51\x28\x8a\x86\x7a\xbc\xf6\xc3\xf9\xc9\xcc\xd3\xb8\xf4\x66\xe9\x2e\xa7\x69\x5e\xba\x71\x98\xfb\x61\xae\x2b\x00\x26\xd9\x11\x00\x79\x64\x71\x96\x09\x8b\xdd\xda\x80\x2c\x54\xda\xbc\x4f\xce\x42\xd1\x52\x4b\x11\xdf\x3c\xad\x1a\x94\x94\x1b\xa9\xbf\x21\x96\x54\xf0\x9d\x3a\x8f\xcc\x1a\x94\x4f\x16\x7d\x93\x51\xb6\x7b\x7e\x5f\xfc\xc1\xca\x5f\xe4\xa1\xc2\x1b\x53\x39\xae\x5c\xf7\x66\x79\x36\xfd\x54\xdf\xcb\x65\x64\xfe\x4a\x65\x3d\x72\xd7\x93\x31\xaf\xe3\x74\xae\xd5\x4f\x00\x00\x00\xff\xff\x69\x37\x7f\x4d\xdd\x01\x00\x00")

func opniStackOpendistroEsYamlBytes() ([]byte, error) {
	return bindataRead(
		_opniStackOpendistroEsYaml,
		"opni-stack/opendistro-es.yaml",
	)
}

func opniStackOpendistroEsYaml() (*asset, error) {
	bytes, err := opniStackOpendistroEsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "opni-stack/opendistro-es.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _opniStackTraefikYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xcd\x4a\xc5\x40\x0c\x85\xf7\xf3\x14\x61\xe0\x2e\x6d\x71\x9b\x9d\xc8\x15\x8b\xa0\x50\xa5\x5b\x49\xa7\x91\x0e\x9d\x3f\x26\xb1\xe0\xdb\xcb\x94\xaa\xe0\xf6\x9c\x93\xef\x0b\x15\x3f\x71\x15\x9f\x13\xc2\xca\x21\x76\x8e\x54\x03\x77\x3e\xf7\xfb\xad\xd9\x7c\x5a\x10\x1e\x39\xc4\xfb\x95\xaa\x9a\xc8\x4a\x0b\x29\xa1\x01\x48\x14\x19\x41\x2b\xf1\x87\xdf\xe0\x0c\xa4\x90\x63\x84\x5c\x92\xbf\x91\x2f\x51\x8e\x46\x0a\xbb\xb6\x77\x8d\xf0\x7b\x60\x00\x2a\x97\x8c\xb0\xaa\x16\xc1\xbe\x3f\xe4\x67\xd9\xec\x7f\xbb\xfd\xe7\x3f\x7b\x79\x1b\xef\xae\x0f\xc3\xd3\xfb\x74\x1d\x5f\x87\x97\xe7\x8b\x35\x00\xc2\xda\xf0\x00\x75\x26\xd7\x71\xa2\x39\xf0\x82\x60\xb5\x7e\xb2\x3d\x0a\x91\xf0\x3f\xff\x0e\x00\x00\xff\xff\x52\xa1\x2a\x56\xf7\x00\x00\x00")

func opniStackTraefikYamlBytes() ([]byte, error) {
	return bindataRead(
		_opniStackTraefikYaml,
		"opni-stack/traefik.yaml",
	)
}

func opniStackTraefikYaml() (*asset, error) {
	bytes, err := opniStackTraefikYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "opni-stack/traefik.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _servicesDrainServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xc1\x6e\xdb\x30\x0c\x86\xef\x7e\x0a\x22\x40\x6f\xb1\x93\x06\xbb\x4c\xa7\x05\x88\x07\x14\x0b\xd2\x20\xee\x3a\xec\x64\xb0\x0a\xd7\x68\xa3\x29\x41\x94\x3d\xf8\xed\x07\xad\x73\xb6\xb4\x19\x2f\x02\xf4\x91\xff\x47\x62\x70\x8f\x14\xd5\x79\x31\x80\x21\xe8\x62\xb8\x2d\x7e\x38\x39\x1a\xd8\x50\x60\x3f\x76\x24\xa9\xe8\x28\xe1\x11\x13\x9a\x02\x40\xb0\x23\x03\xc7\x88\x4e\x4a\xa5\x38\x38\x4b\x85\x06\xb2\x99\x45\x0a\xec\x2c\xaa\x81\xdb\x02\x40\x89\xc9\x26\x1f\x33\x01\xe8\x30\xd9\xd3\x16\x9f\x88\xf5\xe5\x03\xb2\xef\x75\x12\x40\xa2\x2e\x30\x26\xfa\x33\xf5\x8f\x39\x17\x5f\x04\xfc\x27\x02\x60\x5a\x28\x97\xf5\x92\xd0\x09\xc5\xf3\x58\x79\xf5\x88\x29\xd2\x75\xf8\x4c\x06\x14\xe5\x3b\x8e\x11\xc5\x9e\x28\x2e\x2e\x5a\xcd\xb0\xac\x96\x97\xfd\xfb\x9e\x79\xef\xd9\xd9\xd1\xc0\x9a\x7f\xe2\xa8\x67\x4e\x32\xfc\xdd\x77\x52\xef\xd6\x0f\x4d\xdb\xd4\x87\xc7\xfa\xd0\x7e\x3e\x6c\xcf\x1c\x60\x40\xee\xc9\xc0\x4c\x30\xa9\x59\x2c\xf2\xd3\x5a\x76\x24\xc9\xdc\xfc\x9e\xda\xaf\x9b\xe6\xcb\xfd\x61\x73\xf3\x21\xb3\xf2\x85\x55\x3e\x88\x2b\x75\xd4\x44\x5d\xa5\x83\x35\xef\x56\xab\xd5\xec\x8d\xb6\x6e\xda\x7a\xb7\xd9\xdf\xdf\xed\x1e\xae\x28\x4f\x29\x85\xec\xf4\x81\xe4\xe8\x34\x45\x5f\xd2\x24\x98\x6e\x7f\x2d\xaa\x2c\xf7\x9a\x28\x56\xec\x2d\xb2\x79\xbf\x5a\x2e\xdf\x6a\x3f\xae\xef\xb6\xed\xa7\xfa\x6b\x5e\xbb\xb9\x22\xfe\x86\x8e\xe7\x14\xa3\x8f\xf3\xce\xa9\x3a\x79\x9e\xf7\x82\x4f\x4c\xb3\xa2\xf8\x15\x00\x00\xff\xff\x16\x8b\xb4\xb3\xa1\x02\x00\x00")

func servicesDrainServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_servicesDrainServiceYaml,
		"services/drain-service.yaml",
	)
}

func servicesDrainServiceYaml() (*asset, error) {
	bytes, err := servicesDrainServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "services/drain-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _servicesNulogInferenceServiceControlPlaneYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x41\x6f\xda\x30\x14\xc7\xef\x7c\x8a\x27\xa4\x1e\x93\x00\x6b\x3b\xd5\xa7\x21\xb0\x5a\xd4\x2c\x41\x49\x8a\xb4\x53\xe4\x9a\x47\x6b\xcd\xb1\x3d\xdb\xc9\x9a\x6f\x3f\x65\x1d\x14\x46\x68\x8b\x2f\x91\xfe\x2f\xef\xf7\x7b\xb6\x6c\x66\xc4\x0a\xad\x13\x5a\x11\x60\xc6\xb8\xa8\x19\x0f\x7e\x0a\xb5\x26\x30\x47\x23\x75\x5b\xa1\xf2\x83\x0a\x3d\x5b\x33\xcf\xc8\x00\x40\xb1\x0a\x09\xa8\x5a\xea\xa7\x40\xa8\x0d\x5a\x54\x1c\x03\x87\xb6\x11\x1c\x03\xae\x95\xb7\x5a\x06\x46\x32\x85\x03\x67\x90\x77\x3d\x16\x8d\x14\x9c\x39\x02\xe3\x01\x80\x43\x89\xdc\x6b\xdb\x55\x00\x2a\xe6\xf9\x73\xcc\x1e\x51\xba\xd7\x00\xba\x39\x3e\x6b\x00\xf0\x58\x19\xc9\x3c\xfe\xa3\xed\x4d\xda\x2d\x79\x00\x3e\x13\x0d\xb0\xdd\x40\xb7\xba\x2a\x13\x0a\xed\x0e\x17\x9c\x75\x18\xdb\x11\x44\xc5\x9e\x90\x80\x6f\x1f\x99\xc4\x97\xe8\x53\xcd\xa4\x19\x85\xe3\x43\xc2\xb2\x96\x72\xa9\xa5\xe0\x2d\x81\xa9\xfc\xcd\x5a\xb7\xab\xa3\x6a\xde\x76\xbc\x1d\x32\x99\x16\x79\x99\xd3\x6c\x45\xb3\xf2\x21\x8b\x77\x75\x80\x86\xc9\x1a\x09\x0c\x15\xf3\x8e\x44\x51\xf7\x29\xb9\x14\xa8\x3c\x59\x6d\x1e\xae\x0b\x3e\x95\x37\x2f\xdf\xba\x38\x78\x8d\xc3\x35\x6e\x58\x2d\x7d\xe8\x1a\x4e\x2e\x27\x93\xc9\xf0\xc8\x46\xf3\x92\x26\xf3\x65\xba\x48\x8a\x1e\xd3\xb3\xf7\xa6\x53\x69\x83\x6a\x2d\x9c\xb7\x3a\xc0\x2d\x7c\x7b\x00\xfb\x92\x90\xcb\xda\x79\xb4\xa1\xd4\x9c\x49\x72\x33\x19\x8d\x8e\x95\xdf\x17\xc9\x22\xfd\xc8\x4a\xa2\xa8\x12\x4a\xe8\xf7\xe8\xa3\xd3\xf4\xe9\x6c\x46\xf3\xbc\xbc\xa7\x3f\x3e\xe2\x6b\xa3\x44\xe0\x5a\xe7\xb1\x3a\xd3\x91\xd3\x59\x46\x8b\x13\x8e\x8b\xff\xff\xb9\xe8\xc1\xa4\x73\x1a\x97\xc5\x5d\x46\xf3\xbb\x34\x9e\xf7\x50\x46\xe1\x75\xaf\xbd\x8c\xd3\xdb\xb2\x48\xef\x69\x92\xf7\x74\x5d\x1e\xf7\x2c\xf2\x72\x96\x26\x45\x96\xc6\xe5\x32\x9e\x26\xf4\xef\x05\x5b\xcc\x68\x4f\x77\x61\x6b\x7c\x03\x58\x74\xba\xb6\x1c\xf7\x9e\x26\x80\x14\x95\xf0\x07\x49\xf7\xa0\x2b\x6d\x5b\x02\x93\x5b\x71\x90\x73\x53\x13\x18\x7e\x0d\xaf\x86\x7b\xb1\xc5\x5f\x35\xba\x53\x88\x71\x2f\xe2\x4b\x78\x35\xfc\x13\x00\x00\xff\xff\xa5\xd0\xdb\x34\x05\x05\x00\x00")

func servicesNulogInferenceServiceControlPlaneYamlBytes() ([]byte, error) {
	return bindataRead(
		_servicesNulogInferenceServiceControlPlaneYaml,
		"services/nulog-inference-service-control-plane.yaml",
	)
}

func servicesNulogInferenceServiceControlPlaneYaml() (*asset, error) {
	bytes, err := servicesNulogInferenceServiceControlPlaneYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "services/nulog-inference-service-control-plane.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _servicesNulogInferenceServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\x3d\x6f\xdb\x30\x10\x86\x77\xff\x8a\x43\x80\x8c\x92\x6c\xa3\x1d\xca\xa9\x46\x4c\x34\x46\x5c\xcb\x10\xdd\x14\x9d\x84\x0b\x7d\x71\x88\xf0\x0b\x24\xa5\x56\xff\xbe\x50\x53\xbb\x76\x23\xc1\x5c\x04\xf0\xe5\xf3\x3e\x77\x83\xd0\xab\x47\x0a\x51\x39\xcb\x00\xbd\x8f\x45\x3b\x9b\xbc\x2a\xbb\x67\xb0\x24\xaf\x5d\x67\xc8\xa6\x89\xa1\x84\x7b\x4c\xc8\x26\x00\x16\x0d\x31\xb0\x8d\x76\x87\x4c\xd9\x67\x0a\x64\x25\x65\x91\x42\xab\x24\x4d\xa2\x27\xd9\xbf\x0a\xe4\xb5\x92\x18\x19\xcc\x26\x00\x91\x34\xc9\xe4\x42\x9f\x00\x18\x4c\xf2\x65\x8d\x4f\xa4\xe3\xdb\x05\xf4\xe6\xf1\x4e\x80\x44\xc6\x6b\x4c\xf4\x97\x3f\x9b\xa6\x3f\xfa\xa2\xea\x6a\x19\xc0\x71\xc8\xfe\x48\x67\x13\x2a\x4b\xe1\x54\x90\x5d\x59\xf1\xa8\x51\x06\x0f\xc4\x20\x75\x4f\xa8\xe9\x57\x31\xf2\x9c\xb5\xd3\x7c\x76\xc9\x6c\x1b\xad\xb7\x4e\x2b\xd9\x31\x58\xe8\x9f\xd8\xc5\x53\x4e\xb6\xfd\xb7\xc7\x71\x90\xcd\x62\x27\x6a\xc1\xab\x47\x5e\xd5\xdf\xaa\xf5\x29\x07\x68\x51\x37\xc4\xe0\xc6\x62\x8a\xac\x28\xfa\x4f\x2d\xb5\x22\x9b\xd8\xed\x1f\x6a\xbb\x10\xe2\x7b\x59\x2d\x6f\x3f\xf7\x59\xf6\x96\xe5\xce\x5b\x95\xc5\x2e\x26\x32\x79\x6c\x25\xfb\x30\x9f\xcf\x6f\xde\x69\xb9\xa8\xf9\x66\xb9\x2d\x57\x9b\xdd\x80\xf2\x25\x25\xdf\x3b\x9d\x27\xbb\x57\x31\x05\x97\xd1\x51\x70\xdc\xfd\x7f\x51\x2e\x75\x13\x13\x85\x5c\x3b\x89\x9a\x7d\x9a\x4f\xa7\xef\xb5\x5f\x57\x9b\x55\x79\xcd\xcc\x8a\xc2\x28\xab\x5c\xbe\xa7\x67\x6c\x74\x1a\x6a\x9f\x8e\xb7\x2f\xee\xee\xb8\x10\xf5\x03\xff\x31\xd0\x6f\x3a\x94\x92\x62\x7c\xa5\x6e\x8c\x17\xfc\xae\xe2\xbb\x51\x3e\x92\x0c\x94\x86\xf9\x72\xc9\xd7\xf5\xee\xbe\xe2\xe2\xbe\x5c\x2f\x07\xf0\x69\xfe\x71\x50\x5b\xaf\xcb\x2f\xf5\xae\x7c\xe0\x1b\x31\x40\x9d\x31\x81\xa2\x6b\x82\xa4\xb3\x3f\x02\x40\x2b\xa3\xd2\xc5\x0d\x80\x6d\xd5\x5e\x61\x2e\x9d\x29\x0e\xbe\x61\x30\xfb\x1d\x00\x00\xff\xff\xc2\x66\x46\x0d\x0c\x04\x00\x00")

func servicesNulogInferenceServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_servicesNulogInferenceServiceYaml,
		"services/nulog-inference-service.yaml",
	)
}

func servicesNulogInferenceServiceYaml() (*asset, error) {
	bytes, err := servicesNulogInferenceServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "services/nulog-inference-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _servicesPayloadReceiverServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb1\x6e\xdb\x30\x10\xdd\xf5\x15\x87\x00\x19\x29\x39\x46\x87\x82\x53\x0d\x24\x43\x81\x20\x35\xac\x36\x1d\x8d\x33\x75\x89\x59\x53\x24\x41\x9e\xd4\xea\xef\x0b\x5a\x12\xa3\xa0\x48\xdc\x70\x11\xa5\x7b\xef\xf8\xde\xe9\x11\xbd\x7e\xa4\x10\xb5\xb3\x12\xfa\x9b\xe2\xa4\x6d\x23\xa1\xa6\xd0\x6b\x45\x45\x4b\x8c\x0d\x32\xca\x02\xc0\x62\x4b\x12\x3c\x0e\xc6\x61\x23\x02\x29\xd2\x3d\x05\x11\x27\x28\x80\xc1\x03\x99\x98\xa0\x00\xd3\xd7\x77\xf0\xd1\x93\x4a\xd8\x48\x86\x14\xbb\x30\xf2\xd0\xfb\x77\xcf\xf0\x2e\xf0\xf9\x08\x71\xde\x4a\xf8\xbc\x2a\x84\x10\xc5\xd2\x05\x7a\x1f\xab\x6c\xe5\x96\xbc\x71\x43\x4b\x96\x3f\xe2\x66\x56\x17\xc8\x1b\xad\x30\x4a\xb8\xf9\x47\x6b\x8b\xac\x8e\xf7\x0b\xd3\x97\xe5\x33\xb5\xde\x20\xd3\xd4\x60\xa1\x27\x2d\xf3\xaa\xd7\xe5\x6e\x00\xb3\xcc\xb4\x94\xb3\x8c\xda\x52\xc8\x1d\xc4\xe5\x7f\x36\x2e\xdd\xe2\x33\x49\x88\x68\x7f\xe1\x10\xd0\xaa\x23\x85\xea\x2d\x96\xec\x57\xe5\xea\x35\x75\xdb\x19\xb3\x75\x46\xab\x41\xc2\xc6\xfc\xc6\x21\xe6\x3a\xd9\xfe\xc5\xd0\x2c\xe8\x61\xf3\xbd\xde\xd7\x77\xbb\xc7\xbb\xdd\xfe\xc7\xee\x3e\xd7\x01\x7a\x34\x1d\x49\xb8\xb2\xc8\x51\x56\x55\x7a\xec\x95\xd1\x64\x59\x5e\x9f\x59\xdb\x4d\x5d\xff\xfc\xb6\xbb\xbd\xfe\x92\x6a\x62\xac\x95\xce\x5b\x2d\xe2\x10\x99\xda\x32\xf6\x4a\x7e\x5a\xaf\xd7\x57\xb9\x6d\x0e\xcd\xac\x22\x8f\x6a\xfb\x56\x86\xe8\x0f\x93\x4d\xdb\x94\xa4\x03\x31\xce\x71\xfa\x6a\x9f\x03\xc5\xf8\x81\x2c\x09\x3d\x51\x46\x60\xf4\x98\xee\x45\x43\x4f\xd8\x19\x2e\x00\xd0\x5a\xc7\xc8\xe9\xac\x51\xe3\xa9\x3b\x50\xb0\xc4\x14\x4b\xed\xaa\x89\x5d\x2a\x83\x31\x4a\xe0\x80\xf4\xa4\x4f\x2f\x01\xed\x0c\x4d\x17\xe2\xc8\xec\x67\x97\x1e\xf9\xb8\xc8\x41\x7a\x95\x50\xe5\x11\x1c\x50\x9d\xc8\x36\x72\x31\xf9\x49\xed\xc3\xff\x25\x26\xe3\xf3\x04\x8b\xbf\x01\x00\x00\xff\xff\x8a\x65\x30\x04\x49\x04\x00\x00")

func servicesPayloadReceiverServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_servicesPayloadReceiverServiceYaml,
		"services/payload-receiver-service.yaml",
	)
}

func servicesPayloadReceiverServiceYaml() (*asset, error) {
	bytes, err := servicesPayloadReceiverServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "services/payload-receiver-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _servicesPreprocessingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x4f\x6f\xe2\x30\x10\xc5\xef\xf9\x14\x23\x24\x8e\xf9\x43\xb4\x97\xf5\x69\x91\xc8\x61\x25\x04\x51\xc2\xb2\xc7\x68\xd6\x8c\xc0\x5b\xc7\xb6\x3c\x26\x55\xbe\x7d\xe5\xd2\xd0\xd2\xd2\x76\x2e\x91\xf2\xfc\xde\xef\x3d\x74\x6a\x4f\x9e\x95\x35\x02\xd0\x39\xce\x87\x45\xf2\xa0\xcc\x41\xc0\x8a\x9c\xb6\x63\x4f\x26\x24\x3d\x05\x3c\x60\x40\x91\x00\x18\xec\x49\x80\xf3\xe4\xbc\x95\xc4\xac\xcc\x31\x65\xf2\x83\x92\x94\xb0\x23\x19\xdf\x78\x72\x5a\x49\x64\x01\x8b\x04\x80\x49\x93\x0c\xd6\x47\x05\xa0\xc7\x20\x4f\x6b\xfc\x47\x9a\x2f\x3f\x20\x72\x3f\x4b\x04\x08\xd4\x3b\x8d\x81\x5e\xdc\x6f\x9a\xc4\xd3\x37\x41\xdf\x44\x01\x4c\x05\xe3\x49\x6b\x02\x2a\x43\xfe\x6a\x4f\xbf\x1c\x37\x21\x54\x8f\x47\x12\xc0\x68\xfe\xe3\xe8\xd1\xc8\x13\xf9\xfc\xae\x45\x0c\x45\x56\xdc\xfa\xea\xb3\xd6\xb5\xd5\x4a\x8e\x02\x96\xfa\x11\x47\xbe\xea\x64\x86\xd7\x1d\x53\x95\xcd\x72\xd7\x76\x6d\xd5\xec\xab\xa6\xfb\xd3\xac\xaf\x3a\xc0\x80\xfa\x4c\x02\x66\x06\x03\x8b\x3c\x8f\x9f\x4e\x6a\x45\x26\x88\xf9\xb3\xab\x5e\xb6\xed\xdf\x6d\xb3\x9a\xff\x8a\x5a\x7a\xd1\x32\xeb\x8c\x4a\x79\xe4\x40\x7d\xc6\x83\x14\x3f\xca\xb2\x9c\x7d\xc0\x56\x6d\x57\x6d\x56\xf5\xf6\xf7\x66\x77\x07\x79\x0a\xc1\x45\xa6\x75\x64\x0e\x8a\x83\xb7\x29\x4d\x80\x69\xfb\x7b\x50\x26\xf5\x99\x03\xf9\x4c\x5b\x89\x5a\xfc\x2c\x8b\x62\x96\x3c\x05\x00\x00\xff\xff\x13\xbb\xfd\x50\x7d\x02\x00\x00")

func servicesPreprocessingYamlBytes() ([]byte, error) {
	return bindataRead(
		_servicesPreprocessingYaml,
		"services/preprocessing.yaml",
	)
}

func servicesPreprocessingYaml() (*asset, error) {
	bytes, err := servicesPreprocessingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "services/preprocessing.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _servicesTraining_controllerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x41\x8f\xda\x30\x10\x85\xef\xf9\x15\x23\x24\x8e\x21\x59\xd4\x4b\x7d\x6a\x0a\x96\xca\x96\x4d\x50\x1c\xb6\x6a\x2f\xd1\xd4\x4c\x17\xab\x8e\x1d\xd9\x26\x55\xfe\x7d\x95\xee\x02\xdd\x25\xb0\xbe\x44\xca\x9b\xf7\xcd\x9b\xb1\xb1\x55\x8f\xe4\xbc\xb2\x86\x01\xb6\xad\x4f\xba\xbb\xe8\xb7\x32\x3b\x06\x4b\x6a\xb5\xed\x1b\x32\x21\x6a\x28\xe0\x0e\x03\xb2\x08\xc0\x60\x43\x0c\x82\x43\x65\x94\x79\x8a\xa5\x35\xc1\x59\xad\xc9\x45\xbe\x25\x39\x54\x38\x6a\xb5\x92\xe8\x19\xdc\x45\x00\x9e\x34\xc9\x60\xdd\xa0\x00\x34\x18\xe4\x7e\x8d\x3f\x49\xfb\xe7\x1f\x30\x74\x1d\xe7\x01\x04\x6a\x5a\x8d\x81\x5e\xbc\xff\xa5\x18\x8e\x7e\x85\xb9\x09\x02\x38\x86\x1b\xce\x20\xa1\x32\xe4\x4e\xe6\xf8\xc6\x58\x47\xbc\x6a\xf0\x89\x18\x60\x83\x2e\xf4\xe8\xd0\xc8\x3d\xb9\x64\xc4\xc1\xba\x74\x96\xbe\xb6\x6d\x0e\x5a\x6f\xac\x56\xb2\x67\x90\xe9\x3f\xd8\xfb\x93\x4e\xa6\x3b\x8f\x70\xcc\x91\x67\x95\xa8\x05\x2f\x1f\x79\x59\x6f\xcb\xf5\x49\x07\xe8\x50\x1f\x88\xc1\xc4\x60\xf0\x2c\x49\x86\x4f\x2d\xb5\x22\x13\xd8\xf4\x9f\x6b\x93\x09\xf1\xad\x28\x97\xd3\x4f\x83\x16\x3f\x6b\x33\xdb\x1a\x15\xfb\xde\x07\x6a\x66\xbe\x93\xec\xc3\x7c\x3e\x9f\x5c\xb4\x7d\x58\xe5\xab\xe2\x76\xdf\x7d\x08\x2d\x4b\x92\x46\x19\x65\xdf\x52\x67\x52\x1f\x7c\x20\x37\xd3\x56\xa2\x66\x1f\xd3\x34\xbd\xd6\x23\x5b\x2c\xb8\x10\xf5\x57\xfe\x7d\xa4\xc7\xf4\x6d\xcd\xf4\x7a\xd4\x45\xc9\xab\xdb\x98\x73\xcd\x08\xe6\xbe\xf8\x5c\xe7\xd9\x03\x17\x9b\x6c\xc1\x47\x18\x3b\xfa\x85\x07\x1d\x2e\x8d\x5c\xd4\x3c\x5f\x6e\x8a\x55\x5e\x5d\xd9\xd2\x70\x3d\xb6\x25\xb3\x53\x3e\x38\x1b\xd3\xf1\x2e\x62\x4f\xae\x53\x92\xde\xdb\xde\x7c\x6c\x7b\x5c\xd4\x5b\xc1\xcb\x21\xf2\xd8\xc4\x2f\xf2\xc8\xa0\xfc\xfc\x32\xae\x18\x4f\x0f\xe7\xd2\x9c\x17\x4b\x5e\x57\x6b\x51\x97\xfc\x9e\x2f\xaa\x7a\x9b\x67\xdb\xea\x4b\x51\xae\x7e\xf0\x31\x5a\x3a\x89\xfe\x06\x00\x00\xff\xff\x34\x8f\xa4\xa7\x57\x04\x00\x00")

func servicesTraining_controllerYamlBytes() ([]byte, error) {
	return bindataRead(
		_servicesTraining_controllerYaml,
		"services/training_controller.yaml",
	)
}

func servicesTraining_controllerYaml() (*asset, error) {
	bytes, err := servicesTraining_controllerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "services/training_controller.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"infra-stack/helm-controller.yaml":                    infraStackHelmControllerYaml,
	"infra-stack/local-path-provisioner.yaml":             infraStackLocalPathProvisionerYaml,
	"infra-stack/namespace.yaml":                          infraStackNamespaceYaml,
	"opni-stack/minio.yaml":                               opniStackMinioYaml,
	"opni-stack/nats.yaml":                                opniStackNatsYaml,
	"opni-stack/opendistro-es.yaml":                       opniStackOpendistroEsYaml,
	"opni-stack/traefik.yaml":                             opniStackTraefikYaml,
	"services/drain-service.yaml":                         servicesDrainServiceYaml,
	"services/nulog-inference-service-control-plane.yaml": servicesNulogInferenceServiceControlPlaneYaml,
	"services/nulog-inference-service.yaml":               servicesNulogInferenceServiceYaml,
	"services/payload-receiver-service.yaml":              servicesPayloadReceiverServiceYaml,
	"services/preprocessing.yaml":                         servicesPreprocessingYaml,
	"services/training_controller.yaml":                   servicesTraining_controllerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"infra-stack": &bintree{nil, map[string]*bintree{
		"helm-controller.yaml":        &bintree{infraStackHelmControllerYaml, map[string]*bintree{}},
		"local-path-provisioner.yaml": &bintree{infraStackLocalPathProvisionerYaml, map[string]*bintree{}},
		"namespace.yaml":              &bintree{infraStackNamespaceYaml, map[string]*bintree{}},
	}},
	"opni-stack": &bintree{nil, map[string]*bintree{
		"minio.yaml":         &bintree{opniStackMinioYaml, map[string]*bintree{}},
		"nats.yaml":          &bintree{opniStackNatsYaml, map[string]*bintree{}},
		"opendistro-es.yaml": &bintree{opniStackOpendistroEsYaml, map[string]*bintree{}},
		"traefik.yaml":       &bintree{opniStackTraefikYaml, map[string]*bintree{}},
	}},
	"services": &bintree{nil, map[string]*bintree{
		"drain-service.yaml":                         &bintree{servicesDrainServiceYaml, map[string]*bintree{}},
		"nulog-inference-service-control-plane.yaml": &bintree{servicesNulogInferenceServiceControlPlaneYaml, map[string]*bintree{}},
		"nulog-inference-service.yaml":               &bintree{servicesNulogInferenceServiceYaml, map[string]*bintree{}},
		"payload-receiver-service.yaml":              &bintree{servicesPayloadReceiverServiceYaml, map[string]*bintree{}},
		"preprocessing.yaml":                         &bintree{servicesPreprocessingYaml, map[string]*bintree{}},
		"training_controller.yaml":                   &bintree{servicesTraining_controllerYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
