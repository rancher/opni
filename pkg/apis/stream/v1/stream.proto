syntax = "proto3";

package streaming;

import "github.com/kralicky/totem/extensions.proto";
import "github.com/kralicky/totem/totem.proto";
import "github.com/rancher/opni/pkg/apis/core/v1/core.proto";
import "google/protobuf/empty.proto";
import "google/rpc/status.proto";

option go_package = "github.com/rancher/opni/pkg/apis/stream/v1";

service Stream {
  rpc Connect(stream totem.RPC) returns (stream totem.RPC);

  // Used for implementation-specific events. No guarantees are made about
  // whether events will be sent or when.
  rpc Notify(StreamEvent) returns (google.protobuf.Empty);
}

enum EventType {
  Unknown           = 0;
  DiscoveryComplete = 1;
}

message StreamEvent {
  EventType type          = 1;
  string    correlationId = 2;
}

service Delegate {
  option (totem.visibility) = {
    splicedClients: true
  };

  // A synchronous request-response RPC sent to a single client.
  rpc Request(DelegatedMessage) returns (totem.Response);

  // A best-effort broadcast sent to all connected clients, with an
  // optional target filter.
  rpc Broadcast(BroadcastMessage) returns (BroadcastReplyList);
}

service Relay {
  rpc RelayDelegateRequest(RelayedDelegatedMessage) returns (totem.Response);
}

message RelayedDelegatedMessage {
  DelegatedMessage  message   = 1;
  core.InstanceInfo principal = 2;
}

message DelegatedMessage {
  totem.RPC      request = 1;
  core.Reference target  = 2;
}

message BroadcastMessage {
  totem.RPC      request        = 1;
  TargetSelector targetSelector = 2;
}

message BroadcastReplyList {
  repeated BroadcastReply items = 1;
}

message BroadcastReply {
  core.Reference target   = 1;
  totem.Response response = 2;
}

message TargetSelector {
  // List of agents to send the broadcast to. If empty, will send to all
  // connected agents.
  repeated core.Reference targets = 1;
}
