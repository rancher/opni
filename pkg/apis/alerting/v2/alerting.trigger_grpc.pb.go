// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/pkg/apis/alerting/v2/alerting.trigger.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlertCoreV2Client is the client API for AlertCoreV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertCoreV2Client interface {
	TriggerAlerts(ctx context.Context, in *TriggerAlertsRequest, opts ...grpc.CallOption) (*TriggerAlertsResponse, error)
	ResolveAlerts(ctx context.Context, in *ResolveAlertsRequest, opts ...grpc.CallOption) (*ResolveAlertsResponse, error)
	ForceSync(ctx context.Context, in *ForceSyncRequest, opts ...grpc.CallOption) (*ForceSyncResponse, error)
}

type alertCoreV2Client struct {
	cc grpc.ClientConnInterface
}

func NewAlertCoreV2Client(cc grpc.ClientConnInterface) AlertCoreV2Client {
	return &alertCoreV2Client{cc}
}

func (c *alertCoreV2Client) TriggerAlerts(ctx context.Context, in *TriggerAlertsRequest, opts ...grpc.CallOption) (*TriggerAlertsResponse, error) {
	out := new(TriggerAlertsResponse)
	err := c.cc.Invoke(ctx, "/alertingv2.AlertCoreV2/TriggerAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertCoreV2Client) ResolveAlerts(ctx context.Context, in *ResolveAlertsRequest, opts ...grpc.CallOption) (*ResolveAlertsResponse, error) {
	out := new(ResolveAlertsResponse)
	err := c.cc.Invoke(ctx, "/alertingv2.AlertCoreV2/ResolveAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertCoreV2Client) ForceSync(ctx context.Context, in *ForceSyncRequest, opts ...grpc.CallOption) (*ForceSyncResponse, error) {
	out := new(ForceSyncResponse)
	err := c.cc.Invoke(ctx, "/alertingv2.AlertCoreV2/ForceSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertCoreV2Server is the server API for AlertCoreV2 service.
// All implementations must embed UnimplementedAlertCoreV2Server
// for forward compatibility
type AlertCoreV2Server interface {
	TriggerAlerts(context.Context, *TriggerAlertsRequest) (*TriggerAlertsResponse, error)
	ResolveAlerts(context.Context, *ResolveAlertsRequest) (*ResolveAlertsResponse, error)
	ForceSync(context.Context, *ForceSyncRequest) (*ForceSyncResponse, error)
	mustEmbedUnimplementedAlertCoreV2Server()
}

// UnimplementedAlertCoreV2Server must be embedded to have forward compatible implementations.
type UnimplementedAlertCoreV2Server struct {
}

func (UnimplementedAlertCoreV2Server) TriggerAlerts(context.Context, *TriggerAlertsRequest) (*TriggerAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAlerts not implemented")
}
func (UnimplementedAlertCoreV2Server) ResolveAlerts(context.Context, *ResolveAlertsRequest) (*ResolveAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveAlerts not implemented")
}
func (UnimplementedAlertCoreV2Server) ForceSync(context.Context, *ForceSyncRequest) (*ForceSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceSync not implemented")
}
func (UnimplementedAlertCoreV2Server) mustEmbedUnimplementedAlertCoreV2Server() {}

// UnsafeAlertCoreV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertCoreV2Server will
// result in compilation errors.
type UnsafeAlertCoreV2Server interface {
	mustEmbedUnimplementedAlertCoreV2Server()
}

func RegisterAlertCoreV2Server(s grpc.ServiceRegistrar, srv AlertCoreV2Server) {
	s.RegisterService(&AlertCoreV2_ServiceDesc, srv)
}

func _AlertCoreV2_TriggerAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertCoreV2Server).TriggerAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alertingv2.AlertCoreV2/TriggerAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertCoreV2Server).TriggerAlerts(ctx, req.(*TriggerAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertCoreV2_ResolveAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertCoreV2Server).ResolveAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alertingv2.AlertCoreV2/ResolveAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertCoreV2Server).ResolveAlerts(ctx, req.(*ResolveAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertCoreV2_ForceSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertCoreV2Server).ForceSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alertingv2.AlertCoreV2/ForceSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertCoreV2Server).ForceSync(ctx, req.(*ForceSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlertCoreV2_ServiceDesc is the grpc.ServiceDesc for AlertCoreV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertCoreV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alertingv2.AlertCoreV2",
	HandlerType: (*AlertCoreV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TriggerAlerts",
			Handler:    _AlertCoreV2_TriggerAlerts_Handler,
		},
		{
			MethodName: "ResolveAlerts",
			Handler:    _AlertCoreV2_ResolveAlerts_Handler,
		},
		{
			MethodName: "ForceSync",
			Handler:    _AlertCoreV2_ForceSync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/pkg/apis/alerting/v2/alerting.trigger.proto",
}
